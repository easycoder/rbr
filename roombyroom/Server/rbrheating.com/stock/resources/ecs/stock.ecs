!	Stock Manager

	script StockManager

    div Body
    div MainPanel
    div ContentPanel
    div DialogPanel
    div DialogTitle
    div DialogText
    div Waiting
    div WaitMessage
    input DialogInput
    button DialogButton1
    button DialogButton2
    button CancelButton
    variable Server
    variable Args
    variable Mobile
    variable Email
    variable UserPassword
    variable UserData
    variable Script
    variable Webson
    variable H
    variable N

    variable MainScreenWebson

!    debug step

!	put empty into storage as `email`
!	put empty into storage as `userpassword`

    clear Mobile
    if mobile
    if portrait set Mobile

	create Body
	if Mobile
    begin
    	set style `width` of Body to `100%`
    end
	else
	begin
        put the height of the window into N
        multiply N by 9
        divide N by 16
        set style `width` of Body to N cat `px`
        set style `margin` of Body to `0 auto`
        set style `border` of Body to `1px solid lightgray`
    end

!	Render the main screen layout
Restart:
    rest get MainScreenWebson from `/resources/webson/stock.json?v=` cat now
    	or go to AbandonShip
	render MainScreenWebson in Body
    attach MainPanel to `main-panel`
    put the height of MainPanel into H
    if Mobile divide H by 60
    else divide H by 52
    set style `font-size` of Body to H

    ! Get the URL of the REST server
  	json parse url the location as Args
    put property `url` of Args into Server
    put the position of the last `/` in Server into N
    add 1 to N
    put left N of Server into Server
    put Server cat `resources/php/rest.php` into Server
    put Server into storage as `server`
	attach ContentPanel to `content-panel`

!	First make sure we have a user
	get Email from storage as `email`
    if Email is empty go to GetEmail
ResumeAfterEmail:
	put Email into storage as `email`
    get UserPassword from storage as `userpassword`
    if UserPassword is empty go to GetPassword
ResumeAfterPassword:
	put UserPassword into storage as `userpassword`

!	Get the user data. This informs if the system is creating a new user record
GetUserData:
    rest get UserData from Server cat `/user/` cat Email cat `/` cat UserPassword cat `?v=` cat now
    or begin
    	print `Server not responding`
    	exit
    end
    put property `message` of UserData into UserData
    if UserData is `found`
    begin
		remove element Waiting
    	go to Start
    end
    else if UserData is `badpassword`
    begin
    	alert `Incorrect user name or password`
		put empty into storage as `email`
		put empty into storage as `userpassword`
        go to Restart
    end
    else
    begin
    	put from 1 of UserData into UserPassword
		put UserPassword into storage as `userpassword`
    end

	! New user, so wait for the user to confirm their email
    rest get Webson from `/resources/webson/waiting.json?v=` cat now
    render Webson in MainPanel
    attach Waiting to `waiting`
    attach WaitMessage to `wait-message`
    attach CancelButton to `wait-cancel`
    set the content of Waiting to `Waiting for confirmation<br>(check your emails)`
    on click CancelButton
    begin
    	remove element Waiting
    	exit
    end
    while true
    begin
    	wait 5
		rest get UserData from Server cat `/user/` cat Email cat `/` cat UserPassword cat `?v=` cat now
		or begin
       		print `Server not responding`
            remove element Waiting
			exit
        end
    	put property `message` of UserData into UserData
        if UserData is `found`
        begin
        	remove element Waiting
            go to Start
        end
    end

Start:
    rest get Webson from `/resources/webson/item-editor.json?v=` cat now
    render Webson in ContentPanel
    rest get Script from `/resources/ecs/item-editor.ecs?v=` cat now
    run Script with ContentPanel and Server
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!	Get the user's email adress
GetEmail:
    attach DialogPanel to `dialog-panel`
    rest get Webson from `/resources/webson/dialog-input.json?v=` cat now
    render Webson in DialogPanel
    attach DialogTitle to `dialog-title`
    attach DialogText to `dialog-text`
    attach DialogButton1 to `dialog-button1`
    attach DialogButton2 to `dialog-button2`
    attach DialogInput to `dialog-input`
    set the content of DialogTitle to `Email`
    set the content of DialogText to `Type your email address`
    set the content of DialogButton1 to `OK`
    set the content of DialogButton2 to `Cancel`

    on click DialogButton1
    begin
    	put the content of DialogInput into Email
        if Email is empty stop
        clear DialogPanel
        go to ResumeAfterEmail
    end

    on click DialogButton2
    begin
        clear DialogPanel
        exit
    end
	stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!	Get the user's password
GetPassword:
    attach DialogPanel to `dialog-panel`
    rest get Webson from `/resources/webson/dialog-input.json?v=` cat now
    render Webson in DialogPanel
    attach DialogTitle to `dialog-title`
    attach DialogText to `dialog-text`
    attach DialogButton1 to `dialog-button1`
    attach DialogButton2 to `dialog-button2`
    attach DialogInput to `dialog-input`
    set the content of DialogTitle to `User Password`
    set the content of DialogText to `Type your password, or leave blank if you are a new user`
    set the content of DialogButton1 to `OK`
    set the content of DialogButton2 to `Cancel`

    on click DialogButton1
    begin
    	put the content of DialogInput into UserPassword
        clear DialogPanel
        go to ResumeAfterPassword
    end

    on click DialogButton2
    begin
        clear DialogPanel
        exit
    end
	stop

    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 	Warn the user and abandon this run
AbandonShip:
	alert `An error has occurred while communicating with the web server.`
    	cat newline cat `Please refresh this browser page to restart.`
    exit