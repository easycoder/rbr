!	System Manager

	script SystemManager

    import div MainPanel
    	and variable MAC
        and variable Password
        and variable Map
        and variable Sensors
        and variable Server
    	and variable Flag
        and variable Result
    
    div SystemVersion
    div SystemManager
    div SystemSelect
    div SystemNames
    div SystemNameButton
    div LoginPanel
    div OKPadding
    div RemovePadding
    div DialogPanel
    div DialogTitle
    div DialogText
    div Waiting
    input DialogInput
    input MACInput
    input PWDInput
    button DialogButton1
    button DialogButton2
    button OKButton
    button AddButton
    button RemoveButton
    button HelpButton
    button CancelButton
    button AddThisButton
    variable Email
    variable UserPassword
    variable UserData
    variable Webson
    variable Systems
    variable System
    variable SelectedSystem
    variable SystemName
    variable Map2
    variable MAC2
    variable Keys
    variable Text
    variable K
    variable N

!	debug step

Start:
!	put empty into storage as `email`
!	put empty into storage as `userpassword`

	attach SystemManager to `mode-panel`
!	First make sure we have a user
	get Email from storage as `email`
    if Email is empty go to GetEmail
ResumeAfterEmail:
	put Email into storage as `email`
    get UserPassword from storage as `userpassword`
    if UserPassword is empty go to GetPassword
ResumeAfterPassword:
	put UserPassword into storage as `userpassword`

!	Get the user data. This informs if the system is creating a new user record
GetUserData:
    rest get UserData from Server cat `/user/` cat Email cat `/` cat UserPassword cat `?v=` cat now
    or begin
    	print `Server not responding`
    	exit
    end
    put property `message` of UserData into UserData
    if UserData is `found`
    begin
		clear SystemManager
    	go to Continue
    end
    else if UserData is `badpassword`
    begin
    	alert `Incorrect user name or password`
        go to Start
    end
    else
    begin
    	put from 1 of UserData into UserPassword
		put UserPassword into storage as `userpassword`
    end

	! New user, so wait for the user to confirm their email
    rest get Webson from `/resources/webson/waiting.json?v=` cat now
    render Webson in SystemManager
    attach Waiting to `waiting...`
    attach CancelButton to `wait-cancel`
    set the content of Waiting to `Waiting for confirmation<br>(check your emails)`
    on click CancelButton
    begin
    	put empty into Result
    	clear SystemManager
    	exit
    end
    while true
    begin
    	wait 5
		rest get UserData from Server cat `/user/` cat Email cat `/` cat UserPassword cat `?v=` cat now
		or begin
       		print `Server not responding`
			exit
        end
    	put property `message` of UserData into UserData
        if UserData is `found`
        begin
        	clear SystemManager
            go to Continue
        end
    end

Continue:
    attach SystemManager to `dialog-panel`
    set style `width` of SystemManager to `80%`
    set style `left` of SystemManager to `10%`
   	rest get Webson from `/resources/webson/systemman.json?v=` cat now
    render Webson in SystemManager

    attach SystemVersion to `system-version`
    attach SystemSelect to `system-select`
    attach SystemNames to `system-names`
    attach LoginPanel to `login`
    attach OKButton to `ok-button`
    attach AddButton to `add-button`
    attach RemoveButton to `remove-button`
    attach HelpButton to `help-button`
    attach CancelButton to `cancel-button`
    attach OKPadding to `ok-padding`
    attach RemovePadding to `remove-padding`
    
    if Sensors is not empty
        if property `version` of Sensors is not empty
            set the content of SystemVersion to `System version ` cat property `version` of Sensors

	! Get the systems managed by this user
!    get Systems from storage as `Systems`
    rest get Systems from Server cat `/managed/` cat Email cat `/` cat UserPassword cat `?v=` cat now
    gosub to GetSystemNames
    print Systems
    if Systems is empty put `{}` into Systems
    if Map is empty put `New system` into SystemName
    else put property `name` of Map into SystemName
    gosub to CreateList
    if the json count of Keys is 0
    begin
    	set style `display` of SystemSelect to `none`
        gosub to SetupAdd
    end
    else set style `display` of LoginPanel to `none`

    on click OKButton
    begin
!    	put Systems into storage as `Systems`
        rest post Systems to Server cat `/managed/` cat Email cat `/` cat UserPassword
        put property SystemName of Systems into System
        put property `mac` of System into MAC
        put MAC into storage as `MAC`
        put property `password` of System into Password
        put Password into storage as `password`
        put `OK` into Result
    	clear SystemManager
        exit
	end

    on click AddButton gosub to SetupAdd

    on click RemoveButton
    begin
    	create DialogPanel in SystemManager
    	rest get Webson from `/resources/webson/dialog-confirm.json?v=` cat now
        render Webson in DialogPanel
        attach DialogTitle to `dialog-title`
        attach DialogText to `dialog-text`
        attach DialogButton1 to `dialog-button1`
        attach DialogButton2 to `dialog-button2`
        set the content of DialogTitle to `Remove '` cat element SelectedSystem of Keys cat `'`
        set the content of DialogText to `Are you sure you want to remove this system?`
        set the content of DialogButton1 to `Yes`
        set the content of DialogButton2 to `No`
        on click DialogButton1
        begin
        	json delete property SystemName of Systems
            gosub to CreateList
        	remove element DialogPanel
        end
        on click DialogButton2
        begin
        	remove element DialogPanel
        end
    end

    on click HelpButton
    begin
    	put `Help` into Result
        clear SystemManager
    	exit
    end

    on click CancelButton
    begin
    	put empty into Result
    	clear SystemManager
    	exit
    end
	stop

!	Update the names of the systems
GetSystemNames:
	put the json keys of Systems into Keys
    put 0 into K
    while K is less than the json count of Keys
    begin
    	put element K of Keys into SystemName
        put property SystemName of Systems into System
        put property `mac` of System into MAC2
        json delete property SystemName of Systems
        rest get Map2 from Server cat `/map/` cat MAC2 cat `?v=` cat now
        if Map is empty
        begin
        	alert `Unable to identify system: ` cat MAC2
        	return
        end
        put property `name` of Map2 into SystemName
        if SystemName is empty put `New` into SystemName
        set property SystemName of Systems to System
    	add 1 to K
    end
	return

!	Create the list of systems
CreateList:
    put the json keys of Systems into Keys
    set the elements of SystemNameButton to the json count of Keys
    clear SystemNames
    put 0 into K
    while K is less than the json count of Keys
    begin
    	index SystemNameButton to K
    	create SystemNameButton in SystemNames
        set style `width` of SystemNameButton to `100%`
        set style `font-size` of SystemNameButton to `1.2em`
        set style `margin-bottom` of SystemNameButton to `0.25em`
        set style `cursor` of SystemNameButton to `pointer`
        put element K of Keys into Text
        set the content of SystemNameButton to Text
        if Text is SystemName
        begin
        	put K into SelectedSystem
        	set style `font-weight` of SystemNameButton to `bold`
        end
    	add 1 to K
    end

    on click SystemNameButton
    begin
    	put the index of SystemNameButton into SelectedSystem
        put element SelectedSystem of Keys into SystemName
    	put 0 into N
        while N is less than the json count of Keys
        begin
        	index SystemNameButton to N
        	set style `font-weight` of SystemNameButton to `normal`
        	add 1 to N
        end
        index SystemNameButton to SelectedSystem
        set style `font-weight` of SystemNameButton to `bold`
        set style `display` of OKButton to `block`
        set style `display` of OKPadding to `block`
        set style `display` of RemoveButton to `block`
        set style `display` of RemovePadding to `block`
    end
	return

SetupAdd:
   	set style `display` of LoginPanel to `block`
    attach MACInput to `getmac-input`
    attach PWDInput to `getpassword-input`
    attach AddThisButton to `addthis-button`
    on click AddThisButton
    begin
        put the content of MACInput into MAC
        put the content of PWDInput into Password
        if MAC is empty go to MissingInput
        if Password is empty
            if MAC is not `DEMO` go to MissingInput
        if MAC is not `DEMO`
        begin
        	rest get Map from Server cat `/map/` cat MAC cat `?v=` cat now
            if Map is empty
            begin
            	alert `Unable to identify this system`
                return
            end
            put property `name` of Map into SystemName
            if SystemName is empty put `New` into SystemName
        end
        put `{}` into System
        set property `mac` of System to MAC
        set property `password` of System to Password
        set property SystemName of Systems to System
        set style `display` of SystemSelect to `block`
        gosub to CreateList
        set style `display` of OKButton to `block`
        set style `display` of OKPadding to `block`
 		set style `display` of LoginPanel to `none`
    end
    return

MissingInput:
	alert `The MAC address and password are required.`
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!	Get the user's email adress
GetEmail:
    attach DialogPanel to `dialog-panel`
    rest get Webson from `/resources/webson/dialog-input.json?v=` cat now
    render Webson in DialogPanel
    attach DialogTitle to `dialog-title`
    attach DialogText to `dialog-text`
    attach DialogButton1 to `dialog-button1`
    attach DialogButton2 to `dialog-button2`
    attach DialogInput to `dialog-input`
    set the content of DialogTitle to `Email`
    set the content of DialogText to `Type your email address`
    set the content of DialogButton1 to `OK`
    set the content of DialogButton2 to `Cancel`
    
    on click DialogButton1
    begin
    	put the content of DialogInput into Email
        if Email is empty stop
        clear DialogPanel
        go to ResumeAfterEmail
    end
    
    on click DialogButton2
    begin
        clear DialogPanel
        exit
    end
	stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!	Get the user's password
GetPassword:
    attach DialogPanel to `dialog-panel`
    rest get Webson from `/resources/webson/dialog-input.json?v=` cat now
    render Webson in DialogPanel
    attach DialogTitle to `dialog-title`
    attach DialogText to `dialog-text`
    attach DialogButton1 to `dialog-button1`
    attach DialogButton2 to `dialog-button2`
    attach DialogInput to `dialog-input`
    set the content of DialogTitle to `User Password`
    set the content of DialogText to `Type your password, or leave blank if you are a new user`
    set the content of DialogButton1 to `OK`
    set the content of DialogButton2 to `Cancel`
    
    on click DialogButton1
    begin
    	put the content of DialogInput into UserPassword
        clear DialogPanel
        go to ResumeAfterPassword
    end
    
    on click DialogButton2
    begin
        clear DialogPanel
        exit
    end
	stop