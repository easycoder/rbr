!	Configurator

	script Configurator

    div Body
    div OuterPanel
    div Logo
    div Hamburger
    div More
    div PreviousButton
    div NextButton
    div PanelA
    div PanelB
    variable Mobile
    variable MainScreenWebson
    variable Result
    variable Map
    variable CurrentSlide
    variable History
    variable SlideScript
    variable SlideWebson
    variable H
    variable L
    variable N

!    debug step

    clear Mobile
    if mobile
    if portrait set Mobile

	create Body
	if Mobile
    begin
    	set style `width` of Body to `100%`
    end
	else
	begin
        put the height of the window into N
        multiply N by 9
        divide N by 16
        set style `width` of Body to N cat `px`
        set style `margin` of Body to `0 auto`
        set style `border` of Body to `1px solid lightgray`
    end
    set style `height` of Body to `100vh`

!	Render the main screen layout
Start:
    gosub to RenderBody
    attach OuterPanel to `outer-panel`
    put the height of OuterPanel into H
    if Mobile divide H by 60
    else divide H by 52
    set style `font-size` of Body to H
    
    attach PanelA to `panel-a`
    attach PanelB to `panel-b`
    put the width of OuterPanel into L
    set style `left` of PanelA to L cat `px`
    set style `left` of PanelB to L cat `px`
    set style `display` of PanelA to `block`
    set style `display` of PanelB to `block`
    attach Logo to `cf-logo-icon`
    attach Hamburger to `cf-hamburger-icon`
    attach More to `top-level-more`
    attach PreviousButton to `left-button`
    attach NextButton to `right-button`

    on click Logo
    begin
    	clear Body
        go to Start
    end
    on click Hamburger
    begin
    	clear Body
        go to Start
    end
    on click More
    begin
!    	set style `display` of NextButton to `block`
        put `rooms` into CurrentSlide
    	go to OnNextButton
    end

    index History to 0
    set the elements of History to 1
    put `config` into History

    get Map from storage as `map`
    if Map is empty put `{}` into Map

    stop

RenderBody:
    rest get MainScreenWebson from `/webson/config.json?v=` cat now
    	or go to AbandonShip
    clear Body
	render MainScreenWebson in Body
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 	Bring in a slide from the right

OnNextButton:
    ! Create a new History element
    add 1 to the elements of History giving N
    set the elements of History to N
    take 1 from N
    index History to N
    put CurrentSlide into History
    ! Render PanelB and bring it in from the right
    rest get SlideWebson from `/webson/` cat CurrentSlide cat `.json?v=` cat now
    clear PanelB
    render SlideWebson in PanelB
    put the width of OuterPanel into L
    while L is greater than 0
    begin
    	set style `left` of PanelB to L cat `px`
    	wait 1 tick
    	take 20 from L
    end
    set style `left` of PanelB to 0
    ! Render PanelA with the same slide
    clear PanelA
    render SlideWebson in PanelA
    set style `left` of PanelA to 0
    ! Move PanelB out of view
    set style `left` of PanelB to the width of OuterPanel
    ! Run the new current script
    rest get SlideScript from `/ecs/` cat CurrentSlide cat `.ecs?v=` cat now
    go to NextStep

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 	Banish the current slide to the right
    
OnPreviousButton:
    ! Render the current slide in PanelB (the moving panel)
    set style `left` of PanelB to the width of OuterPanel cat `px`
    clear PanelB
    rest get SlideWebson from `/webson/` cat CurrentSlide cat `.json?v=` cat now
    render SlideWebson in PanelB
    set style `left` of PanelB to 0
    put the elements of History into N
    if N is 2
    begin
        set style `left` of PanelA to the width of OuterPanel cat `px`
        set style `display` of PreviousButton to `none`
        set style `display` of NextButton to `none`
    end
    else
    begin
        ! Get the previous slide from History and render it in PanelA
        take 1 from N
        set the elements of History to N
        take 1 from N
        index History to N
        put History into CurrentSlide
        rest get SlideWebson from `/webson/` cat CurrentSlide cat `.json?v=` cat now
        render SlideWebson in PanelA
        set style `left` of PanelA to 0
    end
    ! Slide PanelB to the right to reveal slide A
    put 0 into L
    while L is less than the width of OuterPanel
    begin
        wait 1 tick
        add 20 to L
        set style `left` of PanelB to L cat `px`
    end
    if N is 2 go to Start
    rest get SlideScript from `/ecs/` cat CurrentSlide cat `.ecs?v=` cat now
    go to NextStep

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 	Run the next step
NextStep:
    put Map into storage as `map`
    run SlideScript with Result
    if Result is `back`
    begin
        print `Go back`
        go to OnPreviousButton
    end
    else if Result is `end` stop
    else
    begin
        put Result into CurrentSlide
!        print `Go to ` cat CurrentSlide
        put Result into CurrentSlide
        go to OnNextButton
    end
	stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 	Warn the user and abandon this run
AbandonShip:
	alert `An error has occurred while communicating with the web server.`
    	cat newline cat `Please refresh this browser page to restart.`
    exit
