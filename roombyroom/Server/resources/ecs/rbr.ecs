!	Room By Room

	script RoomByRoom

    div Body
    div MainPanel
    div SystemNamePanel
    div OuterPanel
    div HelpPanel
    div RoomNamePanel
    div RoomTempPanel
    div RoomToolsButton
    div TimedInfo
    div ModePanel
    div ModeHolder
    div TargetTemp
    div DialogPanel
    div DialogTitle
    div DialogText
    div Alive
    input Input
    img Hamburger
    img ModeIcon
    a Welcome
    button AddRoomButton
    button GetMACButton
    button GetPasswordButton
    button GetNameButton
    button OKButton
    button CancelButton
    button BackupButton
    button RestoreButton
    button EvaluateButton
    button HelpButton
    button DialogButton1
    button DialogButton2
    module Storyteller
    module Editor
    module DemoModule
    variable Mobile
    variable Server
    variable Revisit
    variable Demo
    variable Webson
    variable HelpScript
    variable DemoScript
    variable ModeScript
    variable Script
    variable MAC
    variable Password
    variable SystemName
    variable Map
    variable Map2
    variable Rooms
    variable RoomSpec
    variable RoomCount
    variable RoomIndex
    variable ClickIndex
    variable Redraw
    variable Refresh
    variable Sensors
    variable SensorIP
    variable SensorSpec
    variable DemoSensors
    variable RelayState
    variable Temperature
    variable Args
    variable Events
    variable Event
    variable Blocked
    variable Mode
    variable Flag
    variable Error
    variable SID
    variable TID
    variable Result
    variable Finish
    variable ErrorCount
    variable FH
    variable FM
    variable E
    variable H
    variable M
    variable N
    variable R

    ! Webson specs
    variable MainScreenWebson
    variable MainMenuWebson
    variable GetMacWebson
    variable GetPasswordWebson
    variable GetNameWebson
    variable RoomWebson
    variable RoomEditMenuWebson
    variable RoomToolsMenuWebson
    variable TimedWebson
    variable OnWebson
    variable OffWebson
    variable DialogWebson

!    debug step

	fork to Main
    wait 5 seconds
    every 5 seconds
    begin
    	fork to ShowAlive
    	if not Blocked go to Start
    	wait 1
    	if not Blocked go to Start
    	wait 1
    	if not Blocked go to Start
    	wait 1
    	if not Blocked go to Start
    	wait 1
    	if not Blocked go to Start
    end
    
    stop

ShowAlive:
    set style `visibility` of Alive to `visible`
    wait 100 ticks
    set style `visibility` of Alive to `hidden`
	stop

Main:
    put 0 into ErrorCount
	clear Blocked
    set Redraw
    put empty into ModeScript

    set the title to `RBR`

    clear Mobile
    if mobile
        if portrait set Mobile

    ! Get the URL of the REST server
  	json parse url the location as Args
    put property `url` of Args into Server
    put Server cat `rest.php` into Server
    put Server into storage as `server`

	create Body
    if Mobile
    begin
    	set style `width` of Body to `100%`
        set style `font-size` of Body to `16px`
    end
    else
    begin
        put the height of the window into N
        multiply N by 9
        divide N by 16
    	set style `width` of Body to N
        set style `margin` of Body to `0 auto`
        set style `font-size` of Body to `1.5em`
        set style `border` of Body to `1px solid lightgray`
        set style `font-size` of Body to `20px`
    end
!    put empty into storage as `MAC`

!	First get EasyCoder scripts and the various layout scripts
    rest get HelpScript from `/resources/ecs/storyteller.ecs?v=` cat now

    put empty into MainMenuWebson
	put empty into GetMacWebson
	put empty into GetPasswordWebson
	put empty into GetNameWebson
    put empty into RoomWebson
    put empty into RoomEditMenuWebson
    put empty into RoomToolsMenuWebson
    put empty into TimedWebson
    put empty into OnWebson
    put empty into OffWebson
    put empty into DialogWebson

!	Render the main screen layout
    rest get MainScreenWebson from `/resources/webson/rbr.json?v=` cat now
	render MainScreenWebson in Body
    attach MainPanel to `mainpanel`
    attach OuterPanel to `outerpanel`
    attach HelpPanel to `helppanel`
    attach Alive to `alive`
    attach ModePanel to `mode-panel`

    put empty into Map2

!	Set up the hamburger menu
    attach Hamburger to `hamburger`
    on click Hamburger
    begin
    	if Storyteller is running
        begin
        	close Storyteller
            set style `display` of OuterPanel to `block`
            set style `display` of HelpPanel to `none`
            clear MainPanel
            clear Blocked
            set Redraw
            stop
        end
        else if not Blocked go to ShowMenu
    end

    get Revisit from storage as `revisit`
    if Revisit is empty
    begin
    	put `yes` into storage as `revisit`
        put `home` into SID
        put `Welcome` into TID
      	go to RunHelp
    end

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!	Main start point
Start:

!	Make sure we have a MAC address; if not, go ask for one
    clear Flag
    get MAC from storage as `MAC`
    if MAC is empty go to GetMAC
    if MAC is `DEMO`
    begin
    	set Demo
        if DemoModule is not running
        begin
	    	rest get DemoScript from `/resources/ecs/demo.ecs?v=` cat now
            get Map from storage as `map`
            put empty into DemoSensors
            print `Run the Demo module`
        	run DemoScript with Map and DemoSensors and Demo as DemoModule
            send `run` to DemoModule
        end
    end
    else clear Demo

!	Make sure we have the password; if not, ask for it
    get Password from storage as `password`
    if Password is empty go to GetPassword

	if not Redraw go to GetMap
    clear MainPanel
    put 0 into RoomCount
    clear Error

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!	Get the map
GetMap:
!	set Blocked
    if Demo get Map from storage as `map`
    else
    begin
    	rest get Map from Server cat `/map/` cat MAC cat `?v=` cat now
          or put empty into Map
    end
    if Map is empty put `{"rooms":[]}` into Map
    put property `rooms` of Map into Rooms
    if the json count of Rooms is 0
    begin
        rest get RoomSpec from `/resources/json/newroomspec.json?v=` cat now
        if MAC is `DEMO` set property `sensor` of RoomSpec to `0`
        append RoomSpec to Rooms
        set property `rooms` of Map to Rooms
    end
    if Map is not Map2 set Redraw
    put Map into Map2

    put property `name` of Map into SystemName
    if SystemName is empty
    begin
        get SystemName from storage as `SystemName`
        if SystemName is empty go to GetSystemName
        else
        begin
            set property `name` of Map to SystemName
            fork to PostMap
            set Redraw
        end
    end

    if Demo put Map into storage as `map`

	! Show the system
    attach SystemNamePanel to `system-name`
    set the content of SystemNamePanel to SystemName

	! Get the current sensor values
	if Demo put DemoSensors into Sensors
    else rest get Sensors from Server cat `/sensors/` cat MAC cat `?v=` cat now

	put property `rooms` of Map into Rooms
    put the json count of Rooms into R
    if R is RoomCount clear Redraw
    else
    begin
    	put R into RoomCount
        set Redraw
    end
    if Redraw
    begin
    	clear MainPanel
    	set Refresh
    end

    set the elements of Mode to RoomCount
    set the elements of ModeHolder to RoomCount
    set the elements of ModeIcon to RoomCount
    set the elements of RoomSpec to RoomCount
    set the elements of RoomNamePanel to RoomCount
    set the elements of RoomTempPanel to RoomCount
    set the elements of RoomToolsButton to RoomCount
    set the elements of SensorSpec to RoomCount
    set the elements of RelayState to RoomCount
    set the elements of ModeHolder to RoomCount
    set the elements of ModeIcon to RoomCount

    put 0 into RoomIndex
    while RoomIndex is less than RoomCount
    begin
        index Mode to RoomIndex
        index ModeHolder to RoomIndex
        index ModeIcon to RoomIndex
        index RoomSpec to RoomIndex
        index RelayState to RoomIndex
        index SensorSpec to RoomIndex
        index RoomNamePanel to RoomIndex
        index RoomTempPanel to RoomIndex
        index RoomToolsButton to RoomIndex

        if Redraw
        begin
            ! Render the Webson spec for a room
            if RoomWebson is empty
    			rest get RoomWebson from `/resources/webson/room.json?v=` cat now
        	put RoomWebson into Webson
        	replace `/ROOM/` with RoomIndex in Webson
        	render Webson in MainPanel
            attach ModeHolder to `room-` cat RoomIndex cat `-mode-holder`
        end

		! Attach to various elements of the display
        attach RoomNamePanel to `room-name-` cat RoomIndex or
        begin
        	print `Can't find room-name-` cat RoomIndex
        	stop
        end
		attach RoomTempPanel to `room-temp-` cat RoomIndex or
        begin
        	print `Can't find room-temp-` cat RoomIndex
        	stop
        end
        attach RoomToolsButton to `room-tools-` cat RoomIndex or
        begin
        	print `Can't find room-tools-` cat RoomIndex
        	stop
        end

		! Set the room name
		put element RoomIndex of Rooms into RoomSpec
        set the content of RoomNamePanel to property `name` of RoomSpec

        ! Show the current temperature and relay state
        put `` cat property `sensor` of RoomSpec into SensorIP
        if SensorIP is not empty
        begin
            put property SensorIP of Sensors into SensorSpec
            put property `temperature` of SensorSpec into Temperature
            set the content of RoomTempPanel to Temperature cat `&deg;C`
            put property `relay` of SensorSpec into RelayState
            if RelayState is `on` set style `background` of RoomTempPanel to `red`
            else set style `background` of RoomTempPanel to `blue`
        end

        ! Get the mode
        put property `mode` of RoomSpec into Mode

        ! Show the mode indicator
        if Mode is `timed`
            begin
            begin
                clear ModeHolder
    			if TimedWebson is empty
    				rest get TimedWebson from `/resources/webson/timed.json?v=` cat now
                put TimedWebson into Webson
                replace `/ROOM/` with RoomIndex in Webson
                render Webson in ModeHolder
            end
            attach TimedInfo to `room-` cat RoomIndex cat `-timed-info`
            put property `events` of RoomSpec into Events
            divide now by 60 giving N
            put N modulo 24*60 into N
            divide N by 60 giving H
            put N modulo 60 into M
            put 0 into E
            while E is less than the json count of Events
            begin
                put element E of Events into Event
                put property `until` of Event into Finish
                split Finish on `:` giving Finish
                index Finish to 0
                put the value of Finish into FH
                if FH is 0 put 24 into FH
                if H is less than FH
                begin
                    set the content of TimedInfo to property `temp` of Event
                        cat `&deg;C->` cat property `until` of Event
                    go to HandleClicks
                end
                else if H is FH
                begin
                    index Finish to 1
                    put the value of Finish into FM
                    if M is less than FM
                    begin
                        set the content of TimedInfo to property `temp` of Event
                            cat `&deg;C->` cat property `until` of Event
                        go to HandleClicks
                    end
                end
                add 1 to E
            end
            put element 0 of Events into Event
            put property `until` of Event into Finish
            put property `temp` of Event into Temperature
            set the content of TimedInfo to Temperature cat `&deg;C->` cat Finish
        end
        else if Mode is `on`
        begin
            begin
                clear ModeHolder
                if OnWebson is empty
                    rest get OnWebson from `/resources/webson/on.json?v=` cat now
                put OnWebson into Webson
                replace `/ROOM/` with RoomIndex in Webson
                render Webson in ModeHolder
            end
            attach TargetTemp to `room-` cat RoomIndex cat `-target`
            set the content of TargetTemp to property `target` of RoomSpec cat `&deg;C`
        end
        else if Mode is `off`
        begin
            begin
                clear ModeHolder
                if OffWebson is empty
                    rest get OffWebson from `/resources/webson/off.json?v=` cat now
                put OffWebson into Webson
                replace `/ROOM/` with RoomIndex in Webson
                render Webson in ModeHolder
            end
        end

	HandleClicks:
		! Handle a click on the row hamburger
        on click RoomToolsButton
        begin
        	if Blocked stop
        	put the index of RoomToolsButton into ClickIndex
            go to RoomTools
        end

	    ! Handle a tap on a mode button
        attach ModeIcon to `room-` cat RoomIndex cat `-mode-icon`
	    on click ModeIcon
	    begin
        	if Blocked stop
    		set Blocked
            put the index of ModeIcon into ClickIndex
            if ModeScript is empty
            	rest get ModeScript from `/resources/ecs/mode.ecs?v=` cat now
            run ModeScript with MainPanel
            	and ModePanel
            	and ModeIcon
                and Mode
                and Map
                and ClickIndex
                and Demo
                and Result
            if left 4 of Result is `Help`
            begin
                split Result on ` ` giving Result
                index Result to 1
                put Result into SID
                index Result to 2
                put Result into TID
                go to RunHelp
            end
            else if Result is `Changed`
            begin
    			set element ClickIndex of Rooms to RoomSpec
                set property `rooms` of Map to Rooms
                fork to PostMap
                set Redraw
            end
            else if Result is `Redraw` set Redraw
            else if Result is `Refresh` set Refresh
            clear Blocked
            stop
		end
        add 1 to RoomIndex
    end

    clear Refresh
    clear Redraw
	stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!	Show a help page
RunHelp:
	set Blocked
    set style `display` of OuterPanel to `none`
    set style `display` of HelpPanel to `block`
    run HelpScript with HelpPanel and SID and TID as Storyteller
	stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!	Reset the MAC address and password
Reset:
	put empty into storage as `MAC`
    put empty into storage as `password`
    clear Blocked
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!	Ask the user for the MAC address
GetMAC:
	set Blocked
    clear MainPanel
    if GetMacWebson is empty
        rest get GetMacWebson from `/resources/webson/getmac.json?v=` cat now
    render GetMacWebson in MainPanel
    attach Input to `getmac-input`
    attach OKButton to `getmac-ok`
    attach CancelButton to `getmac-cancel`
    attach HelpButton to `getmac-help`
    attach Welcome to `getmac-welcome`
    if not Flag set style `display` of CancelButton to `none`
    on click OKButton
    begin
    	put the content of Input into MAC
        clear Input
        print `MAC = ` cat MAC
        if MAC is not empty
        begin
        	put MAC into storage as `MAC`
            if MAC is `DEMO` set Demo else clear Demo
            if Demo
            begin
            	put `password` into Password
                put Password into storage as `password`
            	put empty into SystemName
               	put empty into storage as `SystemName`
            end
            clear MainPanel
            clear Blocked
            stop
        end
    end
    on click CancelButton
    begin
    	clear MainPanel
        clear Blocked
    end
    on click HelpButton
    begin
    	clear MainPanel
    	set style `display` of OuterPanel to `none`
      	set style `display` of HelpPanel to `block`
    	put `home` into SID
        put `MAC` into TID
        go to RunHelp
    end
   	on click Welcome
    begin
    	clear MainPanel
    	put `home` into SID
        put `Welcome` into TID
        go to RunHelp
    end
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 	Ask the user for the password
GetPassword:
	set Blocked
    clear MainPanel
    if GetPasswordWebson is empty
        rest get GetPasswordWebson from `/resources/webson/getpassword.json?v=` cat now
    render GetPasswordWebson in MainPanel
    attach Input to `getpassword-input`
    attach OKButton to `getpassword-ok`
    attach CancelButton to `getpassword-cancel`
    attach HelpButton to `getpassword-help`
    on click OKButton
    begin
    	put the content of Input into Password
        if Password is not empty
        begin
        	put Password into storage as `password`
            clear MainPanel
            clear Blocked
            stop
        end
    end
    on click CancelButton
    begin
    	put empty into storage as `MAC`
    	clear MainPanel
        clear Blocked
        stop
    end
    on click HelpButton
    begin
        clear MainPanel
    	set style `display` of OuterPanel to `none`
      	set style `display` of HelpPanel to `block`
    	put `home` into SID
        put `Password` into TID
        go to RunHelp
    end
	stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 	Ask the user for the system name
GetSystemName:
	set Blocked
    clear MainPanel
    if GetNameWebson is empty
        rest get GetNameWebson from `/resources/webson/getname.json?v=` cat now
    render GetNameWebson in MainPanel
    attach Input to `getname-input`
    attach OKButton to `getname-ok`
    attach CancelButton to `getname-cancel`
    attach HelpButton to `getname-help`
    if Flag set the content of Input to SystemName
    else set style `display` of CancelButton to `none`
    on click OKButton
    begin
    	put the content of Input into SystemName
        if SystemName is not empty
        begin
        	put SystemName into storage as `SystemName`
            clear MainPanel
            set Redraw
            clear Blocked
            set property `name` of Map to SystemName
            go to PostMap
        end
    end
    on click CancelButton
    begin
    	clear MainPanel
        clear Blocked
        stop
    end
    on click HelpButton
    begin
        clear MainPanel
    	set style `display` of OuterPanel to `none`
      	set style `display` of HelpPanel to `block`
    	put `home` into SID
        put `Name` into TID
        go to RunHelp
    end
	stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!	Deal with the main hamburger menu
ShowMenu:
	set Blocked
    wait 20 ticks
	clear MainPanel
    if MainMenuWebson is empty
    	rest get MainMenuWebson from `/resources/webson/mainmenu.json?v=` cat now
    render MainMenuWebson in MainPanel
    attach AddRoomButton to `button-add`
    attach GetMACButton to `button-getmac`
    attach GetPasswordButton to `button-getpassword`
    attach GetNameButton to `button-getname`
    attach BackupButton to `button-backup`
    attach RestoreButton to `button-restore`
    attach EvaluateButton to `button-evaluate`
    attach HelpButton to `button-help`
    attach CancelButton to `button-cancel`

    on click AddRoomButton
    begin
        rest get RoomSpec from `/resources/json/newroomspec.json?v=` cat now
        if MAC is `DEMO` set property `sensor` of RoomSpec to the json count of Rooms
        append RoomSpec to Rooms
        set property `rooms` of Map to Rooms
        fork to PostMap
    	clear MainPanel
        clear Blocked
        set Redraw
    	stop
    end

    on click GetMACButton
    begin
    	set Flag
        go to GetMAC
    end

    on click GetPasswordButton
    begin
    	set Flag
        go to GetPassword
    end

    on click GetNameButton
    begin
    	set Flag
        go to GetSystemName
    end

    on click BackupButton go to Backup

    on click RestoreButton go to Restore

    on click EvaluateButton
    begin
        put `home` into SID
        put `Evaluate` into TID
      	go to RunHelp
    end

    on click HelpButton
    begin
        put `home` into SID
        put `content` into TID
      	go to RunHelp
    end

    on click CancelButton
    begin
    	clear MainPanel
        clear Blocked
        set Redraw
        stop
    end

	stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 	The room tools
RoomTools:
	set Blocked
    wait 20 ticks ! to allow things to complete before running the editor!
	clear MainPanel
    if RoomToolsMenuWebson is empty
    	rest get RoomToolsMenuWebson from `/resources/webson/roomtoolsmenu.json?v=` cat now
    render RoomToolsMenuWebson in MainPanel
    put property `rooms` of Map into Rooms
    put empty into Result
    rest get Script from `/resources/ecs/roomtools.ecs?v=` cat now
    run Script with MainPanel and Rooms and ClickIndex and Result as Editor

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 	The room editor
RoomEditor:
	set Blocked
    wait 20 ticks ! to allow things to complete before continuing
	clear MainPanel
    if RoomEditMenuWebson is empty
    	rest get RoomEditMenuWebson from `/resources/webson/roomeditmenu.json?v=` cat now
    render RoomEditMenuWebson in MainPanel
    put property `rooms` of Map into Rooms
    index RoomSpec to ClickIndex
    put element ClickIndex of Rooms into RoomSpec
    put empty into Result
    
    rest get Script from `/resources/ecs/roomedit.ecs?v=` cat now
    run Script with MainPanel and Rooms and ClickIndex and Result
    if Result is `OK`
    begin
        set element ClickIndex of Rooms to RoomSpec
        set property `rooms` of Map to Rooms
    	fork to PostMap
    end
    clear MainPanel
    clear Blocked
    set Redraw
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 	Backup the system
Backup:
	set Blocked
    attach DialogPanel to `dialog-panel`
    if DialogWebson is empty
    	rest get DialogWebson from `/resources/webson/dialog-confirm.json?v=` cat now
    render DialogWebson in DialogPanel
    attach DialogTitle to `dialog-title`
    attach DialogText to `dialog-text`
    attach DialogButton1 to `dialog-button1`
    attach DialogButton2 to `dialog-button2`
    set the content of DialogTitle to `System Backup`
    set the content of DialogText to `Tap "Save" to save your current `
    	cat `system configuration. Any previous backup will be over-written.`
    set the content of DialogButton1 to `Save`
    set the content of DialogButton2 to `Cancel`
    on click DialogButton1
    begin
    	clear DialogPanel
    	if not Demo
        begin
        	rest post Map to Server cat `/backup/` cat MAC cat `/` cat Password
        	or continue
        end
        set Redraw
        clear Blocked
    end
    on click DialogButton2
    begin
    	clear DialogPanel
        set Redraw
        clear Blocked
    end
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 	Restore from backup
Restore:
	set Blocked
    attach DialogPanel to `dialog-panel`
    if DialogWebson is empty
    	rest get DialogWebson from `/resources/webson/dialog-confirm.json?v=` cat now
    render DialogWebson in DialogPanel
    attach DialogTitle to `dialog-title`
    attach DialogText to `dialog-text`
    attach DialogButton1 to `dialog-button1`
    attach DialogButton2 to `dialog-button2`
    set the content of DialogTitle to `System Restore`
    set the content of DialogText to `Tap "Restore" to restore your system configuration `
    	cat `from the saved backup (if any).`
    set the content of DialogButton1 to `Restore`
    set the content of DialogButton2 to `Cancel`
    on click DialogButton1
    begin
    	clear DialogPanel
        if not Demo
        begin
        	rest post to Server cat `/restore/` cat MAC cat `/` cat Password
        	or continue
        end
        set Redraw
        clear Blocked
    end
    on click DialogButton2
    begin
    	clear DialogPanel
        set Redraw
        clear Blocked
    end
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 	Post the map to the server
PostMap:
	if Demo put Map into storage as `map`
    else
	begin
    	set property `message` of Map to `confirm`
   		rest post Map to Server cat `/map/` cat MAC cat `/` cat Password
   		or begin
            add 1 to ErrorCount
            if ErrorCount is greater than 9 alert `A series of errors have occurred`
            continue
        end
   		put 0 into ErrorCount
	end
	stop