## The System Controller

This can be any computer able to run Python. In practice, the demands made upon it are not great so there are some very low-cost options, the most well-known of which is the Raspberry Pi. This has been in production for several years and the latest models are quite powerful, but the controller software will run on even the earliest models. For example a Model 1B can be bought from RS Components for around £20, with a case costing another £5 or so. Add to this a low-cost USB power supply and a cable.

The cheapest Pi machines do not have WiFi but the best place to locate the device is next to your internet router, so an Ethernet cable connection is more practical.

To set up the controller, download the [Raspbian headless distribution](https://www.raspberrypi.org/downloads/raspbian/) to your computer and install it on a suitable SD card (8GB or more). For this you will need software such as Etcher to write the downloaded file to the card. Having done this, remove then reinsert the card in your computer and you should see 2 partitions on the card, called `boot` and `rootfs`. The first of these is a small boot partition. Add an empty file called `ssh` (with no extension) at the top level.

The second, much larger, partition, called `rootfs`, is where all your files will be. Copy the distribution files - the contents of the `roombyroom/Controller` folder in the [repository](https://github.com/easycoder/rbr) - into the `home/pi` folder on the card. Now eject the card, put it into the Pi and boot up.

With the Pi running you need to find it on your local network. To do this, point your browser to the admin panel for your router. This is frequently located at `http://192.168.1.1` but yours may be different. Log in, look for the name `raspberrypi` and note the IP address that's been assigned to it. You'll probably want to assign a fixed IP address to the Pi but the procedure varies from one router to another so you'll have to consult the relevant manual.

Now go to the command line on your computer (Windows users can run PuTTY to do this) and login in:

```
ssh pi@192.168.x.y
```

where `192.168.x.y` is the IP address you found in the router admin screen. You'll be prompted for a password; the default is `raspberry`. After a few seconds you'll see the standard greeting, plus a request to set yourself a new password.

Once all this is done, type `ls`. You should see all the distribution files you copied earlier.

To ensure the system is fully up to date, run the following commands. On the earlier Pi models the second of these will take a long time to run:

```
sudo apt update
sudo apt full-upgrade
```

In some cases the second of these commands may fail because a partition needs to be expanded. If this happens, give this command:

```
sudo raspi-config --expand-rootfs
```

then repeat the full-upgrade above. In some cases, raspi-config may not be intalled; if so, get it from

```
sudo apt install raspi-config
```

then expand the root filesystem and do the full upgrade.

Next we need to get an extra for Python; the `Bottle` webserver. First we get the Python package installer:

```
sudo apt install pip
```

Then give this command:

```
pip install bottle requests
```

The final step is to set up a 'cron' job that will run every 10 seconds. Type this command:

```
crontab -e
```

Select the Nano editor from the list given (this happens only the first time of use), and use it to add the following lines to the bottom of the `cron` file:

```
* * * * * /home/pi/run
@reboot sleep 10 && /home/pi/init
```

For explanation, there's a task that runs every minute and calls `run`, plus a second task that only runs on system boot and calls `init`. Both of these are shell scripts provided in the distribution package.

_**This page is not yet complete**_

~sid:home:Go to the Help home page~
