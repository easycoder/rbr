!    RBR Controller script for Python/EasyCoder

!   This script manages the local hardware - sensors and relays - to act
!   in accordance with the rules in the system map.

    script RBR

    use plugin P100 from plugins/ec_p100.py

    file Logger
    variable RamDisk
    variable RBRServer
    variable RegData
    variable Version
    variable Config
    variable RepeatCount
    variable CurrentProfile
    variable Profiles
    variable Profile
    variable ProfileName
    variable SystemName
    variable Map
    variable MapObject
    variable Rooms
    variable RoomSpec
    variable RoomNumber
    variable RoomName
    variable RoomCount
    variable RoomNames
    variable RoomSSIDs
    variable FileName
    variable Mode
    variable MasterDevice
    variable Device
    variable Devices
    variable IPAddr
    variable MasterIPAddr
    variable MasterMAC
    variable DeviceMAC
    variable URL
    variable Path
    variable Sensor
    variable Relays
    variable Relay
    variable RelayType
    variable Locked
    variable BadResponses
    variable Responses
    variable Response
    variable Timestamp
    variable Temperature
    variable Battery
    variable SystemData
    variable NPeriods
    variable Events
    variable Event
    variable Until
    variable Target
    variable SensorValues
    variable SensorRSS
    variable LastReported
    variable Now
    variable Boundary
    variable OnOff
    variable MAC
    variable Password
    variable AdvanceData
    variable Advance
    variable Boost
    variable NetworkErrors
    variable Request
    variable RequestCount
    variable SSID
    variable Status
    variable RoomStatus
    variable TargetTemp
    variable Mijia
    variable Action
    variable Items
    variable Item
    variable Key
    variable Keys
    variable Value
    variable Values
    variable Changed
    variable Confirm
    variable Logs
    variable LogData
    variable LogText
    variable Calendar
    variable Day
    variable WarningMessages
    variable WarningMessage
    variable MailMessage
    variable Message
    variable Mail
    variable HaltRequested
    variable TPEmail
    variable TPPassword
    variable Name
    variable RA
    variable E
    variable EE
    variable N
    variable P
    variable R
    variable T
    variable W
    variable P1
    variable T1
    variable T2
    variable TS

!    debug step

    put `/mnt/data/` into RamDisk

    if file RamDisk cat `block` exists
    begin
        log `Blocked`
        exit
    end

    put system `hostname -I` into IPAddr
    put the position of ` ` in IPAddr into P
    if P is greater than 0  put left P of IPAddr into IPAddr
    log `My IP address is ` cat IPAddr

    load RBRServer from `server.txt`
    put trim RBRServer into RBRServer
    put RBRServer cat `/resources/php/rest.php` into RBRServer

    put the timestamp into Timestamp
    multiply Timestamp by 1000 giving T
    log datime T format `%b %d %H:%M:%S`

    if file RamDisk cat `network-errors` exists
    begin
        load NetworkErrors from RamDisk cat `network-errors`
        if NetworkErrors is empty put 0 into NetworkErrors
        put the value of NetworkErrors into NetworkErrors
        log NetworkErrors cat ` network errors`
    end
    else
    begin
        put -1 into NetworkErrors
        gosub to NetworkError
    end

    if file RamDisk cat `mijia.json` exists load Mijia from RamDisk cat `mijia.json`
    else
    begin
        put json `{}` into Mijia
        save Mijia to RamDisk cat `mijia.json`
    end

    if NetworkErrors is greater than 100
    begin
        log `Too many errors (` cat NetworkErrors cat `) - rebooting`
        put `The controller restarted (>100 errors)` into MailMessage
        gosub to SendMailMessage
        gosub to ClearNetworkErrors
!        system `touch ` cat RamDisk cat `reboot`
        stop
    end

    ! Get the system MAC address
    put system `ip -o link | awk '$2 != "lo:" {print $2, $(NF-2)}'` into Values
    split Values
    put the elements of Values into N
    while N is greater than 0
    begin
        decrement N
        index Values to N
        put Values into Value
        split Value on ` `
        if left 4 of Value is `wlan`
        begin
            index Value to 1
            put Value into MAC
            put 0 into N
        end
    end
    save MAC to `/mnt/data/mac`

    put 0 into RepeatCount

    clear Changed
    clear Confirm
    clear HaltRequested

    ! Ask the server for our password and other data
    put empty into RegData
    get RegData from url RBRServer cat `/register/` cat MAC cat `?v=` cat now
    or begin
        log `Server did not respond`
        gosub to NetworkError
        put empty into Password
        put 1 into Version
        go to SkipServerInteraction
    end
    gosub to ClearNetworkErrors
    log `Server ` cat RBRServer cat ` connected successfully`

    put json RegData into RegData
    put property `password` of RegData into Password
    log `Password: ` cat Password
!    if RegData has property `reboot` go to RestartSystemController

    ! The system config data is kept on the server and is managed by rbrconfig
    get Config from url RBRServer cat `/config/` cat MAC cat `/` cat Password
    put json Config into Config
!    load Config from `.config.json`
!    log `Config: ` cat prettify Config
    put empty into MasterDevice
    put empty into MasterIPAddr
    if Config has property `devices`
    begin
        put property `devices` of Config into Devices
        put the keys of Devices into Keys
        put 0 into N
        while N is less than the count of Keys
        begin
            put element N of Keys into Key
            put property Key of Devices into Device
            if property `master` of Device is true
            begin
                put Device into MasterDevice
                put property `ssid` of Device into SSID
                put from 8 of SSID into MasterMAC
            end
            increment N
        end
    end
    if MasterDevice is not empty
    begin
        put property `ipaddr` of MasterDevice into MasterIPAddr
        put MasterDevice into Device
        put `channel` into Message
        gosub to MessageESPDevice
        if Response is not empty
        begin
            if left 3 of Response is `OK `
            begin
                put from 3 of Response into Value
                log `Channel ` cat Value
            end
        end
    end
    else print `No master device`

!   See if we have the latest system software
    if file `version` exists
    begin
        load Version from `version`
        put trim Version into Version
    end
    else
    begin
        put `1` into Version
        save `` cat Version to `version`
    end
    if Version is empty put `0` into Version
    log `My version: ` cat Version
! log RegData
    put property `version` of RegData into Value
    log `Current version: ` cat Version
    if the value of Value is greater than the value of Version
    begin
        log `Install update from ` cat Version cat ` to ` cat Value
        save `` cat Value to RamDisk cat `version`
    end

!   Continue here if we are not connected to the RBR web server
SkipServerInteraction:
    save Password to RamDisk cat `password`

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Main start, where we load the map
Start:
    print empty
    add 9 to now giving Timestamp

    ! Try to get the map from the RBR server
    log `Get the map from the server`
    get Map from url RBRServer cat `/map/` cat MAC cat `?v=` cat now
    or begin
        gosub to NetworkError
        ! Try the local copy
        if file RamDisk cat `map` exists load Map from RamDisk cat `map`
        else put empty into Map
        go to S1
    end
    gosub to ClearNetworkErrors
    save Map to RamDisk cat `map`

S1:
    if Map is empty
    begin
        put `{"profiles":[{"name":"Unnamed","rooms":[{"name":"Unnamed","sensor":"","relays":[""],"mode":"off","target":"0.0","events":[]}]}],"profile":0,"name":"New system"}` into Map
        save Map to RamDisk cat `map`
    end
    put json Map into MapObject
    put property `profiles` of MapObject into Profiles
    put property `profile` of MapObject into CurrentProfile
    if `` cat CurrentProfile is empty put 0 into CurrentProfile

    put property `name` of MapObject into SystemName
    replace `%20` with ` ` in SystemName
    log `System Name: ` cat SystemName
    save SystemName to RamDisk cat `name`

    ! If the Calendar is on, find which profile is active
    if MapObject has property `calendar`
    begin
        if property `calendar` of MapObject is `on`
        begin
            put property `calendar-data` of MapObject into Calendar
            if Calendar is empty put property `profile` of MapObject into CurrentProfile
            else
            begin
                ! Examine the data for today
                put the weekday into W
                put element W of Calendar into Day
                if stringify Day is not `{}` put property `day` cat W cat `-profile` of Day into ProfileName
                put 0 into P
                while P is less than the count of Profiles
                begin
                    put element P of Profiles into Profile
                    if property `name` of Profile is ProfileName
                    begin
                        put P into CurrentProfile
                        go to S2
                    end
                    add 1 to P
                end
            end
        end
    end

S2:
    save `` cat CurrentProfile to RamDisk cat `profile`
    put element CurrentProfile of Profiles into Profile
    log `Profile: ` cat property `name` of Profile

    put property `rooms` of Profile into Rooms
    if Password is empty go to SkipRequests

    gosub to ProcessRequest

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Process the map
SkipRequests:

!   Process all the rooms
    put json `{}` into SystemData

    set property `actual` of SystemData to CurrentProfile
    put 0 into BadResponses
    put empty into WarningMessages
    put the count of Rooms into RoomCount
    if RoomCount is 0
    begin
        log `There are no rooms in this profile`
    end
    else
    begin
        ! Set up a map of relay counts against sensor IDs
        put 0 into N
        while N is less than RoomCount
        begin
            put element N of Rooms into RoomSpec
            put property `sensor` of RoomSpec into Sensor
            if RoomSpec has property `relayType`
            begin
                put property `relayType` of RoomSpec into RelayType
                if RelayType is `Manual`
                begin
                    put `Manual` into Sensor
                    set property `sensor` of RoomSpec to Sensor
                    set element N of Rooms to RoomSpec
                end
            end
            add 1 to N
        end

        ! Process all the rooms
        log RoomCount cat ` rooms`
        put 0 into RequestCount
        put 0 into RoomNumber
        while RoomNumber is less than RoomCount
        begin
            put element RoomNumber of Rooms into RoomSpec
            gosub to ProcessRoom
            set element RoomNumber of Rooms to RoomSpec
            set property RoomName of SystemData to RoomSpec
            add 1 to RoomNumber
        end
        log `-------------------- All rooms processed`

        ! Deal with the request relay
        if MapObject has property `request`
        begin
            put property `request` of MapObject into Name
            if Name is not empty
            begin
                if RequestCount is 0 put `off` into OnOff
                else put `on` into OnOff
                log RequestCount cat ` requests: Turn ` cat Name cat ` ` cat OnOff
                if Devices has property Name
                begin
                    put Name into RoomName
                    put property Name of Devices into Device
                    gosub to CheckLock
                    if not Locked
                    begin
                        put OnOff into Message
                        gosub to MessageESPDevice
                        if Response is empty log Name cat `: No response`
                        else gosub to RecordMijia
                    end
                end
                else log `No request relay called ` cat Name
            end
        end
    end

    set property `version` of SystemData to Version

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Repeat everything another 5 times
Repeat:
    if HaltRequested
    begin
        system `touch /mnt/data/halt`
        exit
    end

    log `Memory used: ` cat memory cat ` MB`

    gosub to PostToServer
    save Mijia to RamDisk cat `mijia.json`

    add 1 to RepeatCount
    log `Repeat ` cat RepeatCount cat ` done`
    if RepeatCount is less than 6
    begin
        while now is less than Timestamp wait 50 ticks
        go to Start
    end

    exit

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Process a single room
ProcessRoom:
    put property `name` of RoomSpec into RoomName
    log `-------------------- ` cat RoomName

    put property `sensor` of RoomSpec into Sensor
    put empty into RelayType
    if RoomSpec has property `relayType` put property `relayType` of RoomSpec into RelayType

    ! Get the room status
    put RamDisk cat `status.json` into FileName
    if file FileName exists load Status from FileName else put json `{}` into Status
    if Status has property RoomName put property RoomName of Status into RoomStatus
    else
    begin
        put json `{}` into RoomStatus
        set property `status` of RoomStatus to `good`
        set property `errors` of RoomStatus to 0
        set property RoomName of Status to RoomStatus
        save Status to FileName
    end
    set property `status` of RoomSpec to property `status` of RoomStatus
    set property `timestamp` of RoomSpec to the timestamp

    put empty into SensorRSS
    put json `{}` into Response
    if RelayType is not `Manual`
    begin
        if Sensor is empty return
        if left 2 of Sensor is `T-`
        begin
            if Devices does not have property Sensor
            begin
                print `Device '` cat Sensor cat `' is not in the map`
                return
            end
            ! Ignore repeats if this device is faulty
            if RepeatCount is not 0
            begin
                if property `errors` of RoomStatus is not 0
                begin
                    set property `temperature` of RoomSpec to property `temperature` of RoomStatus
                    return
                end
            end

            put property Sensor of Devices into Device
            gosub to CheckLock
            if Locked
            begin
                set property `temperature` of RoomSpec to `0`
            end
            else
            begin
                put `temp` into Message
                gosub to MessageESPDevice
!                log `Sensor: ` cat Response
                if left 3 of Response is `OK `
                begin
                    split Response on ` `
                    index Response to 1
                    set property `temperature` of RoomSpec to Response
                    set property `battery` of RoomSpec to `100`
                    if property `errors` of RoomStatus is not 0 set property `temperature` of RoomStatus to Response
                    index Response to 2
                    put `` cat Response into SensorRSS
                    gosub to ResetErrorCount
                end
                else
                begin
                    if RoomStatus has property `temperature`
                    begin
                        set property `temperature` of RoomSpec to property `temperature` of RoomStatus
                    end
                    else
                    begin
                        set property `temperature` of RoomSpec to `0`
                    end
                    gosub to BumpErrorCount
                end
            end
        end
        else
        begin
            if Mijia has property Sensor
            begin
                put property Sensor of Mijia into Item
                log Item
                put property `ts` of Item into LastReported
                take LastReported from the timestamp giving LastReported
                if LastReported is greater than 1800
                begin
                    set property `temperature` of RoomSpec to empty
                    put `Sensor for ` cat RoomName cat ` has not reported recently` into WarningMessage
                    gosub to AddWarning
                end
                else
                begin
                    set property `temperature` of RoomSpec to property `temp` of Item
                    set property `battery` of RoomSpec to property `batt` of Item
                end
            end
            else
            begin
                put `Sensor for ` cat RoomName cat ` has not reported` into WarningMessage
                set property `temperature` of RoomSpec to empty
                gosub to AddWarning
                log WarningMessage
            end
        end
    end
!    log RoomSpec
    put property `target` of RoomSpec into Target
    if RoomSpec has property `temperature` put `` cat property `temperature` of RoomSpec into Temperature
    else put empty into Temperature
    if Temperature is empty set property `temperature` of RoomSpec to empty
    else
    begin
        put the value of Temperature into T
        put T modulo 10 into T1
        divide T by 10
        set property `temperature` of RoomSpec to T cat `.` cat T1
    end
    if RoomSpec has property `battery` put `` cat property `battery` of RoomSpec into Battery
    else set property `battery` of RoomSpec to `0`

    ! Get the advance data for this room
GetAdvance:
    put `-` into Advance
    if file RamDisk cat `advance.json` exists
    begin
        load AdvanceData from RamDisk cat `advance.json`
        if AdvanceData has property RoomName put property RoomName of AdvanceData into Advance
    end
    else put json `{}` into AdvanceData
    set property `advance` of RoomSpec to Advance

    if Battery is empty put `0` into Battery

    ! See if this room is set for winter protection
    if property `protect` of RoomSpec is empty set property `protect` of RoomSpec to `no`
    if property `protect` of RoomSpec is `yes`
    begin
        put float property `ptemp` of RoomSpec into Target
        gosub to MultiplyTT
        if Temperature is not greater than Target
        begin
            log `Frost protect ON`
            add 1 to RequestCount
            set property `protect` of SystemData to Sensor
        end
        else set property `protect` of SystemData to empty
    end

    ! Deal with mode requests
    put property `mode` of RoomSpec into Mode
    if Mode is empty put `off` into Mode

    if Mode is `boost`
    begin
        put `` cat property `boost` of RoomSpec into Boost
        if left 1 of Boost is `B`       ! Set up a boost
        begin
            put from 1 of Boost into Target
            multiply Target by 60
            add the timestamp to Target
            set property `boost` of RoomSpec to Target
            set property `message` of MapObject to `confirm`
            gosub to UpdateRoom
            put `-` into Advance
            set property `advance` of RoomSpec to Advance
            gosub to WriteAdvance
            put property `target` of RoomSpec into TargetTemp
        end
        else if Boost is empty      ! Cancel the boost
        begin
            set property `boost` of RoomSpec to 0
            set property `mode` of RoomSpec to property `prevmode` of RoomSpec
            gosub to UpdateRoom
            put 0 into TargetTemp
        end
        else if Boost is not 0
        begin
            ! Boost contains the timestamp of the target (the end of the boost period).
            put integer Boost into Boost
            take the timestamp from Boost
            if Boost is less than 0
            begin
                ! Deal with the end of the boost period
                log `Boost finished`
                set property `boost` of RoomSpec to 0
                set property `mode` of RoomSpec to property `prevmode` of RoomSpec
                gosub to UpdateRoom
                put 0 into TargetTemp
            end
        end
        if RoomSpec has property `linked`
        begin
            if property `linked` of RoomSpec is not `yes`
            begin
                gosub to MultiplyTT ! not needed: just to make the log consistent
                put 0 into TargetTemp
                go to TurnOn
            end
        end
        ! Use the target setting for 'on' mode
        put property `target` of RoomSpec into Target
        if `` cat Target is not empty
        begin
            gosub to MultiplyTT
            if Temperature is less than Target
            begin
                put Target into TargetTemp
                go to TurnOn
            end
        end
        put 0 into TargetTemp
        go to TurnOff
    end

    if Mode is `off`
    begin
        gosub to MultiplyTT
        put 0 into TargetTemp
        go to TurnOff
    end

    if Mode is `on`
    begin
        if property `linked` of RoomSpec is not `yes` go to TurnOn
        else
            gosub to MultiplyTT
!            log RoomName cat `: ` cat Temperature cat ` ` cat Target
            if Temperature is less than Target go to TurnOn
            go to TurnOff
        end
    end

    ! Default: timed mode. Check each of the events
    put property `events` of RoomSpec into Events
    if Events is empty
    begin
        gosub to MultiplyTT
        put Target into TargetTemp
        if RoomName is `Kitchen` log Temperature cat `-` cat Target
        if Temperature is empty go to TurnOff
        if Temperature is less than Target go to TurnOn else go to TurnOff
    end
    take 1 from the count of Events giving NPeriods
    put `timed` into Mode
    put 0 into E
    while E is less than the count of Events
    begin
        put element E of Events into Event
        put property `until` of Event into Until
        put the timestamp of Until format `%H:%M` into Boundary
        put now into Now
        ! Check if this is the right time segment
        if Now is less than Boundary
        begin
            ! We've found the current time segment
            go to CheckAdvance
        end
        else
        begin
            if E is NPeriods
            begin
                ! We've gone past the last time segment so use the first
                put 0 into E
                go to CheckAdvance
            end
        end
        add 1 to E
    end
    return

!   Multiply Target by 10 so it can be compared
MultiplyTT:
    if `` cat Target is empty put `16` into Target
    else put `` cat Target into Target
    put the position of `.` in Target into P1
    if P1 is less than 0
    begin
        multiply Target by 10
    end
    else
    begin
        put left P1 of Target into T1
        multiply T1 by 10
        add 1 to P1
        put from P1 of Target into T2
        add T2 to T1 giving Target
    end
!    log `Target: ` cat Target cat `, Temperature: ` cat Temperature
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   This is called in 'timed' mode to deal with the Advance setting
CheckAdvance:
!    log `CheckAdvance`
!    if RoomName is `Sunroom` log Now cat `/` cat the timestamp cat `/` cat Boundary
    put `` cat E into EE
    put property `advance` of RoomSpec into Advance
    if RoomSpec has property `advance-rq` put property `advance-rq` of RoomSpec into RA
    else put `-` into RA
!    log `Current Advance is ` cat Advance cat `, new is ` cat RA
    if RA is `C` go to CancelAdvance
    if Advance is `-`
    begin
        if RA is `A`
        begin
            set property `boost` of RoomSpec to 0
            put EE into Advance
            set property `advance-rq` of RoomSpec to `-`
            go to WriteAdvance
        end
    end
    else if Advance is not EE go to CancelAdvance
    go to TurnOnOrOff

CancelAdvance:
    put `-` into Advance

WriteAdvance:
    if Advance is empty put `-` into Advance
    set property RoomName of AdvanceData to Advance
    save AdvanceData to RamDisk cat `advance.json`
    set property `advance` of RoomSpec to Advance
    set property `advance-rq` of RoomSpec to `-`
    set property RoomName of SystemData to RoomSpec

UpdateRoom:
    set element RoomNumber of Rooms to RoomSpec
UpdateRooms:
    set property `rooms` of Profile to Rooms
    set element CurrentProfile of Profiles to Profile
    set property `profiles` of MapObject to Profiles
    put stringify MapObject into Map
    save Map to RamDisk cat `map`
    set Changed
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Turn a relay on or off
TurnOnOrOff:
    if Battery is `0` go to TurnOff
    if Advance is not `-`
    begin
        add 1 to E
        if E is greater than NPeriods put 0 into E
        log `Advance to period ` cat E
    end
    put element E of Events into Event
    put float property `temp` of Event into Target
    gosub to MultiplyTT
    put Target into TargetTemp
    if Temperature is less than TargetTemp go to TurnOn

TurnOff:
    put `off` into OnOff
    go to UpdateLog

TurnOn:
    add 1 to RequestCount
    put `on` into OnOff

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Update the log if the temperature has changed outside a 10-minute window
UpdateLog:
    if Temperature is empty put `off` into OnOff
    set property `relay` of RoomSpec to OnOff
    put RamDisk cat `logs.json` into FileName
    if file FileName exists load Logs from FileName else put json `{}` into Logs
    if Logs has property RoomName
    begin
        put property RoomName of Logs into LogData
        put property `ts` of LogData into TS
        put property `temp` of LogData into T
    end
    else
    begin
        put json `{}` into LogData
        put 0 into TS
        put 0 into T
    end

!   Skip if less than 10 minutes from the last change
    add 600 to TS
    if now is less than TS go to SetRelays

!   Test if the temperature has changed
    if `` cat T is `` cat Temperature go to SetRelays

!   There's been a change, so write a log and update the data file
    log `Temperature change in ` cat RoomName
    if Password is not empty post stringify RoomSpec to RBRServer cat `/sensorlog/` cat MAC cat `/` cat Password
    set property `temp` of LogData to Temperature
    set property `ts` of LogData to now
    set property RoomName of Logs to LogData
    save Logs to FileName

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Set the relay(s) in a single room
SetRelays:
    put property `temperature` of RoomSpec into Temperature
    put property `battery` of RoomSpec into Battery
    put property `relays` of RoomSpec into Relays
    put property `relays` of RoomSpec into Relays
    if Relays is empty put json `[]` into Relays
    if the count of Relays is 0 log `Sensor: ` cat Sensor cat ` ` cat Temperature cat ` ` cat SensorRSS
    else log `Sensor: ` cat Sensor cat ` T:A=` cat Target cat `:` cat Temperature cat ` ` cat Mode cat `:`
        cat OnOff cat ` ` cat SensorRSS
    if RelayType is empty put `RBR-Now` into RelayType
! log RoomName cat ` Relays: ` cat Relays
    put json `[]` into Responses
    put 0 into R
    while R is less than the count of Relays
    begin
        put element R of Relays into Relay
        put json `{}` into Response
        if RelayType is `RBR-Now`
        begin
            if Devices does not have property RoomName
            begin
                log `No relay info available for ` cat RoomName
                go to SR2
            end
            put property RoomName of Devices into Device
            gosub to CheckLock
            if not Locked
            begin
                put OnOff into Message

                gosub to MessageESPDevice
                if Response is not empty
                begin
                    gosub to RecordMijia
                    put Response into Value
                    put json `{}` into Response
                    split Value on ` `
                    if the elements of Value is not less than 4
                    begin
                        index Value to 1
                        set property `uptime` of Response to Value
                        index Value to 2
                        if Value is 1 set property `state` of Response to `on` else set property `state` of Response to `off`
                        index Value to 3
                        set property `RSS` of Response to Value
                    end
                end
                set the elements of Value to 1
            end
        end
        else if RelayType is `Shelly One`
        begin
            put `http://` cat Relay cat `/relay/0?turn=` cat OnOff into Request
            get Response from url Request
            or begin
                put empty into Response
                gosub to NetworkError
                go to SR1
            end
            put json Response into Value
            put json `{}` into Response
            set property `uptime` of Response to 0
            if Value has property `ison`
            begin
                if property `ison` of Value is true set property `state` of Response to `on`
                else set property `state` of Response to `off`
                gosub to ClearNetworkErrors
            end
            else gosub to BumpErrorCount
        end
        else if RelayType is `Tasmota`
        begin
            put `http://` cat Relay cat `/cm?cmnd=power%20` cat OnOff into Request
            get Response from url Request
            or begin
                put empty into Response
                gosub to NetworkError
                go to SR1
            end
            put json Response into Value
            put json `{}` into Response
            set property `uptime` of Response to 0
            set property `state` of Response to `?`
            gosub to ClearNetworkErrors
        end
        else if RelayType is `TP-Link P100`
        begin
            put property `p100Email` of RoomSpec into TPEmail
            put property `p100Password` of RoomSpec into TPPassword
            relay Relay TPEmail TPPassword OnOff
        end
    SR1:
        if Response is empty log RoomName cat `: No response` else log `Relay: ` cat Response
        append Response to Responses
    SR2:
        add 1 to R
    end
    set property `relay` of RoomSpec to OnOff
    set property `responses` of RoomSpec to Responses
    if RelayType is not `Manual`
    begin
        set property `relay` of RoomSpec to OnOff
        set property `advance` of RoomSpec to Advance
    end
    set property RoomName of SystemData to RoomSpec
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Deal with the error count for a room
ResetErrorCount:
    put property `errors` of RoomStatus into E
    if E is 0 return
    set property `errors` of RoomStatus to 0
    set property `status` of RoomStatus to `good`
    go to SaveErrorCount

BumpErrorCount:
    put property `errors` of RoomStatus into E
    add 1 to E
    set property `errors` of RoomStatus to E
    if E is greater than 20 set property `status` of RoomStatus to `fail`
    else set property `status` of RoomStatus to `suspect`
    log E cat ` errors`

SaveErrorCount:
    set property RoomName of Status to RoomStatus
    save Status to RamDisk cat `status.json`
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Post data to the RBR server. This also posts the IP address
PostToServer:
    save stringify SystemData to RamDisk cat `systemdata`
    if Password is not empty
    begin
        post stringify SystemData to RBRServer cat `/sensors/` cat MAC cat `/` cat Password cat `/` cat IPAddr
        or begin
            log `Unable to post sensor data`
            go to PTS2
        end

        ! If the map has changed, write it back to the RBR server.
    PTS2:
        if Changed
        begin
            put stringify MapObject into Map
            save Map to RamDisk cat `map`
            if Password is not empty
            begin
                if Confirm
                begin
                    log `Post the map & confirm`
!                    print Map
                    post Map to RBRServer cat `/confirm/` cat MAC cat `/` cat Password
                    clear Confirm
                end
                else
                begin
                    log `Post the map`
                    post Map to RBRServer cat `/map/` cat MAC cat `/` cat Password
                end
            end
            clear Changed
        end
    end
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Record information about Mijia thermometers
RecordMijia:
    put Response into Value
    split Value on ` `
    index Value to 2
    if Value is not `:`
    begin
        log `Mijia: ` cat  RoomName cat ` ` cat from 1 of Value
        split Value on `;`
        if the elements of Value is not less than 5
        begin
            put json `{}` into Item
            set property `ts` of Item to now
            index Value to 1
            set property `rssi` of Item to Value
            index Value to 2
            set property `temp` of Item to Value
            index Value to 3
            set property `hum` of Item to Value
            index Value to 4
            set property `batt` of Item to Value
            index Value to 0
            set property `a4:c1:38` cat Value of Mijia to Item
        end
        set the elements of Value to 1
    end
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Select a room by name
GetRoomByName:
    put 0 into RoomNumber
    while RoomNumber is less than the count of Rooms
    begin
        put element RoomNumber of Rooms into RoomSpec
        if RoomName is property `name` of RoomSpec return
        increment RoomNumber
    end
    put -1 into RoomNumber
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Add a warning message
AddWarning:
    add 1 to BadResponses
    if WarningMessages is not empty put WarningMessages cat `<br>` into WarningMessages
    put WarningMessages cat WarningMessage into WarningMessages
    set property `status` of SystemData to `suspect`
    set property Sensor of SystemData to SensorValues
    log `Warning: ` cat WarningMessage
    put empty into WarningMessage
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Clear the network error counter
ClearNetworkErrors:
    put -1 into NetworkErrors
!   Bump the network error counter
NetworkError:
    add 1 to NetworkErrors
    save  `` cat NetworkErrors to RamDisk cat `network-errors`
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Check if lock is set for the current device
CheckLock:
    put property `name` of Device into Name
    put RamDisk cat `lock` into FileName
    if file FileName exists
    begin
        set the elements of Value to 1
        load Value from FileName
        if Value is empty clear Locked else set Locked
!        else if Value is `all` set Locked
!        else if Value is Name set Locked
    end
    else clear Locked
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Send a message to an ESP-Now device
MessageESPDevice:
    if MasterIPAddr is empty return
!    log `Send ` cat Message cat ` to ` cat Name
    put property `ssid` of Device into DeviceMAC
    put from 8 of DeviceMAC into DeviceMAC
    put `http://` cat MasterIPAddr cat `/?mac=` into URL
    if Device has property `path` put property `path` of Device into Path else put empty into Path
    if Path is empty put URL cat DeviceMAC cat `&msg=` cat Message into URL
    else
    begin
        put the position of `,` in Path into P
        if P is greater than 0
        begin
            put URL cat left P of Path into URL
            increment P
            put URL cat `&msg=!` cat from P of Path into URL
            put URL cat DeviceMAC cat `,` cat Message into URL
        end
        else put URL cat Path cat `&msg=!` cat DeviceMAC cat `,` cat Message into URL
    end
!    log URL
    get Response from url URL
    or begin
!        log `!!!!!!!! Message to '` cat Name cat `' failed`
        put empty into Response
    end
    put from 6 of DeviceMAC into DeviceMAC
    log `?mac=` cat DeviceMAC cat `&msg=` cat Message cat ` -> ` cat Response
    if left 2 of Response is not `OK`
    begin
        if the position of `ESP_ERR_ESPNOW_CHAN` in Response is greater than 0
        begin
            put RamDisk cat `channel` into FileName
            if file FileName exists load Value from FileName else put `0` into Value
            put the value of Value into Value
            increment Value
            save `` cat Value to FileName
            log Value cat ` channel errors`
            if Value is greater than 20
            begin
                save `0` to FileName
                put MasterDevice into Device
                put `reset` into Message
                gosub to MessageESPDevice
                wait 5
                exit
            end
        end
!        log `Bad response: ` cat Response
        put empty into Response
    end
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Send an email message
SendMailMessage:
    put `{"to":"admin@rbrheating.com","subject":"Restart","message":"` cat MailMessage cat `"}` into Mail
    post Mail to RBRServer cat `/sendmail/`
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Process a request from the UI
ProcessRequest:
    put empty into Request
    if file RamDisk cat `request` exists
    begin
        load Request from RamDisk cat `request`
        delete file RamDisk cat `request`
    end
    if Request is empty
    begin
        get Request from url RBRServer cat `/request/` cat MAC cat `?v=` cat now
        or begin
            gosub to NetworkError
            stop
        end
        gosub to ClearNetworkErrors
    end
    if Request is empty return

    log `Request: ` cat Request
    put Request into LogText
    gosub to Log
    set Changed
    set Confirm
    put json Request into Request
    put property `action` of Request into Action
    if Action is `SystemName`
    begin
        set property `name` of MapObject to property `SystemName` of Request
    end
    else if Action is `map`
    begin
        put property `map` of Request into MapObject
        set Changed
        return
    end
    else if Action is `addroom`
    begin
        put property `spec` of Request into RoomSpec
        append RoomSpec to Rooms
        gosub to UpdateRooms
    end
    else if Action is `rooms`
    begin
        put property `rooms` of Request into Rooms
        gosub to UpdateRooms
    end
    else if Action is `devices`
    begin
        put property `room` of Request into RoomName
        gosub to GetRoomByName
        if RoomNumber is not -1
        begin
            set property `sensor` of RoomSpec to property `sensor` of Request
            set property `relays` of RoomSpec to property `relays` of Request
            set property `linked` of RoomSpec to property `linked` of Request
            set property `protect` of RoomSpec to property `protect` of Request
            set property `ptemp` of RoomSpec to property `ptemp` of Request
            gosub to UpdateRoom
        end
    end
    else if Action is `profiles`
    begin
        put property `profiles` of Request into Profiles
        put property `profile` of Request into CurrentProfile
        set property `profiles` of MapObject to Profiles
        set property `profile` of MapObject to CurrentProfile
        set property `calendar` of MapObject to property `calendar` of Request
        set property `calendar-data` of MapObject to property `calendar-data` of Request
        put stringify MapObject into Map
        save Map to RamDisk cat `map`
    end
    else if Action is `mode`
    begin
        put property `mode` of Request into Mode
        put property `roomnumber` of Request into RoomNumber
        put element RoomNumber of Rooms into RoomSpec
        put property `name` of RoomSpec into RoomName
        if Mode is `timed`
        begin
            if Request has property `advance`
            begin
                set property `advance-rq` of RoomSpec to property `advance` of Request
            end
            else set property `advance-rq` of RoomSpec to `-`
        end
        else if Mode is `on`
        begin
            if Request has property `target`
                set property `target` of RoomSpec to property `target` of Request
        end
        if Mode is `boost`
        begin
            if Request has property `target`
                set property `target` of RoomSpec to property `target` of Request
            if property `mode` of RoomSpec is not `boost`
                set property `prevmode` of RoomSpec to property `mode` of RoomSpec
            set property `boost` of RoomSpec to property `boost` of Request
        end
        set property `mode` of RoomSpec to Mode
        gosub to UpdateRoom
    end
    else if Action is `profiles`
    begin
    end
    else if Action is `roomname`
    begin
        put property `roomnumber` of Request into RoomNumber
        put element RoomNumber of Rooms into RoomSpec
        set property `name` of RoomSpec to property `name` of Request
        gosub to UpdateRoom
    end
    else if Action is `roomdata`
    begin
        put property `roomnumber` of Request into RoomNumber
        put element RoomNumber of Rooms into RoomSpec
        put property `items` of Request into Items
        put the keys of Items into Keys
        put 0 into N
        while N is less than the count of Keys
        begin
            put element N of Keys into Key
            set property Key of RoomSpec to property Key of Items
            add 1 to N
        end
        gosub to UpdateRoom
    end
    else if Action is `config`
    begin
        set property `name` of MapObject to property `name` of Request
        set property `address` of MapObject to property `address` of Request
        set property `ssid` of MapObject to property `ssid` of Request
        set property `password` of MapObject to property `password` of Request
        set property `extenders` of MapObject to property `extenders` of Request
        put property `names` of Request into RoomNames
        put property `ssids` of Request into RoomSSIDs
        put element 0 of Profiles into Profile
        put property `rooms` of Profile into Rooms
        put 0 into R
        while R is less than the count of Rooms
        begin
            put element R of Rooms into RoomSpec
            set property `name` of RoomSpec to element R of RoomNames
            set property `ssid` of RoomSpec to element R of RoomSSIDs
            set element R of Rooms to RoomSpec
            add 1 to R
        end
        set property `rooms` of Profile to Rooms
        set element 0 of Profiles to Profile
        set property `profiles` of MapObject to Profiles
        put stringify MapObject into Map
        put element CurrentProfile of Profiles into Profile
        put property `rooms` of Profile into Rooms
    end
    else if Action is `periods`
    begin
        put property `roomnumber` of Request into RoomNumber
        put element RoomNumber of Rooms into RoomSpec
        set property `events` of RoomSpec to property `periods` of Request
        gosub to UpdateRoom
    end
    else if Action is `reload`
    begin
        delete file RamDisk cat `map`
    end
    else if Action is `request`
    begin
        set property `request` of MapObject to property `request` of Request
    end
    else if Action is `halt`
    begin
        log `Request to halt the system`
        set HaltRequested
    end
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Log a message
Log:
    open Logger `log.txt` for appending
    write LogText cat newline to Logger
    close Logger
    return
