!   rbr-ui.ecs

    script UI

    use graphics
    use plugin RBR_UI from rbr_ui.py

    rbrwin Window
    room Room
    element Banner
    element NameAndProfiles
    element Popout
    pushbutton Hamburger
    pushbutton ModeButton
    pushbutton ToolsButton
    pushbutton OKButton
    modeDialog ModeDialog
    dialog Dialog
    layout Panel
    layout Layout
    layout Grid
    label Label
    label Header
    lineinput Input
    lineinput Input2
    multiline MultiLine
    checkbox CheckBox
    checkbox CheckBox2
    combobox ComboBox
    ssh Controller
    module Module
    variable UserName
    variable ControllerSpec
    variable ControllerIPAddr
    variable GraphicsStarted
    variable HomeDir
    variable Path
    variable IsLocal
    variable FirstTime
    variable RamDisk
    variable WindowWidth
    variable WindowHeight
    variable RoomHeight
    variable Title
    variable Name
    variable Mode
    variable Map
    variable CurrentProfile
    variable Profiles
    variable Profile
    variable SystemData
    variable Rooms
    variable RoomName
    variable RoomSpec
    variable RoomData
    variable RoomIndex
    variable Periods
    variable ThisRoom
    variable ThatRoom
    variable NewRooms
    variable Choices
    variable ChoicesShown
    variable Choice
    variable Advance
    variable Tick
    variable Result
    variable Request
    variable Data
    variable Value
    variable Values
    variable Locked
    variable Timestamp
    variable Temperature
    variable Text
    variable SensorID
    variable RelayNames
    variable Responses
    variable Response
    variable Uptime
    variable Item
    variable HH
    variable MM
    variable SS
    variable C
    variable N
    variable R
    variable T

!    debug step

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Some preliminary stuff
    init graphics

    ! Figure out where we're running
    put `linaro` into UserName
    if UserName is trim system `whoami`
    begin
        log `Running locally`
        set IsLocal
    end
    else
    begin
        log `Running remotely`
        clear IsLocal
    end

    clear GraphicsStarted
    put trim system `echo $HOME` into HomeDir
    put `/mnt/data/` into RamDisk

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Main start
Start:
    if IsLocal put empty into Title else put `RBR` into Title
    put 1000 into WindowHeight
    put 582 into WindowWidth
    divide WindowHeight by 12 giving RoomHeight
    put 0 into Tick

    create Window title Title size WindowWidth WindowHeight
    show Window
    start graphics

    ! If we're running remotely, set up SSH to access the controller
    if not IsLocal
    begin
        run `controller.ecs` as Module with HomeDir and ControllerSpec
        put property `current` of ControllerSpec into ControllerIPAddr
        put property ControllerIPAddr of ControllerSpec into Item
        set Controller
            host ControllerIPAddr
            user property `user` of Item
            password property `password` of Item
    end

    ! Refresh the UI regularly
    put empty into Path
    clear Locked
    set FirstTime
    gosub to RefreshScreen
    clear FirstTime
!stop
    on tick
    begin
        put the ticker into Tick
        if Tick modulo 200 is 0 gosub to RefreshScreen
    end
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Refresh the screen. This is called every 2 seconds (200 graphics ticks).
!   See r_start in ex_pyside.py
RefreshScreen:
    if Locked return
    put empty into SystemData
    put 0 into N
    while SystemData is empty
    begin
        increment N
        if N is greater than 1 log `Loading system files (` cat N cat `)`
        if IsLocal
        begin
            load Map from RamDisk cat `map`
            or begin
                log `Could not read /mnt/data/map`
                return
            end
            load CurrentProfile from RamDisk cat `profile`
            load SystemData from RamDisk cat `systemdata.json`
        end
        else
        begin
            load Map from Controller RamDisk cat `map`
            or begin
                log `Could not read /mnt/data/map`
                return
            end
            load CurrentProfile from Controller RamDisk cat `profile`
            load SystemData from Controller RamDisk cat `systemdata.json`
            put json SystemData into SystemData
            or begin
                log SystemData
                log `Can't convert SystemData to JSON`
            end
        end
        if SystemData is empty wait 1 second
    end
    put json Map into Map
    put the value of CurrentProfile into CurrentProfile
    put property `profiles` of Map into Profiles
    put element CurrentProfile of Profiles into Profile
    put property `rooms` of Profile into Rooms
!    log Rooms
    set the elements of Room to the count of Rooms
    set the elements of RoomData to the count of Rooms
    set the elements of ModeButton to the count of Rooms
    set the elements of ToolsButton to the count of Rooms

!   Build the screen
    if not FirstTime clear Window
    put 0 into R
    while R is less than the count of Rooms
    begin
        put element R of Rooms into RoomSpec
!        log RoomSpec
        put property `name` of RoomSpec into Name
        if SystemData has property Name
        begin
            put property Name of SystemData into RoomData
            set property `timestamp` of RoomSpec to property `timestamp` of RoomData
            if RoomData has property `temperature`
                set property `temperature` of RoomSpec to property `temperature` of RoomData
            else set property `temperature` of RoomSpec to `0`
            if RoomData has property `relay`
                set property `relay` of RoomSpec to property `relay` of RoomData
            else set property `relay` of RoomSpec to `off`
        end
        else
        begin
            set property `temperature` of RoomSpec to `0`
            set property `relay` of RoomSpec to `off`
        end
        gosub to CreateRoom
        increment R
    end
    set attribute `system name` of Window to property `name` of Map
    set attribute `profile` of Window to property `name` of Profile

    ! Set up the banner at the top of the screen
    attach Banner to element `banner` of Window
    attach Hamburger to element `hamburger` of Banner
    on click Hamburger go to ShowMainMenu

    ! Set up the name and profiles strip below the banner
    attach NameAndProfiles to element `profiles` of Window
    attach Popout to element `popout` of Window
    return

ReadError:
    put Tick into T
    divide T by 100
    log `Read failure at ` cat T
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Create a room from the spec and display it.
CreateRoom:
!    log `Create ` cat Name cat `, mode ` cat Mode
    index Room to R
    create Room
        spec RoomSpec
        height RoomHeight
        index R
    add Room to Window
!    log Room
    index ModeButton to R
    attach ModeButton to element `mode` of Room
    on click ModeButton go to HandleMode
    index ToolsButton to R
    attach ToolsButton to element `tools` of Room
    on click ToolsButton go to HandleTools
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   The Main menu - the hamburger at the top right
ShowMainMenu:
    put json `[]` into Choices
    append `Set the system name` to Choices
    append `Set the request relay` to Choices
    append `Add a room` to Choices
    append empty to Choices
    append `Reset` to Choices
    append `Exit Application` to Choices
    append empty to Choices
    append `Cancel` to Choices

    select Choice from menu `Main Menu` with Choices
    log Choice
    if Choice is element 0 of Choices go to SetSystemName
    if Choice is element 1 of Choices go to SetRequestRelay
    if Choice is element 2 of Choices go to AddRoom
    if Choice is element 4 of Choices go to Reset
    if Choice is element 5 of Choices exit
    if Choice is element 7 of Choices stop
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Here when the user clicks to set the system name. Use an external module
SetSystemName:
    run `systemName.ecs` as Module with Window and NameAndProfiles and Request
    if Request is empty stop
    gosub to SendRequest
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Provide information about the request relay, if there is one
SetRequestRelay:
    create Layout type QHBoxLayout
    create Label text `Type the name of the request relay:`
    add Label to Layout
    create Input size 30
    if Map has property `request` set the text of Input to property `request` of Map
    else set the text of Input to empty
    add Input to Layout
    create keyboard layout Layout and receiver Input in Window
    put json `{}` into Request
    set property `action` of Request to `request`
    set property `request` of Request to Input
    log Request
    gosub to SendRequest
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Add a new room to the displayed list
AddRoom:
    put `{"name": "Unnamed", "sensor": "", "relays": [], "mode": "off", "target": 20, `
        cat `"events": [{"until": "07:00", "temp": 15}], "relayType":"none", "protect": "no", "relay": "off"}`
        into ThisRoom
    append json ThisRoom to Rooms
    put json `{}` into Request
    set property `action` of Request to `rooms`
    set property `rooms` of Request to Rooms
    gosub to SendRequest
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Reset the controller
Reset:
    put json `{}` into Request
    set property `action` of Request to `reset`
    gosub to SendRequest
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Handle a click on one of the Mode buttons
HandleMode:
    put json `{}` into Data
    put attribute `index` of ModeButton into R
    index Room to R
    put element R of Rooms into RoomSpec
    put property `name` of RoomSpec into Name
    put property `mode` of RoomSpec into Mode
    get Result from ModeDialog with RoomSpec
    set property `target` of Data to property `target` of RoomSpec
    log Name cat `: ` cat Result
    put json `{}` into Request
    if Result is empty stop
    else if Result is `timed`
    begin
        set property `mode` of Request to `timed`
        gosub to SetMode
    end
    else if Result is `off`
    begin
        set property `mode` of Request to `off`
        gosub to SetMode
    end
    else if Result is `on`
    begin
        set property `mode` of Request to `on`
        set property `target` of Request to property `target` of Data
        gosub to SetMode
    end
    else if left 5 of Result is `boost`
    begin
        set property `mode` of Request to `boost`
        put from 6 of Result into Value
        put left 5 of Result into Result
		set property `boost` of Request to `B` cat Value
        set property `target` of Request to property `target` of Data
        gosub to SetMode
    end
    else if Result is `advance`
    begin
        set property `mode` of Request to `timed`
        put property `advance` of RoomSpec into Advance
        if Advance is `-` set property `advance` of Request to `A`
        else set property `advance` of Request to `C`
        gosub to SetMode
    end
    else if Result is `edit`
    begin
        set Locked
        put property `events` of RoomSpec into Periods
        put property `name` of RoomSpec into RoomName
        run `schedule.ecs` as Module with RoomName and Window and Periods and Request
        if Request is empty stop
        set property `roomnumber` of Request to R
        gosub to SendRequest
        clear Locked
    end 
    stop

SetMode:
    set property `action` of Request to `mode`
    set property `roomnumber` of Request to R
    log `Save ` cat Request
    go to SendRequest

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   The Tools menu on the right of each room row
HandleTools:
    put attribute `index` of ToolsButton into RoomIndex
    index Room to RoomIndex
    put attribute `name` of Room into Name
    put json `[]` into Choices
    append `Move ` cat Name cat ` up` to Choices
    append `Move ` cat Name cat ` down` to Choices
    append `Show info for ` cat Name to Choices
    append `Edit room name` to Choices
    append `Edit device parameters` to Choices
    append `Edit timing schedule` to Choices
    append `Delete ` cat Name to Choices
    append empty to Choices
    append `Cancel` to Choices

    put the count of Rooms into R
    decrement R
    put json `[]` into ChoicesShown
    if RoomIndex is 0 append element 1 of Choices to ChoicesShown
    else if RoomIndex is R append element 0 of Choices to ChoicesShown
    else
    begin
        append element 0 of Choices to ChoicesShown
        append element 1 of Choices to ChoicesShown
    end
    put 2 into C
    while C is less than the count of Choices
    begin
        append element C of Choices to ChoicesShown
        increment C
    end

    select Choice from menu `Tools Menu` with ChoicesShown
    log Choice
    put json `{}` into Request
    if Choice is element 0 of Choices go to MoveRoomUp
    if Choice is element 1 of Choices go to MoveRoomDown
    if Choice is element 2 of Choices go to ShowInfo
    if Choice is element 3 of Choices go to EditRoomName
    if Choice is element 4 of Choices go to EditDeviceParams
    if Choice is element 5 of Choices go to EditSchedule
    if Choice is element 6 of Choices go to DeleteRoom
    if Choice is element 8 of Choices stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!    Move the selected room up in the list
MoveRoomUp:
    put element RoomIndex of Rooms into ThisRoom
    take 1 from RoomIndex
    put element RoomIndex of Rooms into ThatRoom
    set element RoomIndex of Rooms to ThisRoom
    add 1 to RoomIndex
    set element RoomIndex of Rooms to ThatRoom
    set property `action` of Request to `rooms`
    set property `rooms` of Request to Rooms
    gosub to SendRequest
    stop


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Move the selected room down in the list
MoveRoomDown:
    put element RoomIndex of Rooms into ThisRoom
    add 1 to RoomIndex
    put element RoomIndex of Rooms into ThatRoom
    set element RoomIndex of Rooms to ThisRoom
    take 1 from RoomIndex
    set element RoomIndex of Rooms to ThatRoom
    set property `action` of Request to `rooms`
    set property `rooms` of Request to Rooms
    gosub to SendRequest
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Show information about the selected room
ShowInfo:
    set Locked
    put property Name of SystemData into RoomSpec
    create Panel type QVBoxLayout
    create Label text `-- ` cat Name cat ` Sensor --`
    add Label to Panel
    put the value of property `timestamp` of RoomSpec into Timestamp
    multiply Timestamp by 1000
    put property `temperature` of RoomSpec into Temperature
    put `Last reading: ` cat datime Timestamp into Text
    put Text cat newline cat `Temperature: ` cat Temperature cat `ºC` into Text
    create Label text Text
    add Label to Panel
    if RoomSpec has property `responses`
    begin
        put property `responses` of RoomSpec into Responses
        put `-- ` cat Name cat ` Relay` into Text
        if the count of Responses is greater than 1 put Text cat `s` into Text
        put Text cat ` --` into Text
        create Label text Text
        add Label to Panel
        put 0 into N
        while N is less than the count of Responses
        begin
            put element N of Responses into Response
            if Response has property `state` put `State: ` cat property `state` of Response into Text
            else put empty into Text
            if Response has property `uptime`
            begin
                put the value of property `uptime` of Response into Uptime
                divide Uptime by 3600 giving HH
                put Uptime modulo 3600 into MM
                divide MM by 60
                put Uptime modulo 60 into SS
                if HH is less than 10 put `0` cat HH into HH
                if MM is less than 10 put `0` cat MM into MM
                if SS is less than 10 put `0` cat SS into SS
                put Text cat newline cat `Uptime: ` cat HH cat `:` cat MM cat `:` cat SS into Text
            end
            if Response has property `RSS`
                put Text cat newline cat `RSS: ` cat property `RSS` of Response into Text
            if Text is not empty
            begin
                create Label text Text
                add Label to Panel
            end
            increment N
        end
    end
    create OKButton text `OK`
    set the height of OKButton to 40
    add OKButton to Panel
    on click OKButton
    begin
        hide Popout
        clear Locked
    end
    add Panel to Popout
    show Popout
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Edit a room name
EditRoomName:
    create Layout type QHBoxLayout
    create Label text `Type the room name:`
    add Label to Layout
    create Input size 30 text Name
    set the width of Input to 200
    add Input to Layout
    create keyboard layout Layout and receiver Input in Window
    set attribute `name` of Room to Input
    put json `{}` into Request
    set property `action` of Request to `roomname`
    set property `roomnumber` of Request to RoomIndex
    set property `name` of Request to Input
    log Request
    gosub to SendRequest
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Edit the sensor and relay information for a room
EditDeviceParams:
    put property Name of SystemData into RoomSpec
    put property `relays` of RoomSpec into Values
    put empty into RelayNames
    put 0 into R
    while R is less than the count of Values
    begin
        if RelayNames is not empty put RelayNames cat newline into RelayNames
        put RelayNames cat element R of Values into RelayNames
        increment R
    end

    create Panel type QVBoxLayout
    create Header text `Sensor and relay(s) for ` cat Name
    set the width of Header to 470
    set the alignment of Header to hcenter
    set the style of Header to `font-size: 14px; font-weight: bold; border:none;`
    add Header to Panel
    create Grid type QGridLayout
    add Grid to Panel

    ! Get the sensor
    create Label text `Type the sensor name or MAC:`
    add Label at 0 0 in Grid
    create Input size 30
    put property Name of SystemData into RoomSpec
    put property `sensor` of RoomSpec into SensorID
    set the text of Input to SensorID
    add Input at 0 1 in Grid

    ! Get the multiline
    create Label text `Type the relay names or ids,<br>one per line:`
    add Label at 1 0 in Grid
    create MultiLine cols 30 rows 4
    set the text of MultiLine to RelayNames
    add MultiLine at 1 1 in Grid
    on click Input log `Input`
    on click MultiLine log `MultiLine`

    ! Get the relay type
    create Label text `Select the relay type:`
    add Label at 2 0 in Grid
    create ComboBox
    add `none` to ComboBox
    add `RBR-Now` to ComboBox
    add `Shelly One` to ComboBox
    add `Tasmota` to ComboBox
    add `TP-Link P100` to ComboBox
    add `Manual` to ComboBox
    select property `relayType` of RoomSpec in ComboBox
    add ComboBox at 2 1 in Grid

    ! Get the 'linked' checkbox
    create Label text `Sensor is linked to relay(s)`
    add Label at 3 0 in Grid
    create CheckBox
    if property `linked` of RoomSpec is `yes` set the state of CheckBox to checked
    else set the state of CheckBox to unchecked
    add CheckBox at 3 1 in Grid

    ! Get the 'Frost Protect' line
    create Layout type QHBoxLayout
    add Layout at 4 0 in Grid
    create Label text `Protect below`
    add Label to Layout
    create Input2 size 5
    if RoomSpec has property `ptemp` set the text of Input2 to property `ptemp` of RoomSpec
    add Input2 to Layout
    create Label text `°C`
    add Label to Layout
    add stretch to Layout

    create CheckBox2 text `Enable protection`
    if property `protect` of RoomSpec is `yes` set the state of CheckBox2 to checked
    else set the state of CheckBox2 to unchecked
    add CheckBox2 at 4 1 in Grid

!   Create an on-screen keyboard for the above text elements
    create keyboard layout Panel 
        and receiver Input 
        and receiver Input2 
        and receiver MultiLine 
        in Window

    put json `{}` into Request
    set property `action` of Request to `devices`
    set property `room` of Request to Name
    set property `sensor` of Request to Input
    put MultiLine into RelayNames
    split RelayNames
    put json `[]` into Value
    put 0 into N
    while N is less than the elements of RelayNames
    begin
        index RelayNames to N
        append RelayNames to Value
        increment N
    end
    set property `relays` of Request to Value
    if CheckBox set property `linked` of Request to `yes` else set property `linked` of Request to `no`
    if CheckBox2 set property `protect` of Request to `yes` else set property `protect` of Request to `no`
    set property `ptemp` of Request to Input2
    log Request
    gosub to SendRequest
    stop

EditSchedule:
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Delete a room
DeleteRoom:
    create Dialog on Window
        type confirm
        prompt `Are you sure you want to delete ` cat Name cat `?`
    show Dialog
    if not Dialog stop

    put json `[]` into NewRooms
    put 0 into R
    while R is less than RoomIndex
    begin
        append element R of Rooms to NewRooms
        increment R
    end
    add 1 to R
    while R is less than the count of Rooms
    begin
        append element R of Rooms to NewRooms
        increment R
    end
    set property `action` of Request to `rooms`
    set property `rooms` of Request to NewRooms
    gosub to SendRequest
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Send a request to the system controller
SendRequest:
    log Request
    set Locked
    if IsLocal save stringify Request to RamDisk cat `request`
    else save stringify Request to Controller RamDisk cat `request`
    wait 5
    clear Locked
    return
