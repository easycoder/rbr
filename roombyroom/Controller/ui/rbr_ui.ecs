!   rbr-ui.ecs

    script RBR_UI

    use plugin graphics

    import plugin RBR_UI from rbr_ui.py

    window HostWindow
    rbrwin Window
    room Room
    element Banner
    element NameAndProfiles
    element Popout
    button Hamburger
    button ModeButton
    button ToolsButton
    modeDialog ModeDialog
    dialog Dialog
    layout Panel
    layout Layout
    label Label
    lineinput HostInput
    lineinput UserInput
    lineinput PasswordInput
    lineinput Input
    pushbutton OKButton
    pushbutton CancelButton
    ssh Controller
    module Module
    variable ControllerSpec
    variable GraphicsStarted
    variable HomeDir
    variable Path
    variable IsLocal
    variable RamDisk
    variable WindowWidth
    variable WindowHeight
    variable RoomHeight
    variable Title
    variable Name
    variable Mode
    variable Map
    variable CurrentProfile
    variable Profiles
    variable Profile
    variable SystemData
    variable Rooms
    variable RoomSpec
    variable RoomData
    variable RoomIndex
    variable ThisRoom
    variable ThatRoom
    variable NewRooms
    variable Choices
    variable ChoicesShown
    variable Choice
    variable Advance
    variable Tick
    variable Result
    variable Request
    variable Data
    variable Prompt
    variable Value
    variable Locked
    variable Timestamp
    variable Temperature
    variable Text
    variable Responses
    variable Response
    variable Uptime
    variable HH
    variable MM
    variable SS
    variable C
    variable N
    variable R
    variable T

!   debug step

    init graphics

    clear GraphicsStarted
    put trim system `echo $HOME` into HomeDir
    put `/mnt/data/` into RamDisk
    if file RamDisk cat `map` does not exist
    begin
        put HomeDir cat `/.controller.json` into Path
        if file Path exists load ControllerSpec from Path
        else
        begin
            create Panel type QVBoxLayout
            create Layout type QHBoxLayout
            add Layout to Panel
            create Label text `Host:`
            add Label to Layout
            create HostInput size 30
            set the width of HostInput to 200
            add HostInput to Layout
            create Layout type QHBoxLayout
            add Layout to Panel
            create Label text `User:`
            add Label to Layout
            create UserInput size 30
            set the width of UserInput to 200
            add UserInput to Layout
            create Layout type QHBoxLayout
            add Layout to Panel
            create Label text `Password:`
            add Label to Layout
            create PasswordInput size 30
            set the width of PasswordInput to 200
            add PasswordInput to Layout
            create Layout type QHBoxLayout
            add Layout to Panel
            create OKButton text `OK`
            on click OKButton
            begin
                if HostInput is empty stop
                if UserInput is empty stop
                if PasswordInput is empty stop
                put json `{}` into ControllerSpec
                set property `host` of ControllerSpec to HostInput
                set property `user` of ControllerSpec to UserInput
                set property `password` of ControllerSpec to PasswordInput
                save ControllerSpec to Path
                fork to Start
                wait 10 seconds
                close HostWindow
            end
            add OKButton to Layout
            create CancelButton text `Cancel`
            on click CancelButton exit
            add CancelButton to Layout
            create HostWindow title `Host Details` size 300 200
            set the layout of HostWindow to Panel
            show HostWindow
            start graphics
            set GraphicsStarted
            stop
        end
    end

Start:
    if file RamDisk cat `map` exists
    begin
        log `Running locally`
        set IsLocal
        put empty into Title
    end
    else
    begin
        log `Running remotely`
        clear IsLocal
        set Controller
            host property `host` of ControllerSpec
            user property `user` of ControllerSpec
            password property `password` of ControllerSpec
        put `RBR` into Title
    end
    put 1000 into WindowHeight
    put 582 into WindowWidth
    divide WindowHeight by 12 giving RoomHeight
    put 0 into Tick

    create Window title Title size WindowWidth WindowHeight

    put empty into Path
    clear Locked
    gosub to RefreshScreen

    show Window

    if not GraphicsStarted start graphics
    on tick
    begin
        put the ticker into Tick
        if Tick modulo 200 is 0 gosub to RefreshScreen
    end
    stop

RefreshScreen:
    if Locked return
    put empty into SystemData
    put 1 into N
    while SystemData is empty
    begin
        if N is greater than 1 log `Loading system files (` cat N cat `)`
        if IsLocal
        begin
            load Map from RamDisk cat `map`
            load CurrentProfile from RamDisk cat `profile`
            load SystemData from RamDisk cat `systemdata`
        end
        else
        begin
            load Map from Controller RamDisk cat `map`
            load CurrentProfile from Controller RamDisk cat `profile`
            load SystemData from Controller RamDisk cat `systemdata`
        end
        put json SystemData into SystemData
        or begin
            log SystemData
            log `Can't convert SystemData to JSON`
        end
        if SystemData is empty wait 1 second
        increment N
    end
    put json Map into Map
    put the value of CurrentProfile into CurrentProfile
    put property `profiles` of Map into Profiles
    put element CurrentProfile of Profiles into Profile
    put property `rooms` of Profile into Rooms
    set the elements of Room to the count of Rooms
    set the elements of RoomData to the count of Rooms
    set the elements of ModeButton to the count of Rooms
    set the elements of ToolsButton to the count of Rooms

    clear Window
!    log Rooms
    put 0 into R
    while R is less than the count of Rooms
    begin
        put element R of Rooms into RoomSpec
!        log RoomSpec
        put property `name` of RoomSpec into Name
        if SystemData has property Name
        begin
            put property Name of SystemData into RoomData
            set property `timestamp` of RoomSpec to property `timestamp` of RoomData
            if RoomData has property `temperature`
                set property `temperature` of RoomSpec to property `temperature` of RoomData
            else set property `temperature` of RoomSpec to `0`
            if RoomData has property `relay`
                set property `relay` of RoomSpec to property `relay` of RoomData
            else set property `relay` of RoomSpec to `off`
        end
        else
        begin
            set property `temperature` of RoomSpec to `0`
            set property `relay` of RoomSpec to `off`
        end
        gosub to CreateRoom
        increment R
    end
    set attribute `system name` of Window to property `name` of Map
    set attribute `profile` of Window to property `name` of Profile

    attach Banner to element `banner` of Window
    attach Hamburger to element `hamburger` of Banner
    on click Hamburger go to ShowMainMenu

    attach NameAndProfiles to element `profiles` of Window
    attach Popout to element `popout` of Window
    return

ReadError:
    put Tick into T
    divide T by 100
    log `Read failure at ` cat T
    return

CreateRoom:
!    log `Create ` cat Name cat `, mode ` cat Mode
    index Room to R
    create Room
        spec RoomSpec
        height RoomHeight
        index R
    add Room to Window
!    log Room
    index ModeButton to R
    attach ModeButton to element `mode` of Room
    on click ModeButton go to HandleMode
    index ToolsButton to R
    attach ToolsButton to element `tools` of Room
    on click ToolsButton go to HandleTools
    return

ShowMainMenu:
    put json `[]` into Choices
    append `Set the system name` to Choices
    append `Set the request relay` to Choices
    append `Add a room` to Choices
    append empty to Choices
    append `Exit Application` to Choices
    append empty to Choices
    append `Cancel` to Choices

    select Choice from menu `Main Menu` with Choices
    log Choice
    if Choice is element 0 of Choices go to SetSystemName
    if Choice is element 1 of Choices go to SetRequestRelay
    if Choice is element 2 of Choices go to AddRoom
    if Choice is element 4 of Choices exit
    if Choice is element 6 of Choices stop
    stop

SetSystemName:
    run `systemName.ecs` as Module with Window and NameAndProfiles and Request
    if Request is empty stop
    gosub to SendRequest
    stop

SetRequestRelay:
    create Panel type QVBoxLayout
    create Layout type QHBoxLayout
    add Layout to Panel
    create Label text `Type the name of the request relay:`
    add Label to Layout
    create Input size 30
    set the width of Input to 200
    if Map has property `request` set the text of Input to property `request` of Map
    else set the text of Input to empty
    add Input to Layout
    add Panel to Popout
    set Locked
    show Popout
    set attribute `color` of Input to `#c00`
    create keyboard type line with Input in Window
    set attribute `color` of Input to `black`
    hide Popout
    clear Locked
    put json `{}` into Request
    set property `action` of Request to `request`
    set property `request` of Request to Input
    log Request
    gosub to SendRequest
    stop

AddRoom:
    put `{"name": "Unnamed", "sensor": "", "relays": [], "mode": "off", "target": 20, `
        cat `"events": [{"until": "07:00", "temp": 15}], "relayType":"none", "protect": "no", "relay": "off"}`
        into ThisRoom
    append json ThisRoom to Rooms
    put json `{}` into Request
    set property `action` of Request to `rooms`
    set property `rooms` of Request to Rooms
    gosub to SendRequest
    stop

!   Handle a click on one of the Mode buttons
HandleMode:
    put json `{}` into Data
    put attribute `index` of ModeButton into R
    index Room to R
    put element R of Rooms into RoomSpec
    put property `mode` of RoomSpec into Mode
    get Result from ModeDialog with RoomSpec
    set property `target` of Data to property `target` of RoomSpec
!    log property `name` of RoomSpec cat `: ` cat Result
    put json `{}` into Request
    if Result is empty stop
    else if Result is `timed`
    begin
        set property `mode` of Request to `timed`
        gosub to SetMode
    end
    else if Result is `off`
    begin
        set property `mode` of Request to `off`
        gosub to SetMode
    end
    else if Result is `on`
    begin
        set property `mode` of Request to `on`
        set property `target` of Request to property `target` of Data
        gosub to SetMode
    end
    else if left 5 of Result is `boost`
    begin
        set property `mode` of Request to `boost`
        put from 6 of Result into Value
        put left 5 of Result into Result
		set property `boost` of Request to `B` cat Value
        set property `target` of Request to property `target` of Data
        gosub to SetMode
    end
    else if Result is `advance`
    begin
        set property `mode` of Request to `timed`
        put property `advance` of RoomSpec into Advance
        if Advance is `-` set property `advance` of Request to `A`
        else set property `advance` of Request to `C`
        gosub to SetMode
    end
    stop

SetMode:
    set property `action` of Request to `mode`
    set property `roomnumber` of Request to R
    log `Save ` cat Request
    go to SendRequest

HandleTools:
    put attribute `index` of ToolsButton into RoomIndex
    index Room to RoomIndex
    put attribute `name` of Room into Name
    put json `[]` into Choices
    append `Move ` cat Name cat ` up` to Choices
    append `Move ` cat Name cat ` down` to Choices
    append `Show info for ` cat Name to Choices
    append `Edit room name` to Choices
    append `Edit device parameters` to Choices
    append `Edit timing schedule` to Choices
    append `Delete ` cat Name to Choices
    append empty to Choices
    append `Cancel` to Choices

    put the count of Rooms into R
    decrement R
    put json `[]` into ChoicesShown
    if RoomIndex is 0 append element 1 of Choices to ChoicesShown
    else if RoomIndex is R append element 0 of Choices to ChoicesShown
    else
    begin
        append element 0 of Choices to ChoicesShown
        append element 1 of Choices to ChoicesShown
    end
    put 2 into C
    while C is less than the count of Choices
    begin
        append element C of Choices to ChoicesShown
        increment C
    end

    select Choice from menu `Tools Menu` with ChoicesShown
    log Choice
    put json `{}` into Request
    if Choice is element 0 of Choices go to MoveRoomUp
    if Choice is element 1 of Choices go to MoveRoomDown
    if Choice is element 2 of Choices go to ShowInfo
    if Choice is element 3 of Choices go to EditRoomName
    if Choice is element 4 of Choices go to EditDeviceParams
    if Choice is element 5 of Choices go to EditSchedule
    if Choice is element 6 of Choices go to DeleteRoom
    if Choice is element 8 of Choices stop

MoveRoomUp:
    put element RoomIndex of Rooms into ThisRoom
    take 1 from RoomIndex
    put element RoomIndex of Rooms into ThatRoom
    set element RoomIndex of Rooms to ThisRoom
    add 1 to RoomIndex
    set element RoomIndex of Rooms to ThatRoom
    set property `action` of Request to `rooms`
    set property `rooms` of Request to Rooms
    gosub to SendRequest
    stop

MoveRoomDown:
    put element RoomIndex of Rooms into ThisRoom
    add 1 to RoomIndex
    put element RoomIndex of Rooms into ThatRoom
    set element RoomIndex of Rooms to ThisRoom
    take 1 from RoomIndex
    set element RoomIndex of Rooms to ThatRoom
    set property `action` of Request to `rooms`
    set property `rooms` of Request to Rooms
    gosub to SendRequest
    stop

ShowInfo:
    set Locked
    put property Name of SystemData into RoomSpec
    create Panel type QVBoxLayout
    create Label text `-- ` cat Name cat ` Sensor --`
    add Label to Panel
    put the value of property `timestamp` of RoomSpec into Timestamp
    multiply Timestamp by 1000
    put property `temperature` of RoomSpec into Temperature
    put `Last reading: ` cat datime Timestamp into Text
    put Text cat newline cat `Temperature: ` cat Temperature cat `ºC` into Text
    create Label text Text
    add Label to Panel
    if RoomSpec has property `responses`
    begin
        put property `responses` of RoomSpec into Responses
        put `-- ` cat Name cat ` Relay` into Text
        if the count of Responses is greater than 1 put Text cat `s` into Text
        put Text cat ` --` into Text
        create Label text Text
        add Label to Panel
        put 0 into N
        while N is less than the count of Responses
        begin
            put element N of Responses into Response
            if Response has property `state` put `State: ` cat property `state` of Response into Text
            else put empty into Text
            if Response has property `uptime`
            begin
                put the value of property `uptime` of Response into Uptime
                divide Uptime by 3600 giving HH
                put Uptime modulo 3600 into MM
                divide MM by 60
                put Uptime modulo 60 into SS
                if HH is less than 10 put `0` cat HH into HH
                if MM is less than 10 put `0` cat MM into MM
                if SS is less than 10 put `0` cat SS into SS
                put Text cat newline cat `Uptime: ` cat HH cat `:` cat MM cat `:` cat SS into Text
            end
            if Text is not empty
            begin
                create Label text Text
                add Label to Panel
            end
            increment N
        end
    end
    create OKButton text `OK`
    add OKButton to Panel
    on click OKButton
    begin
        hide Popout
        clear Locked
    end
    add Panel to Popout
    show Popout
    stop

EditRoomName:
    put `Type the room name:` into Prompt
    put Name into Value
    gosub to GetSingleItem
    put json `{}` into Request
    set property `action` of Request to `roomname`
    set property `roomnumber` of Request to RoomIndex
    set property `name` of Request to Input
    log Request
    gosub to SendRequest
    stop

EditDeviceParams:
    put json `[]` into Choices
    append `Sensor` to Choices
    append `Relay(s)` to Choices
    append `Other...` to Choices
    append empty to Choices
    append `Cancel` to Choices

    select Choice from menu `Device Menu` with Choices
    log Choice
    put json `{}` into Request
    if Choice is element 0 of Choices go to EditSensor
    if Choice is element 1 of Choices go to EditRelays
    if Choice is element 2 of Choices go to EditOther
    if Choice is element 4 of Choices stop
    stop

EditSensor:
    put `Type the sensor identifier:` into Prompt
    put property Name of SystemData into RoomSpec
    put property `sensor` of RoomSpec into Value
    gosub to GetSingleItem
stop
    put json `{}` into Request
    set property `action` of Request to `roomname`
    set property `roomnumber` of Request to RoomIndex
    set property `name` of Request to Input
    log Request
    gosub to SendRequest
    stop

EditRelays:
    stop

EditOther:
    stop

EditSchedule:
    stop

DeleteRoom:
    create Dialog on Window
        type confirm
        prompt `Are you sure you want to delete ` cat Name cat `?`
    show Dialog
    if not Dialog stop

    put json `[]` into NewRooms
    put 0 into R
    while R is less than RoomIndex
    begin
        append element R of Rooms to NewRooms
        increment R
    end
    add 1 to R
    while R is less than the count of Rooms
    begin
        append element R of Rooms to NewRooms
        increment R
    end
    set property `action` of Request to `rooms`
    set property `rooms` of Request to NewRooms
    gosub to SendRequest
    stop

GetSingleItem:
    create Panel type QVBoxLayout
    create Layout type QHBoxLayout
    add Layout to Panel
    create Label text Prompt
    add Label to Layout
    create Input size 30
    set the width of Input to 200
    set the text of Input to Value
    add Input to Layout
    add Panel to Popout
    set Locked
    show Popout
    set attribute `color` of Input to `#c00`
    create keyboard type line with Input in Window
    set attribute `color` of Input to `black`
    hide Popout
    clear Locked
    return

SendRequest:
! log Request
    if IsLocal save stringify Request to RamDisk cat `request`
    else save stringify Request to Controller RamDisk cat `request`
    return
