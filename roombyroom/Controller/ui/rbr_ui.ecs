!   rbr-ui.ecs

    script RBR_UI

    use graphics
    
    import plugin RBR_UI from rbr_ui.py

    window HostWindow
    rbrwin Window
    room Room
    element Banner
    element NameAndProfiles
    button Hamburger
    button ModeButton
    button ToolsButton
    modeDialog ModeDialog
    dialog Dialog
    layout Panel
    layout Layout
    label Label
    lineinput HostInput
    lineinput UserInput
    lineinput PasswordInput
    pushbutton OKButton
    pushbutton CancelButton
    ssh Controller
    module Module
    variable ControllerSpec
    variable GraphicsStarted
    variable HomeDir
    variable Path
    variable IsLocal
    variable RamDisk
    variable WindowWidth
    variable WindowHeight
    variable RoomHeight
    variable Title
    variable Name
    variable Mode
    variable Map
    variable CurrentProfile
    variable Profiles
    variable Profile
    variable SystemData
    variable Rooms
    variable RoomSpec
    variable RoomData
    variable Choices
    variable Choice
    variable Advance
    variable Tick
    variable Result
    variable Request
    variable Data
    variable Value
    variable R
    variable T

!   debug step

    init graphics

    clear GraphicsStarted
    put trim system `echo $HOME` into HomeDir
    put `/mnt/data/` into RamDisk
    if file RamDisk cat `map` does not exist
    begin
        put HomeDir cat `/.controller.json` into Path
        if file Path exists load ControllerSpec from Path
        else
        begin
            create Panel type QVBoxLayout
            create Layout type QHBoxLayout
            add Layout to Panel
            create Label text `Host:`
            add Label to Layout
            create HostInput size 30
            set the width of HostInput to 200
            add HostInput to Layout
            create Layout type QHBoxLayout
            add Layout to Panel
            create Label text `User:`
            add Label to Layout
            create UserInput size 30
            set the width of UserInput to 200
            add UserInput to Layout
            create Layout type QHBoxLayout
            add Layout to Panel
            create Label text `Password:`
            add Label to Layout
            create PasswordInput size 30
            set the width of PasswordInput to 200
            add PasswordInput to Layout
            create Layout type QHBoxLayout
            add Layout to Panel
            create OKButton text `OK`
            on click OKButton
            begin
                if HostInput is empty stop
                if UserInput is empty stop
                if PasswordInput is empty stop
                put json `{}` into ControllerSpec
                set property `host` of ControllerSpec to HostInput
                set property `user` of ControllerSpec to UserInput
                set property `password` of ControllerSpec to PasswordInput
                save ControllerSpec to Path
                fork to Start
                wait 10 seconds
                close HostWindow
            end
            add OKButton to Layout
            create CancelButton text `Cancel`
            on click CancelButton exit
            add CancelButton to Layout
            create HostWindow title `Host Details` size 300 200
            set the layout of HostWindow to Panel
            show HostWindow
            start graphics
            set GraphicsStarted
            stop
        end
    end

Start:
    if file RamDisk cat `map` exists
    begin
        log `Running locally`
        set IsLocal
        put empty into Title
    end
    else
    begin
        log `Running remotely`
        clear IsLocal
        set Controller
            host property `host` of ControllerSpec
            user property `user` of ControllerSpec
            password property `password` of ControllerSpec
        put `RBR` into Title
    end
    put 1000 into WindowHeight
    put 582 into WindowWidth
    divide WindowHeight by 12 giving RoomHeight
    put 0 into Tick

    create Window title Title size WindowWidth WindowHeight

    put empty into Path
    gosub to Refresh

    show Window

    if not GraphicsStarted start graphics
    on tick
    begin
        put the ticker into Tick
        if Tick modulo 200 is 0 gosub to Refresh
    end
    stop

Refresh:

    if IsLocal
    begin
        load Map from RamDisk cat `map`
        load CurrentProfile from RamDisk cat `profile`
        load SystemData from RamDisk cat `systemdata`
    end
    else
    begin
        load Map from Controller RamDisk cat `map`
        load CurrentProfile from Controller RamDisk cat `profile`
        load SystemData from Controller RamDisk cat `systemdata`
    end
    put json Map into Map
    put the value of CurrentProfile into CurrentProfile
    put json SystemData into SystemData
    put property `profiles` of Map into Profiles
    put element CurrentProfile of Profiles into Profile
    put property `rooms` of Profile into Rooms
    set the elements of Room to the count of Rooms
    set the elements of RoomData to the count of Rooms
    set the elements of ModeButton to the count of Rooms
    set the elements of ToolsButton to the count of Rooms

    clear Window
    put 0 into R
    while R is less than the count of Rooms
    begin
        put element R of Rooms into RoomSpec
!        log RoomSpec
        put property `name` of RoomSpec into Name
        put property Name of SystemData into RoomData
        if RoomData has property `temperature`
            set property `temperature` of RoomSpec to property `temperature` of RoomData
        else set property `temperature` of RoomSpec to `0`
        set property `relay` of RoomSpec to property `relay` of RoomData
        gosub to CreateRoom
        increment R
    end
    set attribute `system name` of Window to property `name` of Map
    set attribute `profile` of Window to property `name` of Profile

    attach Banner to element `banner` of Window
    attach Hamburger to element `hamburger` of Banner
    on click Hamburger go to ShowMainMenu

    attach NameAndProfiles to element `profiles` of Window
    return

ReadError:
    put Tick into T
    divide T by 100
    log `Read failure at ` cat T
    return

CreateRoom:
!    log `Create ` cat Name cat `, mode ` cat Mode
    index Room to R
    create Room
        spec RoomSpec
        height RoomHeight
        index R
    add Room to Window
!    log Room
    index ModeButton to R
    attach ModeButton to element `mode` of Room
    on click ModeButton go to HandleMode
    index ToolsButton to R
    attach ToolsButton to element `tools` of Room
    on click ToolsButton go to HandleTools
    return

ShowMainMenu:
    put json `[]` into Choices
    append `Set the system name` to Choices
    append `Set the request relay` to Choices
    append `Power off` to Choices
    append `Exit Application` to Choices
    append `Cancel` to Choices

    select Choice from menu `Main Menu` with Choices
    log Choice
    if Choice is element 0 of Choices go to SetSystemName
    if Choice is element 1 of Choices go to SetRequestRelay
    if Choice is element 2 of Choices go to Nothing
    if Choice is element 3 of Choices exit
    if Choice is element 4 of Choices stop
    stop

Nothing:
    stop

SetSystemName:
    run `systemName.ecs` as Module with Window and NameAndProfiles and Request
    if Request is empty stop
    log Request
    if IsLocal save stringify Request to RamDisk cat `request`
    else save stringify Request to Controller RamDisk cat `request`
    stop

!   Handle a click on one of the Mode buttons
HandleMode:
    put json `{}` into Data
    put attribute `index` of ModeButton into R
    index Room to R
    put element R of Rooms into RoomSpec
    put property `mode` of RoomSpec into Mode
    set property `target` of Data to property `target` of RoomSpec
    get Result from ModeDialog with RoomSpec
!    log property `name` of RoomSpec cat `: ` cat Result
    put json `{}` into Request
    if Result is `timed` gosub to SetMode
    else if Result is `off` gosub to SetMode
    else if Result is `on`
    begin
        set property `mode` of Request to `on`
        set property `target` of Request to property `target` of Data
        gosub to SetMode
    end
    else if left 5 of Result is `boost`
    begin
        set property `mode` of Request to `boost`
        put from 6 of Result into Value
        put left 5 of Result into Result
		set property `boost` of Request to `B` cat Value
        set property `target` of Request to property `target` of Data
        gosub to SetMode
    end
    else if Result is `advance`
    begin
        set property `mode` of Request to `timed`
        put property `advance` of RoomSpec into Advance
        if Advance is `-` set property `advance` of Request to `A`
        else set property `advance` of Request to `C`
        gosub to SetMode
    end
    stop

SetRequestRelay:
    create Layout type QVBoxLayout
    create Dialog on Window
        title `Request Relay name:`
        type lineinput
    show Dialog
    stop

SetMode:
    set property `action` of Request to `mode`
    set property `roomnumber` of Request to R
    log `Save ` cat Request
    if IsLocal save stringify Request to RamDisk cat `request`
    else save stringify Request to Controller RamDisk cat `request`
    return

HandleTools:
    put attribute `index` of ToolsButton into R
    index Room to R
    put attribute `name` of Room into Name
    put json `[]` into Choices
    append `Move ` cat Name cat ` up` to Choices
    append `Move ` cat Name cat ` down` to Choices
    append `Show info for ` cat Name to Choices
    append `Edit ` cat Name to Choices
    append `Delete ` cat Name to Choices
    append `Cancel` to Choices

    select Choice from menu `Tools Menu` with Choices
    log Choice
    if Choice is element 0 of Choices go to Nothing
    if Choice is element 1 of Choices go to Nothing
    if Choice is element 2 of Choices go to Nothing
    if Choice is element 3 of Choices go to Nothing
    if Choice is element 4 of Choices go to Nothing
    if Choice is element 5 of Choices stop
    stop
