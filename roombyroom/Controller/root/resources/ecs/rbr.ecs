!	Room By Room

	script RoomByRoom

    div Body
    div MainPanel
    div Mask
    div BannerMask
    div TitleMask
    div SystemTitlePanel
    div SystemNamePanel
    div OuterPanel
    div StatisticsPanel
    div RoomNamePanel
    div RoomTempPanel
    div RoomToolsButton
    div ModePanel
    div ModeHolder
    div TargetTemp
    div BoostName
    div DialogPanel
    div DialogTitle
    div DialogText
    div SystemMAC
    div SystemPassword
    div ModeText
    div ModeInfo
    div Alive
    div Banner
    div AdvanceIndicator
    div StatusPanel
    div Snowflake
    div BatteryIndicator
    div Date
    input Input
    img StatisticsIcon
    img CalendarIcon
    img Hamburger
    img ModeIcon
    button ProfilesButton
    button AddButton
    button GetSysParamsButton
    button GetSystemNameButton
    button GetRequestButton
    button OKButton
    button CancelButton
    button BackupButton
    button RestoreButton
    button DialogButton1
    button DialogButton2
    module ProfileModule
    module Storyteller
    module DebugModule
    variable Mobile
    variable Systems
    variable System
    variable Server
    variable Revisit
    variable Demo
    variable Webson
    variable ModeScript
    variable Script
    variable MAC
    variable Password
    variable SystemName
    variable CurrentProfile
    variable Profiles
    variable Profile
    variable RequestIP
    variable Map
    variable Map2
    variable Rooms
    variable RoomSpec
    variable RoomCount
    variable RoomIndex
    variable ClickIndex
    variable Redraw
    variable Refresh
    variable Sensor
    variable Sensors
    variable SensorIP
    variable SensorSpec
    variable DemoSensors
    variable Relays
    variable RelayState
    variable RelayType
    variable Temperature
    variable Battery
    variable StaticData
    variable RoomData
    variable RoomName
    variable Timestamp
    variable IsAlive
    variable Args
    variable Events
    variable Event
    variable Event2
    variable Blocked
    variable Mode
    variable Flag
    variable Error
    variable SID
    variable TID
    variable Result
    variable Finish
    variable Name
    variable DateFormat
    variable BannerClicks
    variable BannerClickGap
    variable MapErrorCount
    variable RestErrorCount
    variable IsSimulator
    variable Item
    variable Status
    variable Elapsed
    variable Boost
    variable Advance
    variable Now
    variable UntilTime
    variable UntilTemp
    variable Keys
    variable Key
    variable FH
    variable FM
    variable E
    variable F
    variable H
    variable M
    variable N
    variable R

    ! Webson specs
    variable MainScreenWebson
    variable MainMenuWebson
    variable RoomWebson
    variable RoomToolsMenuWebson
    variable GetSysParamsWebson
    variable GetNameWebson
    variable GetRequestWebson
    variable TimedWebson
    variable BoostWebson
    variable OnWebson
    variable OffWebson
    variable NoneWebson
    variable DialogWebson

!    debug step

	on key
    begin
    	if the key is `m` print MAC
    	if the key is `p` print Password
    	if the key is `M` print Map
    	if the key is `S`
        begin
        	put the json keys of Sensors into Keys
            print Keys
            put 0 into N
            while N is less than the json count of Keys
            begin
            	put element N of Keys into Key
                put property Key of Sensors into Sensor
                put property `timestamp` of Sensor into Timestamp
                set DateFormat to object
                set property `mode` of DateFormat to `date`
                set property `locale` of DateFormat to `en-EN`
                set Item to object
                set property `year` of Item to `numeric`
                set property `month` of Item to `long`
                set property `day` of Item to `numeric`
                set property `hour` of Item to `numeric`
                set property `minute` of Item to `numeric`
				set property `hour12` of Item to false
                set property `options` of DateFormat to Item
                set property `timestamp` of Sensor to Timestamp cat `: ` cat Timestamp format DateFormat
                set property Key of Sensors to Sensor
            	add 1 to N
            end
        	print Sensors
        end
    end

	fork to Main
    wait 5 seconds
    every 5 seconds
    begin
    	if not Blocked go to Start
    	wait 1
    	if not Blocked go to Start
    	wait 1
    	if not Blocked go to Start
    	wait 1
    	if not Blocked go to Start
    	wait 1
    	if not Blocked go to Start
    end
    stop

Main:
    put 0 into MapErrorCount
	clear Blocked
    set Redraw
    put empty into ModeScript

    set the title to `RBR`

    clear Mobile
    if mobile
        if portrait set Mobile

    get StaticData from storage as `StaticData`
    if StaticData is empty put `{}` into StaticData
!    print StaticData

    ! Get the URL of the REST server
  	json parse url the location as Args
    put property `url` of Args into Server
    put the position of the last `/` in Server into N
    add 1 to N
    put left N of Server into Server
    put Server cat `resources/php/rest.php` into Server
    put Server into storage as `server`

	create Body
    if Mobile
    begin
    	set style `width` of Body to `100%`
    end
    else
    begin
        put the height of the window into N
        multiply N by 9
        divide N by 16
    	set style `width` of Body to N
        set style `margin` of Body to `0 auto`
        set style `border` of Body to `1px solid lightgray`
    end
!    put empty into storage as `Systems`
!    put empty into storage as `MAC`

!	First get the various layout scripts

    put empty into MainMenuWebson
    put empty into RoomWebson
    put empty into RoomToolsMenuWebson
    put empty into GetSysParamsWebson
    put empty into GetNameWebson
    put empty into GetRequestWebson
    put empty into TimedWebson
    put empty into OnWebson
    put empty into OffWebson
    put empty into NoneWebson
    put empty into DialogWebson

!	Render the main screen layout
    rest get MainScreenWebson from `/resources/webson/rbr.json?v=` cat now
    	or go to AbandonShip
	render MainScreenWebson in Body
    attach Mask to `top-level-mask`
    attach BannerMask to `banner-mask`
    attach TitleMask to `title-mask`
    attach Banner to `rbr-banner`
    attach SystemTitlePanel to `system-title`
    attach SystemNamePanel to `system-name`
    attach MainPanel to `mainpanel`
    attach OuterPanel to `outerpanel`
    attach StatisticsPanel to `statisticspanel`
    attach Alive to `alive`
    attach ModePanel to `mode-panel`
    attach StatusPanel to `rbr-status`
    attach StatisticsIcon to `statistics-icon`
    attach CalendarIcon to `calendar-icon`
    attach Date to `calendar-date`
    attach Hamburger to `hamburger-icon`
    attach ProfilesButton to `profile-button`

!	Start the debug module
    if DebugModule is not running
    begin
        rest get Script from `/resources/ecs/debug.ecs?v=` cat now
        run Script with Mobile and Body and Map and Sensors and MAC and Password as DebugModule
    	put 0 into BannerClicks
    end
    on click Banner
    begin
    	add 1 to BannerClicks
    	if BannerClicks is 1 add 1000 to the millisecond giving BannerClickGap
        else if BannerClicks is 2
        begin
        	if the millisecond is less than BannerClickGap
            begin
            	send `Run` to DebugModule
    			put 0 into BannerClicks
            end
            else
            begin
            	put 1 into BannerClicks
                add 1000 to the millisecond giving BannerClickGap
            end
        end
    end

    put empty into Map2

!	Set up the statistics and hamburger icons
    on click StatisticsIcon
    begin
    	if Storyteller is running
        begin
        	close Storyteller
            set style `display` of OuterPanel to `block`
            clear MainPanel
            clear Blocked
            set Redraw
        end
        else if not Blocked go to Statistics
    end
    on click Hamburger
    begin
    	if Storyteller is running
        begin
        	close Storyteller
            set style `display` of OuterPanel to `block`
            clear MainPanel
            clear Blocked
            set Redraw
        end
        else if not Blocked go to ShowMenu
    end

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!	Main start point
Start:
    gosub to Unmask
	put 0 into RestErrorCount
    send `Count` to DebugModule

    put `MAC` into MAC
    put `Password` into Password
    put `MAC` into storage as `MAC`
    put `Password` into storage as `password`

	if not Redraw go to GetMap
    clear MainPanel
    put 0 into RoomCount
    clear Error

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!	Get the map
GetMap:
	set Blocked
    if Demo get Map from storage as `map`
    else
    begin
    	rest get Map from Server cat `/map?v=` cat now
        	or begin
        		print `Server not responding; using local data`
        		get Map from storage as `map`
            	continue
        	end
        if Map is empty stop
        put Map into storage as `map`
    end
    if Map is not Map2 set Redraw
    put Map into Map2

    put property `name` of Map into SystemName
    if SystemName is empty
    begin
        get SystemName from storage as `SystemName`
        if SystemName is empty go to GetSystemName
        else
        begin
            set property `name` of Map to SystemName
            fork to PostMap
            set Redraw
        end
    end
    get Systems from storage as `Systems`
    if Systems is empty
    begin
    	put `{}` into Systems
    	put Systems into storage as `Systems`
    end

    if property `calendar` of Map is `on` set style `display` of CalendarIcon to `block`
    else set style `display` of CalendarIcon to `none`
    set the content of Date to the day number

!    if Demo put Map into storage as `map`

	! Show the system
    set the content of SystemNamePanel to SystemName
    on click ProfilesButton go to DoProfiles

	! Get the current sensor values
	if Demo put DemoSensors into Sensors
    else rest get Sensors from Server cat `/sensors/` cat MAC cat `?v=` cat now
        or go to HandleRestError

   	put property `profiles` of Map into Profiles
	put property `actual` of Sensors into CurrentProfile
    if `` cat CurrentProfile is empty put property `profile` of Map into CurrentProfile
    put element CurrentProfile of Profiles into Profile
    put property `name` of Profile into Name
    set the text of ProfilesButton to `Profile: ` cat Name
    put property `rooms` of Profile into Rooms

    put the json count of Rooms into R
    if R is RoomCount clear Redraw
    else
    begin
    	put R into RoomCount
        set Redraw
    end
    if Redraw
    begin
    	clear MainPanel
    	set Refresh
    end

    set the elements of Mode to RoomCount
    set the elements of ModeHolder to RoomCount
    set the elements of ModeIcon to RoomCount
    set the elements of RoomSpec to RoomCount
    set the elements of RoomNamePanel to RoomCount
    set the elements of RoomTempPanel to RoomCount
    set the elements of RoomToolsButton to RoomCount
    set the elements of SensorSpec to RoomCount
    set the elements of RelayState to RoomCount
    set the elements of ModeHolder to RoomCount
    set the elements of ModeIcon to RoomCount
    set the elements of ModeText to RoomCount
    set the elements of AdvanceIndicator to RoomCount
    set the elements of Snowflake to RoomCount
    set the elements of BatteryIndicator to RoomCount

	! Draw a row for each room
    put 0 into RoomIndex
    while RoomIndex is less than RoomCount
    begin
        index Mode to RoomIndex
        index ModeHolder to RoomIndex
        index ModeIcon to RoomIndex
        index RoomSpec to RoomIndex
        index RelayState to RoomIndex
        index SensorSpec to RoomIndex
        index RoomNamePanel to RoomIndex
        index RoomTempPanel to RoomIndex
        index RoomToolsButton to RoomIndex
        index ModeText to RoomIndex
        index AdvanceIndicator to RoomIndex
        index Snowflake to RoomIndex
        index BatteryIndicator to RoomIndex

        put property `room-` cat RoomIndex of StaticData into RoomData
        if RoomData is empty
        begin
        	put `{}` into RoomData
            set property `alive` of RoomData to `true`
        end

        if Redraw
        begin
            ! Render the Webson spec for a room
            if RoomWebson is empty
    			rest get RoomWebson from `/resources/webson/room.json?v=` cat now
            		or go to HandleRestError
        	put RoomWebson into Webson
        	replace `/ROOM/` with RoomIndex in Webson
        	render Webson in MainPanel
        end

		! Attach to various elements of the display
        attach ModeHolder to `room-` cat RoomIndex cat `-mode-holder` or
        begin
        	print `Can't find room-` cat RoomIndex cat `-mode-holder`
        	stop
        end
        attach RoomNamePanel to `room-name-` cat RoomIndex or
        begin
        	print `Can't find room-name-` cat RoomIndex
        	stop
        end
		attach RoomTempPanel to `room-temp-` cat RoomIndex or
        begin
        	print `Can't find room-temp-` cat RoomIndex
        	stop
        end
        attach RoomToolsButton to `room-tools-` cat RoomIndex or
        begin
        	print `Can't find room-tools-` cat RoomIndex
        	stop
        end
        attach Snowflake to `room-snowflake-` cat RoomIndex or
        begin
        	print `Can't find room-snowflake-` cat RoomIndex
        	stop
        end
        attach BatteryIndicator to `room-battery-` cat RoomIndex or
        begin
        	print `Can't find room-battery-` cat RoomIndex
        	stop
        end

		! Set the room name
		put element RoomIndex of Rooms into RoomSpec
        put property `name` of RoomSpec into RoomName
        set the content of RoomNamePanel to RoomName

		if property `protect` of Sensors is SensorIP
        	set style `display` of Snowflake to `block`
        else
        	set style `display` of Snowflake to `none`

        put property `relayType` of RoomSpec into RelayType
        if RelayType is `Simulator` set IsSimulator
        else clear IsSimulator

        ! Show the current temperature and relay state
        put `` cat property `sensor` of RoomSpec into SensorIP
        if SensorIP is not empty
        begin
            put property SensorIP of Sensors into SensorSpec
            put property `timestamp` of SensorSpec into Timestamp
            put the timestamp into Now
            if Timestamp is not empty
            begin
            	take Timestamp from Now giving Elapsed
				if Elapsed is greater than 3660
                begin
                	if property `alive` of RoomData is `true`
                    begin
                    	alert `The sensor for ` cat RoomName cat ` has not reported recently. `
                        	cat `If it doesn't come back by itself, power it down then re-power it.`
                    	set property `alive` of RoomData to `false`
                    end
                end
                else set property `alive` of RoomData to `true`
            end
            set property `room-` cat RoomIndex of StaticData to RoomData
            put property `alive` of RoomData into IsAlive
            if Demo put `true` into IsAlive
            if IsAlive is `true`
            begin
                put property `temperature` of SensorSpec into Temperature
                put property `battery` of SensorSpec into Battery
            	set the content of RoomTempPanel to Temperature cat `&deg;C`
            	put property `relay` of SensorSpec into RelayState
            	if RelayState is `on` set style `background` of RoomTempPanel to `red`
            	else set style `background` of RoomTempPanel to `blue`
                if Battery is less than 15
                begin
                	set attribute `src` of BatteryIndicator to `resources/icon/battery-empty.png`
                    set style `visibility` of BatteryIndicator to `visible`
                end
                else if Battery is less than 20
                begin
                	set attribute `src` of BatteryIndicator to `resources/icon/battery-low.png`
                    set style `visibility` of BatteryIndicator to `visible`
                end
                else set style `visibility` of BatteryIndicator to `hidden`
            end
            else
            begin
            	set the content of RoomTempPanel to `--.-&deg;C`
                set style `background` of RoomTempPanel to `blue`
            end
        end

		! Deal with the Protect flag
		if property `protect` of Sensors is SensorIP
        begin
        	set style `display` of Snowflake to `block`
        end
        else
        	set style `display` of Snowflake to `none`

        ! Get the mode
        put property `mode` of RoomSpec into Mode
        if Mode is empty put `off` into Mode

        ! Show the mode indicator
        put property `relays` of RoomSpec into Relays
        put the json count of Relays into Relays
        if Demo put 1 into Relays
        if Relays is 0
        begin
            clear ModeHolder
            if NoneWebson is empty
            rest get NoneWebson from `/resources/webson/none.json?v=` cat now
            	or go to HandleRestError
            put NoneWebson into Webson
            replace `/ROOM/` with RoomIndex in Webson
            render Webson in ModeHolder
        end
        else
        begin
            clear ModeHolder
        	if Mode is `timed`
            begin
                if TimedWebson is empty
                	rest get TimedWebson from `/resources/webson/timed.json?v=` cat now
                		or go to HandleRestError
                put TimedWebson into Webson
            end
            else if Mode is `boost`
            begin
                if BoostWebson is empty
                	rest get BoostWebson from `/resources/webson/boost.json?v=` cat now
                		or go to HandleRestError
                put BoostWebson into Webson
            end
            else if Mode is `on`
            begin
                if OnWebson is empty
                	rest get OnWebson from `/resources/webson/on.json?v=` cat now
                		or go to HandleRestError
                put OnWebson into Webson
            end
            else if Mode is `off`
            begin
                if OffWebson is empty
                	rest get OffWebson from `/resources/webson/off.json?v=` cat now
                		or go to HandleRestError
                put OffWebson into Webson
            end
            replace `/ROOM/` with RoomIndex in Webson
            render Webson in ModeHolder
    	    attach ModeText to `room-` cat RoomIndex cat `-mode-text`
	        attach ModeInfo to `room-` cat RoomIndex cat `-mode-info`
            if SensorSpec is not empty
            begin
                put property `status` of SensorSpec into Status
                if Status is `Good`
                    set style `color` of ModeText to `black`
                else
                    set style `color` of ModeText to `red`
            end
        	if Mode is `timed`
            begin
            	if SensorSpec is not empty
                begin
                    put `` cat property `advance` of SensorSpec into Advance
                    if Status is `Good`
                    begin
                        if Advance is not empty
                        begin
                            if Advance is not `-`
                            begin
                                if Advance is not `C`
                                begin
                                    set style `color` of ModeText to `green`
                                    attach AdvanceIndicator to `room-` cat RoomIndex cat `-advance-indicator`
                                    set style `display` of AdvanceIndicator to `block`
                                end
                            end
                            else set style `color` of ModeText to `black`
                        end
                    end
                end

                put property `events` of RoomSpec into Events
                divide now by 60 giving N
                put N modulo 24*60 into N
                divide N by 60 giving H
                put N modulo 60 into M
                put 0 into E
                while E is less than the json count of Events
                begin
                    put element E of Events into Event
                    put property `until` of Event into UntilTime
                    put property `temp` of Event into UntilTemp
                    split UntilTime on `:` giving Finish
                    if Advance is not `-`
                    begin
                    	add 1 to E giving F
                        if F is not less than the json count of Events put 0 into F
                        put element F of Events into Event2
                        put property `until` of Event2 into UntilTime
                    	put property `temp` of Event2 into UntilTemp
                    end
                    index Finish to 0
                    put the value of Finish into FH
                    if FH is 0 put 24 into FH
                    if H is less than FH
                    begin
                        set the content of ModeInfo to UntilTemp
                            cat `&deg;C->` cat UntilTime
                        go to HandleClicks
                    end
                    else if H is FH
                    begin
                        index Finish to 1
                        put the value of Finish into FM
                        if M is less than FM
                        begin
                            set the content of ModeInfo to UntilTemp
                                cat `&deg;C->` cat UntilTime
                            go to HandleClicks
                        end
                    end
                    add 1 to E
                end
                put element 0 of Events into Event
                put property `until` of Event into Finish
                put property `temp` of Event into Temperature
                set the content of ModeInfo to Temperature cat `&deg;C->` cat Finish
            end
            else if Mode is `boost`
            begin
                attach BoostName to `room-` cat RoomIndex cat `-mode-info`
                put the timestamp into Now
                put property `boost` of RoomSpec into Boost
                if char 0 of Boost is not `B`
                begin
                    take Now from Boost
                    divide Boost by 60
                    add 1 to Boost
                    if Boost is 1 set the content of BoostName to Boost cat ` min`
                    else set the content of BoostName to Boost cat ` mins`
                end
            end
            else if Mode is `on`
            begin
                attach TargetTemp to `room-` cat RoomIndex cat `-mode-info`
                set the content of TargetTemp to property `target` of RoomSpec cat `&deg;C`
            end
            else if Mode is `off`
            begin
            end
		end

	HandleClicks:
		! Handle a click on the row hamburger
        on click RoomToolsButton
        begin
        	if Blocked stop
        	put the index of RoomToolsButton into ClickIndex
            go to RoomTools
        end

	    ! Handle a click on a mode button
        if Relays is not 0
        begin
            attach ModeIcon to `room-` cat RoomIndex cat `-mode-icon`
            on click ModeIcon
            begin
                if Blocked stop
                set Blocked
                gosub to MaskScreen
                on click ProfilesButton begin end
                put the index of ModeIcon into ClickIndex
                if ModeScript is empty
                    rest get ModeScript from `/resources/ecs/mode.ecs?v=` cat now
            			or go to HandleRestError
                run ModeScript with MainPanel
                    and ModePanel
                    and ModeIcon
                    and Mode
                    and Map
                    and ClickIndex
                    and Sensors
                    and Demo
                    and Result
                go to ProcessResult
            end
        end
        add 1 to RoomIndex
    end

    if property `status` of Sensors
    begin
    	set the content of StatusPanel to property `status` of Sensors
        set style `display` of StatusPanel to `block`
    end
    else set style `display` of StatusPanel to `none`

    put StaticData into storage as `StaticData`

    clear Refresh
    clear Redraw
    clear Blocked

    set style `background` of Alive to `#fee`
    wait 50 ticks
    set style `background` of Alive to `#228`
	stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!	Process the result of running another module
ProcessResult:
    if Result is `Changed`
    begin
    	clear MainPanel
        fork to PostMap
        set Redraw
        clear Blocked
        stop
    end
    if Result is `Redraw` set Redraw
    clear Blocked
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!	Reset the MAC address and password
Reset:
	put empty into storage as `MAC`
    put empty into storage as `password`
    clear Blocked
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!	Deal with the main hamburger menu
ShowMenu:
	set Blocked
    gosub to MaskMainPanel
    wait 20 ticks
	clear MainPanel
    if MainMenuWebson is empty
    	rest get MainMenuWebson from `/resources/webson/mainmenu.json?v=` cat now
            or go to HandleRestError
    render MainMenuWebson in MainPanel
    attach AddButton to `button-add`
    attach GetSysParamsButton to `button-getsysparams`
    attach BackupButton to `button-backup`
    attach RestoreButton to `button-restore`
    attach CancelButton to `button-cancel`

    on click GetSysParamsButton go to GetSystemParameters

    on click AddButton
    begin
        rest get RoomSpec from `/resources/json/newroomspec.json?v=` cat now
            or go to HandleRestError
        if MAC is `DEMO` set property `sensor` of RoomSpec to the json count of Rooms
        append RoomSpec to Rooms
		gosub to CopyRoomsToMap
        fork to PostMap
    	clear MainPanel
        clear Blocked
        set Redraw
    	stop
    end

    on click BackupButton go to Backup

    on click RestoreButton go to Restore

    on click CancelButton
    begin
    	clear MainPanel
        clear Blocked
        set Redraw
        stop
    end

	stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 	Get system parameters
GetSystemParameters:
	set Blocked
    clear MainPanel
    if GetSysParamsWebson is empty
        rest get GetSysParamsWebson from `/resources/webson/getsysparams.json?v=` cat now
            or go to HandleRestError
    render GetSysParamsWebson in MainPanel

    attach SystemMAC to `system-mac`
    attach SystemPassword to `system-password`
    attach GetSystemNameButton to `button-getname`
    attach GetRequestButton to `button-getrequest`
    attach CancelButton to `button-cancel`

    set the content of SystemMAC to `MAC: ` cat MAC
    set the content of SystemPassword to `Password: ` cat Password
    set style `display` of SystemMAC to `none`
    set style `display` of SystemPassword to `none`

    on click GetSystemNameButton
    begin
    	set Flag
        go to GetSystemName
    end

    on click GetRequestButton
    begin
    	set Flag
        go to GetRequestRelay
    end

    on click CancelButton
    begin
    	clear MainPanel
        clear Blocked
        set Redraw
        stop
    end
	stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 	Ask the user for the system name
GetSystemName:
	set Blocked
    clear MainPanel
    if GetNameWebson is empty
        rest get GetNameWebson from `/resources/webson/getname.json?v=` cat now
            or go to HandleRestError
    render GetNameWebson in MainPanel
    attach Input to `getname-input`
    attach OKButton to `getname-ok`
    attach CancelButton to `getname-cancel`
    if Flag set the content of Input to SystemName
    else set style `display` of CancelButton to `none`
    on click OKButton
    begin
        put property SystemName of Systems into System
        if the content of Input is not empty
        begin
            json delete property SystemName of Systems
    		put the content of Input into SystemName
            set property SystemName of Systems to System
        	put Systems into storage as `Systems`
        	put SystemName into storage as `SystemName`
            clear MainPanel
            set Redraw
            clear Blocked
            set property `name` of Map to SystemName
            go to PostMap
        end
    end
    on click CancelButton
    begin
    	clear MainPanel
        clear Blocked
        set Redraw
        stop
    end
	stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 	Ask the user for the system request relay
GetRequestRelay:
	set Blocked
    clear MainPanel
    if GetRequestWebson is empty
        rest get GetRequestWebson from `/resources/webson/getrequest.json?v=` cat now
            or go to HandleRestError
    render GetRequestWebson in MainPanel
    attach Input to `getrequest-input`
    attach OKButton to `getrequest-ok`
    attach CancelButton to `getrequest-cancel`
    put property `request` of Map into RequestIP
    if RequestIP is `undefined` put empty into RequestIP
    if Flag set the content of Input to RequestIP
    else set style `display` of CancelButton to `none`
    on click OKButton
    begin
    	put the content of Input into RequestIP
        clear MainPanel
        set Redraw
        clear Blocked
        set property `request` of Map to RequestIP
        go to PostMap
    end
    on click CancelButton
    begin
    	clear MainPanel
        clear Blocked
        set Redraw
        stop
    end
	stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!	Copy the current room set to the map
CopyRoomsToMap:
    put property `profiles` of Map into Profiles
    put element CurrentProfile of Profiles into Profile
    set property `rooms` of Profile to Rooms
    set element CurrentProfile of Profiles to Profile
    set property `profiles` of Map to Profiles
	return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!	Deal with profiles
DoProfiles:
	if ProfileModule is running stop
	set Blocked
    gosub to MaskMainPanel
!    wait 20 ticks
    put empty into Result
    rest get Script from `/resources/ecs/profiles.ecs?v=` cat now
    run Script with MainPanel and Map and Result as ProfileModule
    go to ProcessResult

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 	The room tools
RoomTools:
	set Blocked
    gosub to MaskMainPanel
    wait 20 ticks ! to allow things to complete before running the editor!
	clear MainPanel
    if RoomToolsMenuWebson is empty
    	rest get RoomToolsMenuWebson from `/resources/webson/roomtoolsmenu.json?v=` cat now
            or go to HandleRestError
    render RoomToolsMenuWebson in MainPanel
    put empty into Result
    rest get Script from `/resources/ecs/roomtools.ecs?v=` cat now
    run Script with MainPanel and Map and Sensors and ClickIndex and Result
    go to ProcessResult

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 	Backup the system
Backup:
	set Blocked
    attach DialogPanel to `dialog-panel`
    if DialogWebson is empty
    	rest get DialogWebson from `/resources/webson/dialog-confirm.json?v=` cat now
            or go to HandleRestError
    render DialogWebson in DialogPanel
    attach DialogTitle to `dialog-title`
    attach DialogText to `dialog-text`
    attach DialogButton1 to `dialog-button1`
    attach DialogButton2 to `dialog-button2`
    set the content of DialogTitle to `System Backup`
    set the content of DialogText to `Tap "Save" to save your current `
    	cat `system configuration. Any previous backup will be over-written.`
    set the content of DialogButton1 to `Save`
    set the content of DialogButton2 to `Cancel`
    on click DialogButton1
    begin
    	clear DialogPanel
    	if not Demo
        begin
        	rest post Map to Server cat `/backup`
            	or go to HandleRestError
        end
        set Redraw
        clear Blocked
    end
    on click DialogButton2
    begin
    	clear DialogPanel
        set Redraw
        clear Blocked
    end
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 	Restore from backup
Restore:
	set Blocked
    attach DialogPanel to `dialog-panel`
    if DialogWebson is empty
    	rest get DialogWebson from `/resources/webson/dialog-confirm.json?v=` cat now
            or go to HandleRestError
    render DialogWebson in DialogPanel
    attach DialogTitle to `dialog-title`
    attach DialogText to `dialog-text`
    attach DialogButton1 to `dialog-button1`
    attach DialogButton2 to `dialog-button2`
    set the content of DialogTitle to `System Restore`
    set the content of DialogText to `Tap "Restore" to restore your system configuration `
    	cat `from the saved backup (if any).`
    set the content of DialogButton1 to `Restore`
    set the content of DialogButton2 to `Cancel`
    on click DialogButton1
    begin
    	clear DialogPanel
        if not Demo
        begin
        	rest post to Server cat `/restore`
            	or go to HandleRestError
        end
        set Redraw
        clear Blocked
    end
    on click DialogButton2
    begin
    	clear DialogPanel
        set Redraw
        clear Blocked
    end
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 	Post the map to the server
PostMap:
   	rest post Map to Server cat `/map`
   	or begin
        add 1 to MapErrorCount
        if MapErrorCount is greater than 5
        begin
         	alert `A series of network errors have occurred.`
           		cat newline cat `Some functionality may not be available.`
            put 0 into MapErrorCount
        end
        continue
	end
	stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 	Run the statistics module
Statistics:
	set Blocked
    set style `display` of OuterPanel to `none`
    set style `display` of StatisticsPanel to `block`
    rest get Script from `/resources/ecs/statistics.ecs?v=` cat now
        or go to HandleRestError
    run Script with StatisticsPanel and Map
    set style `display` of OuterPanel to `block`
    set style `display` of StatisticsPanel to `none`
    clear MainPanel
    clear Blocked
    set Redraw
	stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 	Mask the screen
MaskScreen:
	set style `display` of Mask to `block`
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 	Mask the main panel
MaskMainPanel:
	set style `display` of BannerMask to `block`
    set style `display` of TitleMask to `block`
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 	Unmask everything
Unmask:
	set style `display` of Mask to `none`
	set style `display` of BannerMask to `none`
    set style `display` of TitleMask to `none`
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 	Handle a REST error
HandleRestError:
    print `A REST error occurred`
	add 1 to RestErrorCount
    if RestErrorCount is less than 10
    begin
        clear MainPanel
    	clear DialogPanel
        set Redraw
        clear Blocked
        set Redraw
    	stop
    end

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 	Warn the user and abandon this run
AbandonShip:
	alert `An error has occurred while communicating with the web server.`
    	cat newline cat `Please refresh this browser page to restart.`
    exit
