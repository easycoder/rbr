!    RBR Controller script for Python/EasyCoder

!   This script manages the local hardware - sensors and relays - to act
!   in accordance with the rules in the system map.

    script RBR

    file File
    variable Path
    variable Server
    variable Version
    variable RepeatCount
    variable CurrentProfile
    variable Profiles
    variable Profile
    variable Map
    variable MapObject
    variable NewMap
    variable Rooms
    variable Room
    variable RoomNumber
    variable RoomName
    variable Mode
    variable Sensors
    variable Sensor
    variable Relays
    variable Relay
    variable RelayType
    variable Temperature
    variable SensorData
    variable RoomCount
    variable NPeriods
    variable Events
    variable Event
    variable Until
    variable Target
    variable SensorValues
    variable Now
    variable Boundary
    variable Turn
    variable MAC
    variable RegData
    variable Password
    variable Advance
    variable Boost
    variable RequestCount
    variable RequestIP
    variable Value
    variable Email
    variable TPPassword
    variable Response
    variable SimulatorData
    variable RA
    variable E
    variable N
    variable R

!    debug step

    put `https://rbrheating.com/resources/php/rest.php` into Server
    put `.` into Path

    put 0 into RepeatCount
    put empty into Password

    ! Read the MAC address
    open File Path cat `/mac` for reading
    read MAC from File
    close File
    put trim MAC into MAC
    print `MAC: ` cat MAC

    ! Read the saved password
    if file Path cat `/password` exists
    begin
        open File Path cat `/password` for reading
        read Password from File
        close File
    end
    else put empty into Password
    print `Saved Password: ` cat Password

    ! Ask the server for our password
    get RegData from Server cat `/register/` cat MAC cat `?v=` cat now
    put json RegData into RegData
    put property `password` of RegData into Value

    ! Check if passwords match
    if Password is not Value
    begin
        open File Path cat `/password` for writing
        write Value to File
        close File
        print `Password: ` cat Value
    end

    ! Make sure there's an 'advance' directory
    put Path cat `/advance` into Advance
    if file Advance exists begin end
    else create directory Advance

!   See if we have the latest system software
    if file Path cat `/version` exists
    begin
        open File Path cat `/version` for reading
        read Version from File
        put trim Version into Version
        close File
    end
    else put 1 into Version
    put property `version` of RegData into Value
    print `Current version: ` cat Version
    if Value is not Version
    begin
        print `Installing update from ` cat Version cat ` to ` cat Value
        system `sh update.sh`
        open File Path cat `/version` for writing
        write Value to File
        close File
        print `Updated to version ` cat Value
        wait 5
        exit
    end

Start:
    ! If there's a map, load it; otherwise request it from the server
    if file Path cat `/map` exists
    begin
        open File Path cat `/map` for reading
        read Map from File
        close File
    end
    else
    begin
        get Map from Server cat `/map/` cat MAC cat `?v=` cat now
        open File Path cat `/map` for writing
        write trim Map to File
        close File
    end
!    print Map

ProcessMap:
    put json `{}` into Sensors
    if Map is empty
    begin
        print `Error: no map found`
        exit
    end

    put json Map into MapObject
    put property `profiles` of MapObject into Profiles
    put property `profile` of MapObject into CurrentProfile
    put element CurrentProfile of Profiles into Profile
    put property `rooms` of Profile into Rooms
    print `Profile: ` cat property `name` of Profile
    put json `{}` into SensorData
    set property `status` of SensorData to ``
    put the count of Rooms into RoomCount
    if RoomCount is 0
    begin
        print `There are no rooms in this profile`
    end
    else
    begin
        print `Processing ` cat RoomCount cat ` rooms`
        put json `{}` into SimulatorData
        put 0 into RequestCount
        put 0 into RoomNumber
        while RoomNumber is less than RoomCount
        begin
            put element RoomNumber of Rooms into Room
            gosub to ProcessRoom
            add 1 to RoomNumber
        end
        put property `request` of MapObject into RequestIP
        if RequestIP is not empty
        begin
            if RequestCount is 0 put `off` into Turn
            else put `on` into Turn
            post to `http://` cat RequestIP cat `/relay/0?turn=` cat Turn giving Response
            if Response is `Error` set property `status` of SensorData to `Request relay did not respond`
        end
        print SimulatorData
        open File Path cat `/simulator` for writing
        write stringify SimulatorData to File
    end
    gosub to UpdateMap

!   Confirm the message
    if Password is not empty post to Server cat `/confirm/` cat MAC cat `/` cat Password

    ! Do all the above 6 times
    add 1 to RepeatCount
    print `Repeat ` cat RepeatCount cat ` done`
    if RepeatCount is less than 6
    begin
        wait 9 seconds
        go to Start
    end

    exit

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Update the map
UpdateMap:
!   Send sensors and update the map from the website
!    open File Path cat `/password` for reading
!    read Password from File
    close File
    put stringify SensorData into Sensors
    get NewMap from Server cat `/update/` cat MAC cat `/` cat Sensors cat `?v=` cat now
    if NewMap is not Map
    begin
        put json NewMap into MapObject
        put property `profiles` of MapObject into Profiles
        put property `profile` of MapObject into CurrentProfile
        put element CurrentProfile of Profiles into Profile
        put property `rooms` of Profile into Rooms
        if the count of Rooms is not 0
        begin
            open File Path cat `/map` for writing
            write NewMap to File
            close File
            print `Map updated`
            put NewMap into Map
        end
        else print `Bad map received from server`
        go to ProcessMap
    end
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Process a single room
ProcessRoom:
    put property `name` of Room into RoomName
    put property `sensor` of Room into Sensor
    put property `relayType` of Room into RelayType
    if RelayType is empty put `` into RelayType
    if Sensor is empty return
    if file Path cat `/sensors/` cat Sensor cat `.txt` exists go to PR2
    return

PR2:
    ! Make sure there's an 'advance' file
    if file Path cat `/advance/` cat Sensor exists
    begin
        open File Path cat `/advance/` cat Sensor for reading
        read Advance from File
        close File
    end
    else
    begin
        open File Path cat `/advance/` cat Sensor for writing
        put `-` into Advance
        write Advance to File
        close File
    end
    open File Path cat `/sensors/` cat Sensor cat `.txt` for reading
    read SensorValues from File
    close File
    put json SensorValues into SensorValues

    put property `temperature` of SensorValues into Temperature
    put property `relays` of Room into Relays
    put float Temperature into Temperature
    put property `events` of Room into Events
    take 1 from the length of Events giving NPeriods

    ! Deal with mode requests
    put property `mode` of Room into Mode

    if Mode is `boost`
    begin
        put `` cat property `boost` of Room into Boost
        if left 1 of Boost is `B`
        begin
            put from 1 of Boost into Target
            multiply Target by 60
            add the timestamp to Target
            if Password is not empty
            begin
                print Server cat `/boost/` cat MAC cat `/` cat Password cat `/`
                    cat RoomNumber cat `/` cat Target
                post to Server cat `/boost/` cat MAC cat `/` cat Password cat `/`
                    cat RoomNumber cat `/` cat Target giving Response
                if Response is not empty print `Error sending boost data`
            end
        end
        else
        begin
            ! Boost contains the timestamp of the target (the end of the boost period).
            put now into N
            take integer Boost from N
            if N is greater than 0
            begin
                post to Server cat `/boost/` cat MAC cat `/` cat Password cat `/`
                    cat RoomNumber cat `/0`
                put property `prevmode` of Room into Mode
            end
        end
        ! Use the target setting for 'on' mode
        put float property `target` of Room into Target
        if Temperature is less than Target go to TurnOn
        go to TurnOff
    end

    if Mode is `off`
    begin
        put `off` into Mode
        go to TurnOff
    end

    if Mode is `on`
    begin
        put `on` into Mode
        put float property `target` of Room into Target
        if Temperature is less than Target go to TurnOn
        go to TurnOff
    end

    ! Timed mode. Check each of the events
    put `timed` into Mode
    put 0 into E
    while E is less than the length of Events
    begin
        put element E of Events into Event
        put property `until` of Event into Until
        put the timestamp of Until format `%H:%M` into Boundary
        put now into Now
        ! Check if this is the right time segment
        if Now is less than Boundary
        begin
            ! We've found the current time segment
            go to CheckAdvance
        end
        else
        begin
            if E is NPeriods
            begin
                ! We've gone past the last time segment so use the first
                put 0 into E
                go to CheckAdvance
            end
        end
        add 1 to E
    end
    return

!   This is called in 'timed' mode to deal with the Advance setting
CheckAdvance:
    put property `advance` of Room into RA
    if RA is empty put `-` into RA
    if RA is `A` go to SetAdvance
    else if RA is `C` go to ClearAdvance

    ! Check if we're past the end of the advance period
    if Advance is not `-`
    begin
        if Advance is not `` cat E go to ClearAdvance
    end
    go to TurnOnOrOff

SetAdvance:
    put `` cat E into Advance
    go to AcknowlegeAdvance

ClearAdvance:
    put `-` into Advance

AcknowlegeAdvance:
    ! Acknowledge the request by resetting the request flag
    post to Server cat `/advance/` cat MAC cat `/` cat Password cat `/` cat RoomNumber
    ! Write the new advance state to the sensor spec
    open File Path cat `/advance/` cat Sensor for writing
    write Advance to File
    close File
    go to TurnOnOrOff

TurnOnOrOff:
    if Advance is not `-`
    begin
        add 1 to E
        if E is greater than NPeriods put 0 into E
    end
    put element E of Events into Event
    put float property `temp` of Event into Target
    if float Temperature is less than Target go to TurnOn

TurnOff:
    put `off` into Turn
    go to SetRelays

TurnOn:
    if RelayType is not `Simulator` add 1 to RequestCount
    put `on` into Turn

SetRelays:
    print Sensor cat ` ` cat RoomName cat ` ` cat Turn
    if RelayType is empty put `Shelly One` into RelayType
    put 0 into R
    while R is less than the count of Relays
    begin
        set property `status` of SensorValues to `Good`
        if RelayType is `Simulator` put `-` into Relay
        else put element R of Relays into Relay
        if Relay is not empty
        begin
            if RelayType is `Shelly One`
            begin
!                print `http://` cat Relay cat `/relay/0?turn=` cat Turn
                post to `http://` cat Relay cat `/relay/0?turn=` cat Turn giving Response
                if Response is `Error`
                begin
                    set property `status` of SensorValues to `Fail`
                    set property `status` of SensorData to `No response from ` cat RoomName
                end
            end
            else if RelayType is `TP-Link P100`
            begin
                put property `p100Email` of Room into Email
                put property `p100Password` of Room into TPPassword
                relay Relay Email TPPassword Turn
            end
            else if RelayType is `Simulator`
            begin
                set property Sensor of SimulatorData to Turn
            end
        end
        add 1 to R
    end
    set property `relay` of SensorValues to Turn
    set property `advance` of SensorValues to Advance
    set property Sensor of SensorData to SensorValues
    return
