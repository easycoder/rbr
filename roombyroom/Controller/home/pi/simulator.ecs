!   RBR hardware simulator

    script Simulator

    text Exit
    ellipse Relay
    text Temperature
    file File
    spec Graphson
    spec Room
    variable Controller
    variable Interval
    variable Args
    variable TickCount
    variable NRooms
    variable Temp
    variable Min
    variable Max
    variable Rate
    variable P
    variable R
    variable Diff
    variable Integer
    variable Fraction
    variable Message
    variable Response
    variable RelayState

    debug step

    put `http://192.168.0.97:5555` into Controller
    put 100 into Interval

    create screen
        size 600 800
        fill `#ffc`

    open File `/home/graham/Dropbox/Code/VisualStudio/EasyCoder/easycoder.github.io/py/json/background.json` for reading
    read Graphson from File
    close File
    render Graphson

    attach Exit to `exit`
    on click Exit
    begin
        close screen
        exit
    end

    open File `/home/graham/Dropbox/Code/VisualStudio/EasyCoder/easycoder.github.io/py/json/row.json` for reading
    read Graphson from File
    close File

    gosub to SetupRooms
    set the elements of Relay to NRooms
    set the elements of Temperature to NRooms
    put 0 into R
    while R is less than NRooms
    begin
        index Relay to R
        index Temperature to R
        attach Relay to `relay` cat R
        attach Temperature to `temp` cat R
        add 1 to R
    end

    ! Scaling for the arithmetic
    put 0 into R
    while R is less than NRooms
    begin
        index Room to R
        put property `args` of Room into Args
        put property `#temp` of Args into Temp
        multiply Temp by 1000
        set property `#temp` of Args to Temp
        put property `#min` of Args into Min
        multiply Min by 1000
        set property `#min` of Args to Min
        put property `#max` of Args into Max
        multiply Max by 1000
        set property `#max` of Args to Max
        set property `args` of Room to Args
        add 1 to R
    end

    put 0 into TickCount
    on tick go to Tick

    show screen
    exit

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Handle background tasks here. It's called regularly from the tkinter event loop
Tick:
    add 1 to TickCount
    if TickCount modulo Interval is not 0 stop

    ! Adjust temperature
    ! Temperature values are held as the actual value multiplied by 100,
    ! so the arithmetic is operating with 2 decimal places.
    put empty into Message
    put 0 into TickCount
    put 0 into R
    while R is less than NRooms
    begin
        index Room to R
        ! Compute the new temperature
        put property `args` of Room into Args
        put property `#temp` of Args into Temp
        put property `#min` of Args into Min
        put property `#max` of Args into Max
        put property `#rate` of Args into Rate
        take Min from Temp giving Diff
        divide Diff by 10
        multiply Diff by Rate
        divide Diff by 1000
        put property `relay` of Args into RelayState
        if RelayState is empty put `off` into RelayState
        if RelayState is `on` add Diff to Temp
        else take Diff from Temp
        set property `#temp` of Args to Temp

        ! Update the displayed value
        divide Temp by 1000 giving Integer
        put integer Integer into Integer
        put Temp modulo 1000 into Fraction
        divide Fraction by 10
        put Fraction modulo 10 into Fraction
        put integer Fraction into Fraction
        set property `$temp` of Args to Integer cat `.` cat Fraction
        set property `args` of Room to Args
        index Temperature to R
        set the text of Temperature to Integer cat `.` cat Fraction

        ! Build the message for the server
        if R is not 0 put Message cat `,` into Message
        put Message cat Integer cat `.` cat Fraction into Message
        add 1 to R
    end
    get Response from Controller cat `/sim/` cat Message
    if Response is empty stop
    put json Response into Response
!    print Response
    put 0 into R
    while R is less than NRooms
    begin
        index Room to R
        index Relay to R
        put `sim.` cat R into P
        put property P of Response into P
        put property `args` of Room into Args
        set property `relay` of Args to P
        set property `args` of Room to Args
        if P is `on`
        begin
            set the background of Relay to `red`
        end
        else 
        begin
            set the background of Relay to `blue`
        end
        add 1 to R
    end
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Set up a selection of rooms
SetupRooms:
    put 5 into NRooms
    set the elements of Room to NRooms

    index Room to 0
    put json `{}` into Room
    set property `spec` of Room to Graphson
    put json `{}` into Args
    set property `$id` of Args to `row0`
    set property `$id-temp` of Args to `temp0`
    set property `$id-relay` of Args to `relay0`
    set property `$id-info` of Args to `info0`
    set property `$name` of Args to `Kitchen`
    set property `$temp` of Args to `20.0`
    set property `$top` of Args to 0
    set property `#min` of Args to 15
    set property `#max` of Args to 25
    set property `#temp` of Args to 20
    set property `#rate` of Args to 10
    set property `args` of Room to Args
    render Room

    index Room to 1
    put json `{}` into Room
    set property `spec` of Room to Graphson
    put json `{}` into Args
    set property `$id` of Args to `row1`
    set property `$id-temp` of Args to `temp1`
    set property `$id-relay` of Args to `relay1`
    set property `$id-info` of Args to `info1`
    set property `$name` of Args to `Living room`
    set property `$temp` of Args to `23.0`
    set property `$top` of Args to 110
    set property `#min` of Args to 15
    set property `#max` of Args to 25
    set property `#temp` of Args to 23
    set property `#rate` of Args to 10
    set property `args` of Room to Args
    render Room

    index Room to 2
    put json `{}` into Room
    set property `spec` of Room to Graphson
    put json `{}` into Args
    set property `$id` of Args to `row2`
    set property `$id-temp` of Args to `temp2`
    set property `$id-relay` of Args to `relay2`
    set property `$id-info` of Args to `info2`
    set property `$name` of Args to `Hall`
    set property `$temp` of Args to `19.0`
    set property `$top` of Args to 220
    set property `#min` of Args to 15
    set property `#max` of Args to 25
    set property `#temp` of Args to 19
    set property `#rate` of Args to 10
    set property `args` of Room to Args
    render Room

    index Room to 3
    put json `{}` into Room
    set property `spec` of Room to Graphson
    put json `{}` into Args
    set property `$id` of Args to `row3`
    set property `$id-temp` of Args to `temp3`
    set property `$id-relay` of Args to `relay3`
    set property `$id-info` of Args to `info3`
    set property `$name` of Args to `Bedroom 1`
    set property `$temp` of Args to `21.0`
    set property `$top` of Args to 330
    set property `#min` of Args to 15
    set property `#max` of Args to 25
    set property `#temp` of Args to 21
    set property `#rate` of Args to 10
    set property `args` of Room to Args
    render Room

    index Room to 4
    put json `{}` into Room
    set property `spec` of Room to Graphson
    put json `{}` into Args
    set property `$id` of Args to `row4`
    set property `$id-temp` of Args to `temp4`
    set property `$id-relay` of Args to `relay4`
    set property `$id-info` of Args to `info4`
    set property `$name` of Args to `Bedroom 2`
    set property `$temp` of Args to `20.0`
    set property `$top` of Args to 440
    set property `#min` of Args to 15
    set property `#max` of Args to 25
    set property `#temp` of Args to 20
    set property `#rate` of Args to 5
    set property `args` of Room to Args
    render Room
    return
