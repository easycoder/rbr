!    RBR Controller script for Python/EasyCoder

!   This script manages the local hardware - sensors and relays - to act
!   in accordance with the rules in the system map.

    script RBR

    file File
    variable RamDisk
    variable LocalServer
    variable RBRServer
    variable RegData
    variable Version
    variable RepeatCount
    variable CurrentProfile
    variable Profiles
    variable Profile
    variable ProfileName
    variable SystemName
    variable Map
    variable MapObject
    variable Rooms
    variable Room
    variable RoomNumber
    variable RoomName
    variable RoomIndices
    variable Mode
    variable Sensors
    variable Sensor
    variable Relays
    variable Relay
    variable RelayType
    variable RelayData
    variable Responses
    variable DirectResponses
    variable BadResponses
    variable ExtenderSuspect
    variable Response
    variable Timestamp
    variable Temperature
    variable SensorData
    variable RoomCount
    variable RoomNames
    variable RoomSSIDs
    variable RoomStatus
    variable NPeriods
    variable Events
    variable Event
    variable Until
    variable Target
    variable SensorValues
    variable Now
    variable Boundary
    variable OnOff
    variable MAC
    variable Password
    variable Advance
    variable Boost
    variable NetworkErrors
    variable Request
    variable RequestCount
    variable RequestIP
    variable IPAddresses
    variable RoomStatusFileName
    variable Result
    variable Action
    variable Items
    variable Item
    variable Key
    variable Keys
    variable Extender
    variable ExtenderRunning
    variable RelayIp
    variable Value
    variable Changed
    variable Confirm
    variable Calendar
    variable Day
    variable WarningMessages
    variable WarningMessage
    variable HaltRequested
    variable TPEmail
    variable TPPassword
    variable RA
    variable E
    variable EE
    variable N
    variable P
    variable R
    variable T
    variable W
    variable P1
    variable T1
    variable T2
    variable TS

!    debug step

    if file `/mnt/data/halt` exists
    begin
        print `Waiting for halt`
        exit
    end

    put the timestamp into Timestamp
    multiply Timestamp by 1000 giving T
    print datime T format `%b %d %H:%M:%S`

    put `http://172.24.1` into LocalServer

    open File `server.txt` for reading
    read RBRServer from File
    close File
    put trim RBRServer into RBRServer
    put RBRServer cat `/resources/php/rest.php` into RBRServer

    put `/mnt/data` into RamDisk

    if file `/mnt/data/network-errors` exists
    begin
        open File `/mnt/data/network-errors` for reading
        read NetworkErrors from File
        close File
        if NetworkErrors is empty put 0 into NetworkErrors
        put the value of NetworkErrors into NetworkErrors
        print NetworkErrors cat ` network errors`
    end
    else
    begin
        put -1 into NetworkErrors
        gosub to NetworkError
    end
    if NetworkErrors is greater than 100
    begin
        print `Too many errors (` cat NetworkErrors cat `) - rebooting`
        gosub to ClearNetworkErrors
        go to RestartSystemController
    end

    put 0 into RepeatCount
    open File `mac` for reading
    read MAC from File
    close File
    put trim MAC into MAC
    print `MAC: ` cat MAC

    clear Changed
    clear Confirm
    clear HaltRequested

    ! Test if the local server is running. If not restart it.
    get Result from LocalServer cat `.1/resources/php/rest.php/ping`
    or go to RestartSystemController
    if Result is not `OK` go to RestartSystemController
    print `Local server is running`

    ! Check if we've had a recent poll from the extender
    clear ExtenderRunning
    if file `/mnt/data/response-ts` exists
    begin
        set ExtenderRunning
        open File `/mnt/data/response-ts` for reading
        read T from File
        close File
        put the value of T into T
        take T from Timestamp giving T
        if T is greater than 600
        begin
            print `No recent requests from extender`
            post to LocalServer cat `.1/resources/php/rest.php/delresponse`
        end
    end

    ! Ask the server for our password and other data
    put empty into RegData
    get RegData from RBRServer cat `/register/` cat MAC cat `?v=` cat now
    or begin
        print `Server did not respond`
        gosub to NetworkError
        put empty into Password
        put 1 into Version
        go to SkipServerInteraction
    end
    gosub to ClearNetworkErrors
    print `Server ` cat RBRServer cat ` connected successfully`

    put json RegData into RegData
    put property `password` of RegData into Password
    print `Password: ` cat Password
    if property `reboot` of RegData is not empty go to RestartSystemController
    if property `update` of RegData is not empty
    begin
        system `sh update.sh`
        exit
    end

!   See if we have the latest system software
    if file `version` exists
    begin
        open File `version` for reading
        read Version from File
        put trim Version into Version
        close File
    end
    else
    begin
        put 1 into Version
        open File `version` for writing
        write `` cat Version to File
        close File
    end
    if Version is empty put 0 into Version
! print RegData
    put property `version` of RegData into Value
    print `Current version: ` cat Version
    if the value of Value is greater than the value of Version
    begin
        print `Installing update from ` cat Version cat ` to ` cat Value
        open File `/mnt/data/version` for writing
        write `` cat Value to File
        close File
        if Map is not empty
        begin
            open File `/mnt/data/map` for writing
            write Map to File
            close File
        end
    end

!   Continue here if we are not connected to the RBR web server
SkipServerInteraction:
    open File `/mnt/data/password` for writing
    write Password to File
    close File

!   Make sure there's an 'advance' directory
    put RamDisk cat `/advance` into Advance
    if file Advance exists begin end
    else create directory Advance

    put json `{}` into IPAddresses

Start:
    add 9 to now giving Timestamp
    ! Load the map
    if file `/mnt/data/map` exists
    begin
        open File `/mnt/data/map` for reading
        read Map from File
        close File
    end
    else put empty into Map
    if Map is empty
    begin
        ! Try to get the map from the RBR server
        print `Get the map from the server`
        get Map from RBRServer cat `/map/` cat MAC cat `?v=` cat now
        or begin
            put `{"profiles":[{"name":"Unnamed","rooms":[{"name":"Unnamed","sensor":"","relays":[""],"mode":"off","target":"0.0","events":[]}]}],"profile":0,"name":"New system"}` into Map
            gosub to NetworkError
        end
        gosub to ClearNetworkErrors
        open File `/mnt/data/map` for writing
        write Map to File
        close File
!        open File `backup` for writing
!        write Map to File
!        close File
    end
!    print Map

    put json Map into MapObject
    put property `profiles` of MapObject into Profiles
    put property `profile` of MapObject into CurrentProfile
    if `` cat CurrentProfile is empty put 0 into CurrentProfile

    put property `name` of MapObject into SystemName
    print SystemName

    ! If the Calendar is on, find which profile is active
    if property `calendar` of MapObject is `on`
    begin
        put property `calendar-data` of MapObject into Calendar
        if Calendar is empty put property `profile` of MapObject into CurrentProfile
        else
        begin
            ! Examine the data for today
            put the weekday into W
            put element W of Calendar into Day
            if stringify Day is not `{}` put property `day` cat W cat `-profile` of Day into ProfileName
            put 0 into P
            while P is less than the count of Profiles
            begin
                put element P of Profiles into Profile
                if property `name` of Profile is ProfileName
                begin
                    put P into CurrentProfile
                    go to S2
                end
                add 1 to P
            end
        end
    end

S2:
    put element CurrentProfile of Profiles into Profile
    print `Profile: ` cat property `name` of Profile

    put property `rooms` of Profile into Rooms
    if Password is empty go to SkipRequests

    ! Get the request, if any, from the user.
    if file `/mnt/data/request` exists
    begin
        open File `/mnt/data/request` for reading
        read Request from File
        close File
        ! Delete the request file
        post to LocalServer cat `.1/resources/php/rest.php/delreq`
    end
    else
    begin
        get Request from RBRServer cat `/request/` cat MAC cat `?v=` cat now
        or begin
            gosub to NetworkError
            stop
        end
    end
    gosub to ClearNetworkErrors
    if Request is not empty
    begin
 print `Request ` cat Request
        set Changed
        set Confirm
        put json Request into Request
        put property `action` of Request into Action
        if Action is `SystemName`
        begin
            set property `name` of MapObject to property `SystemName` of Request
        end
        else if Action is `map`
        begin
            put property `map` of Request into MapObject
            put stringify MapObject into Map
        end
        else if Action is `addroom`
        begin
            put property `spec` of Request into Room
            append Room to Rooms
            gosub to UpdateRooms
        end
        else if Action is `rooms`
        begin
            put property `rooms` of Request into Rooms
            gosub to UpdateRooms
        end
        else if Action is `backup`
        begin
            open File `backup` for writing
            write Map to File
            close File
        end
        else if Action is `restore`
        begin
            open File `backup` for reading
            read Map from File
            close File
            gosub to SaveMap
            put json Map into MapObject
        end
        else if Action is `profiles`
        begin
            put property `profiles` of Request into Profiles
            put property `profile` of Request into CurrentProfile
            set property `profiles` of MapObject to Profiles
            set property `profile` of MapObject to CurrentProfile
            set property `calendar` of MapObject to property `calendar` of Request
            set property `calendar-data` of MapObject to property `calendar-data` of Request
            put stringify MapObject into Map
            gosub to SaveMap
        end
        else if Action is `mode`
        begin
            put property `roomnumber` of Request into RoomNumber
            put element RoomNumber of Rooms into Room
            put property `name` of Room into RoomName
            put property `mode` of Request into Mode
            if Mode is `timed`
                set property `advance` of Room to property `advance` of Request
            else if Mode is `on`
            begin
                set property `target` of Room to property `target` of Request
            end
            else if Mode is `boost`
            begin
                set property `target` of Room to property `target` of Request
                if property `mode` of Room is not `boost`
                    set property `prevmode` of Room to property `mode` of Room
                set property `boost` of Room to property `boost` of Request
            end
            set property `mode` of Room to Mode
            gosub to UpdateRoom
        end
        else if Action is `profiles`
        begin
        end
        else if Action is `roomname`
        begin
            put property `roomnumber` of Request into RoomNumber
            put element RoomNumber of Rooms into Room
            set property `name` of Room to property `name` of Request
            gosub to UpdateRoom
        end
        else if Action is `roomdata`
        begin
            put property `roomnumber` of Request into RoomNumber
            put element RoomNumber of Rooms into Room
            put property `items` of Request into Items
            put the keys of Items into Keys
            put 0 into N
            while N is less than the count of Keys
            begin
                put element N of Keys into Key
                set property Key of Room to property Key of Items
                add 1 to N
            end
            gosub to UpdateRoom
        end
        else if Action is `config`
        begin
            set property `name` of MapObject to property `name` of Request
            set property `address` of MapObject to property `address` of Request
            set property `ssid` of MapObject to property `ssid` of Request
            set property `password` of MapObject to property `password` of Request
            set property `extenders` of MapObject to property `extenders` of Request
            put property `names` of Request into RoomNames
            put property `ssids` of Request into RoomSSIDs
            put element 0 of Profiles into Profile
            put property `rooms` of Profile into Rooms
            put 0 into R
            while R is less than the count of Rooms
            begin
                put element R of Rooms into Room
                set property `name` of Room to element R of RoomNames
                set property `ssid` of Room to element R of RoomSSIDs
                set element R of Rooms to Room
                add 1 to R
            end
            set property `rooms` of Profile to Rooms
            set element 0 of Profiles to Profile
            set property `profiles` of MapObject to Profiles
            put stringify MapObject into Map
            put element CurrentProfile of Profiles into Profile
            put property `rooms` of Profile into Rooms
        end
        else if Action is `periods`
        begin
            put property `roomnumber` of Request into RoomNumber
            put element RoomNumber of Rooms into Room
            set property `events` of Room to property `periods` of Request
            gosub to UpdateRoom
        end
        else if Action is `request`
        begin
            set property `request` of MapObject to property `request` of Request
        end
        else if Action is `halt`
        begin
            print `Request to halt the system`
            set HaltRequested
        end
    end

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Process the map
SkipRequests:
    if file RamDisk cat `/sensorData` exists
    begin
        open File RamDisk cat `/sensorData` for reading
        read Sensors from File
        close File
    end
    else put `{}` into Sensors

!   Process all the rooms
    put json `[]` into RelayData
    put json `{}` into SensorData
    put json `[]` into DirectResponses
    put json `{}` into RoomIndices
    set property `actual` of SensorData to CurrentProfile
    set property `status` of SensorData to ``
    put 0 into BadResponses
    put empty into WarningMessages
    put the count of Rooms into RoomCount
    if RoomCount is 0
    begin
        print `There are no rooms in this profile`
    end
    else
    begin
        print RoomCount cat ` rooms`
        put 0 into RequestCount
        put 0 into RoomNumber
        while RoomNumber is less than RoomCount
        begin
            put element RoomNumber of Rooms into Room
            put property `name` of Room into RoomName
            put property `sensor` of Room into Sensor
            put property `relayType` of Room into RelayType
            if RelayType is empty put `` into RelayType

            put `/mnt/data/rs` cat RoomNumber into RoomStatusFileName
            if file RoomStatusFileName exists
            begin
                open File RoomStatusFileName for reading
                read RoomStatus from File
                close File
                put json RoomStatus into RoomStatus
            end
            else
            begin
                put json `{}` into RoomStatus
                set property `ts` of RoomStatus to now
                set property `name` of RoomStatus to RoomName
                set property `sensor` of RoomStatus to Sensor
                set property `temp` of RoomStatus to 0
                open File RoomStatusFileName for writing
                write stringify RoomStatus to File
                write newline to File
                close File
            end

            gosub to ProcessRoom
            add 1 to RoomNumber
        end

        ! Deal with the request relay
        put property `request` of MapObject into RequestIP
! print `Request IP: ` cat RequestIP
        if RequestIP is not empty
        begin
            set property RelayIp of RoomIndices to `R`
            if RequestCount is 0 put `off` into OnOff
            else put `on` into OnOff
!            print `Request relay is ` cat OnOff
            put RequestIP into Extender
            split Extender on `/`
            if the elements of Extender is 2
            begin
                index Extender to 1
                put Extender into RelayIp
                set property RelayIp of IPAddresses to `Y`
                index Extender to 0
                put `r1` into RelayType     ! May need to allow a different type - 11/6/23
                put json `{}` into Item
                set property `extender` of Item to Extender
                set property `ip` of Item to RelayIp
                set property `type` of Item to RelayType
                set property `onoff` of Item to OnOff
                append Item to RelayData
            end
        end
    end

! print RelayData
    open File `/mnt/data/relayData` for writing
    write stringify RelayData to File
    close File

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Deal with the status flag
    clear ExtenderSuspect
    if file `/mnt/data/response` exists
    begin
        ! Get the extender responses; an array of 10 R1 relays
        open File `/mnt/data/response` for reading
        read Responses from File
        close File
    end
    else
    begin
        put empty into Responses
        set ExtenderSuspect
    end
!put empty into Responses
! print Responses
    if Responses is empty put `[]` into Responses
    put json Responses into Responses
    put json `[]` into Items
    ! Only keep items that are in the map
    put 0 into N
    while N is less than the count of Responses
    begin
        put element N of Responses into Response
        put property `ip` of Response into RelayIp
        put `` cat RelayIp into RelayIp
        ! Look for this IP in the relay data
        put 0 into R
        while R is less than the count of RelayData
        begin
            put element R of RelayData into Item
            if property `ip` of Item is RelayIp
            begin
                append Response to Items
                if not property `ok` of Response
                begin
                    set property `ok` of Response to `False`
                    put property `response` of Response into Response
                    put property RelayIp of RoomIndices into RoomNumber
                    if RoomNumber is `R`
                    begin
                        if Response is `<none>`
                        begin
                            print `No response '` cat Response cat `' from request relay`
                            put `No` into WarningMessage
                        end
                        else
                        begin
                            print `Bad response '` cat Response cat `' from request relay`
                            put `Bad` into WarningMessage
                        end
                        put WarningMessage cat ` response from request relay` into WarningMessage
                        if WarningMessages is not empty put WarningMessages cat `<br>` into WarningMessages
                        put WarningMessages cat WarningMessage into WarningMessages
                        set property `status` of SensorData to WarningMessages
                    end
                    else
                    begin
                        put element RoomNumber of Rooms into Room
                        put property `name` of Room into RoomName
                        put property `sensor` of Room into Sensor
                        put property Sensor of SensorData into SensorValues
                        if Response is `<none>`
                        begin
                            print `No response '` cat Response cat `' from ` cat RoomName
                            put `No` into WarningMessage
                        end
                        else
                        begin
                            print `Bad response '` cat Response cat `' from ` cat RoomName
                            put `Bad` into WarningMessage
                        end
                        put WarningMessage cat ` response from relay in ` cat property `name` of Room into WarningMessage
                        if WarningMessages is not empty put WarningMessages cat `<br>` into WarningMessages
                        put WarningMessages cat WarningMessage into WarningMessages
                        gosub to ShowWarning
                    end
                end
            end
            add 1 to R
        end
        add 1 to N
    end
    ! Add in the direct responses
    put Items into Responses
    put 0 into N
    while N is less than the count of DirectResponses
    begin
        put element N of DirectResponses into Item
        append Item to Responses
        add 1 to N
    end
    ! Count the errors
    put 0 into N
    while N is less than the count of Responses
    begin
        put element N of Responses into Response
        put property `ip` of Response into RelayIp
        if property `response` of Response is `<none>`
        begin
            if `` cat property `ok` of Response is `False` add 1 to BadResponses
        end
        add 1 to N
    end
    if BadResponses is greater than 0
    begin
        print BadResponses cat ` bad response(s) out of ` cat the count of Responses
        if BadResponses is less than the count of Responses set ExtenderSuspect
    end
    put stringify Responses into Responses
    set property `responses` of SensorData to Responses
!    print SensorData

!    print `Extender: ` cat ExtenderRunning cat ` ` cat ExtenderSuspect

    if ExtenderRunning
    begin
        if ExtenderSuspect set property `extender` of SensorData to `suspect`
        else set property `extender` of SensorData to `running`
    end
    else if the count of RelayData is 0
    begin
        if ExtenderSuspect set property `extender` of SensorData to `fail`
        else set property `extender` of SensorData to `running`
    end

    set property `version` of SensorData to Version
    put stringify SensorData into Sensors
    open File RamDisk cat `/sensorData` for writing
    write Sensors to File
    close File

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Post the sensor data to the RBR server
    if Password is not empty
    begin
!        print `Post the sensor data: ` cat Sensors
        post Sensors to RBRServer cat `/sensors/` cat MAC cat `/` cat Password
        or begin
            print `Unable to post sensor data`
            go to PSD2
        end

        ! If the map has changed, write it back to the RBR server.
    PSD2:
        if Changed
        begin
            put stringify MapObject into Map
!            post Map to LocalServer cat `.1/resources/php/rest.php/map`
            open File `/mnt/data/map` for writing
            write Map to File
            close File
            if Password is not empty
            begin
                if Confirm
                begin
                    print `Post the map & confirm`
                    post Map to RBRServer cat `/confirm/` cat MAC cat `/` cat Password
                    clear Confirm
                end
                else
                begin
                    print `Post the map`
                    post Map to RBRServer cat `/map/` cat MAC cat `/` cat Password
                end
            end
            clear Changed
        end
    end

Repeat:
    if HaltRequested
    begin
        system `touch /mnt/data/halt`
        exit
    end

    put 0 into N
    if file `/mnt/data/espmem` exists
    begin
        open File `/mnt/data/espmem` for reading
        read N from File
        close File
    end
    print `Memory used: ` cat memory cat ` MB; Extender free memory: ` cat N cat ` bytes`

    ! Do all the above 6 times
    add 1 to RepeatCount
    print `Repeat ` cat RepeatCount cat ` done`
    if RepeatCount is less than 6
    begin
        while now is less than Timestamp wait 50 ticks
        go to Start
    end

    exit

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Process a single room
ProcessRoom:
    if Sensor is empty return
    if file RamDisk cat `/sensors/` cat Sensor cat `.txt` exists go to PR2
    return

PR2:
    ! Make sure there's an 'advance' file. Read it into Advance
    if file RamDisk cat `/advance/` cat Sensor exists
    begin
        open File RamDisk cat `/advance/` cat Sensor for reading
        read Advance from File
        close File
    end
    else
    begin
        put `-` into Advance
        gosub to WriteAdvance
    end
    open File RamDisk cat `/sensors/` cat Sensor cat `.txt` for reading
    read SensorValues from File
    close File
    put json SensorValues into SensorValues
    put property `temperature` of SensorValues into Temperature
    put property `relays` of Room into Relays
    put float Temperature into Temperature

    ! See if this room is set for winter protection
    if property `protect` of Room is empty set property `protect` of Room to `no`
    if property `protect` of Room is `yes`
    begin
        put float property `ptemp` of Room into Target
        if Temperature is not greater than Target
        begin
            print `Frost protect ON`
            add 1 to RequestCount
            set property `protect` of SensorData to Sensor
        end
        else set property `protect` of SensorData to empty
    end

    ! Deal with mode requests
    put property `mode` of Room into Mode
    if Mode is empty put `off` into Mode

    if Mode is `boost`
    begin
        put `` cat property `boost` of Room into Boost
        if left 1 of Boost is `B`
        begin
            put from 1 of Boost into Target
            multiply Target by 60
            add the timestamp to Target
            set property `boost` of Room to Target
            set property `message` of MapObject to `confirm`
            gosub to UpdateRoom
            set property `advance` of Room to `-`
            put `-` into Advance
            gosub to WriteAdvance
        end
        else if Boost is empty
        begin
            set property `boost` of Room to 0
            set property `mode` of Room to property `prevmode` of Room
            gosub to UpdateRoom
        end
        else if Boost is not 0
        begin
            ! Boost contains the timestamp of the target (the end of the boost period).
            put integer Boost into Boost
            take the timestamp from Boost
            if Boost is less than 0
            begin
                ! Deal with the end of the boost period
                print `Boost finished`
                set property `boost` of Room to 0
                set property `mode` of Room to property `prevmode` of Room
                gosub to UpdateRoom
            end
        end
        ! Use the target setting for 'on' mode
        put property `target` of Room into Target
        if `` cat Target is not empty
        begin
            gosub to MultiplyTT
            if Temperature is less than Target go to TurnOn
        end
        go to TurnOff
    end

    if Mode is `off`
    begin
        gosub to MultiplyTT
        go to TurnOff
    end

    if Mode is `on`
    begin
        put property `target` of Room into Target
        gosub to MultiplyTT
        if Temperature is less than Target go to TurnOn
        go to TurnOff
    end

    ! Default: timed mode. Check each of the events
    put property `events` of Room into Events
    if Events is empty
    begin
        gosub to MultiplyTT
        if Temperature is less than Target go to TurnOn else go to TurnOff
    end
    take 1 from the length of Events giving NPeriods
    put `timed` into Mode
    put 0 into E
    while E is less than the length of Events
    begin
        put element E of Events into Event
        put property `until` of Event into Until
        put the timestamp of Until format `%H:%M` into Boundary
        put now into Now
        ! Check if this is the right time segment
        if Now is less than Boundary
        begin
            ! We've found the current time segment
            go to CheckAdvance
        end
        else
        begin
            if E is NPeriods
            begin
                ! We've gone past the last time segment so use the first
                put 0 into E
                go to CheckAdvance
            end
        end
        add 1 to E
    end
    return

!   Multiply Target and Temperature each by 10 so they can be compared
MultiplyTT:
    if `` cat Target is empty put `16` into Target
    else put `` cat Target into Target
    put the position of `.` in Target into P1
    if P1 is less than 0
    begin
        multiply Target by 10
    end
    else
    begin
        put left P1 of Target into T1
        multiply T1 by 10
        add 1 to P1
        put from P1 of Target into T2
        add T2 to T1 giving Target
    end
    put `` cat Temperature into Temperature
    if Temperature is empty put `0` into Temperature
    put the position of `.` in Temperature into P1
    if P1 is less than 0
    begin
        multiply Temperature by 10
    end
    else
    begin
        put left P1 of Temperature into T1
        multiply T1 by 10
        add 1 to P1
        put from P1 of Temperature into T2
        add T2 to T1 giving Temperature
    end
!    print `Target: ` cat Target cat `, Temperature: ` cat Temperature
    return

!   This is called in 'timed' mode to deal with the Advance setting
CheckAdvance:
    put `` cat E into EE
    put property `advance` of Room into RA
    if RA is empty go to TurnOnOrOff
    if Advance is `-`
    begin
        if RA is `A`
        begin
            set property `boost` of Room to 0
            put EE into Advance
            gosub to WriteAdvance
            go to AcknowlegeAdvance
        end
    end
    else
    begin
        if Advance is not EE
        begin
            go to CancelAdvance
        end
        if RA is `C` go to CancelAdvance
        if EE is not Advance go to CancelAdvance
    end
    go to TurnOnOrOff

WriteAdvance:
    open File RamDisk cat `/advance/` cat Sensor for writing
    write Advance to File
    close File
    return

UpdateAdvance:
    set property `advance` of Room to `-`

UpdateRoom:
    set element RoomNumber of Rooms to Room
UpdateRooms:
    set property `rooms` of Profile to Rooms
    set element CurrentProfile of Profiles to Profile
    set property `profiles` of MapObject to Profiles
    put stringify MapObject into Map
    set Changed
    return

CancelAdvance:
    put `-` into Advance
    gosub to WriteAdvance

!   Clear the advance A or C request in the room record
AcknowlegeAdvance:
    gosub to UpdateAdvance

SaveMap:
    open File `/mnt/data/map` for writing
    write Map to File
    close File
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Turn a relay on or off
TurnOnOrOff:
    if Advance is not `-`
    begin
        add 1 to E
        if E is greater than NPeriods put 0 into E
    end
    put element E of Events into Event
    put float property `temp` of Event into Target
    gosub to MultiplyTT
    if Temperature is less than Target go to TurnOn

TurnOff:
    put `off` into OnOff
    go to UpdateLog

TurnOn:
    add 1 to RequestCount
    put `on` into OnOff

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Update the log if the temperature has changed outside a 10-minute window
UpdateLog:

!   Skip if less than 10 minutes from the last change
    put property `ts` of RoomStatus into TS
!    print `TS: ` cat TS
    add 600 to TS
    if now is less than TS go to SetRelays ! else print `Time change to ` cat TS cat ` in ` cat RoomName

!   Test if the temperature has changed
    put property `temp` of RoomStatus into T
    if T is Temperature go to SetRelays ! else print `Temperature change in ` cat RoomName

!   Write this room's data to the log file
SR0:
    set property `ts` of RoomStatus to TS
    set property `temp` of RoomStatus to Temperature
    set property `relay` of RoomStatus to OnOff
!    print RoomStatus
    open File RoomStatusFileName for writing
    write stringify RoomStatus to File
    write newline to File
    close File
    open File `/mnt/data/logdata` for appending
    write stringify RoomStatus to File
    write newline to File
    close File

    if Password is not empty post stringify RoomStatus to RBRServer cat `/sensorlog/` cat MAC cat `/` cat Password

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Set the relays
SetRelays:
!    print Sensor cat ` ` cat RoomName cat ` ` cat Mode cat ` ` cat OnOff
    if RelayType is empty put `RBR R1` into RelayType
    if Relays is empty put json `[]` into Relays
! print RoomName cat ` Relays: ` cat Relays
    put 0 into R
    while R is less than the count of Relays
    begin
        set property `status` of SensorValues to `Good`
        put element R of Relays into Relay
        if Relay is not empty
        begin
            put Relay into Extender
            split Extender on `/`
            if the elements of Extender is 2
            begin
                index Extender to 1
                put Extender into RelayIp
                set property RelayIp of IPAddresses to `Y`
                index Extender to 0
                if RelayType is `RBR R1` put `r1` into RelayType
                else if RelayType is `Tasmota` put `tasmota` into RelayType
                else if RelayType is `Shelly One` put `shelly` into RelayType
                put json `{}` into Item
                set property `extender` of Item to Extender
                set property `ip` of Item to RelayIp
                set property `type` of Item to RelayType
                set property `onoff` of Item to OnOff
                append Item to RelayData
                set property RelayIp of RoomIndices to RoomNumber
            end
            else ! Here if we're on the house router or OPi hotspot
            begin
                if RelayType is `Tasmota`
                begin
                    put `http://` cat Relay cat `/cm?cmnd=power%20` cat OnOff into Request
!                    print Request
                    get Response from Request
                    or begin
                        put `<none>` into Response
                        put `Relay request failed in ` cat RoomName into WarningMessage
                        add 1 to BadResponses
!                        gosub to ShowWarning
                        gosub to NetworkError
                        go to SR1
                    end
                    gosub to ClearNetworkErrors
                    if Response is empty
                    begin
                        put `<none>` into Response
                        put `No response from relay in ` cat RoomName into WarningMessage
                        add 1 to BadResponses
!                        gosub to ShowWarning
                    end
!                    print `Response: ` cat Response
                end
                else if RelayType is `Shelly One`
                begin
                    put `http://` cat Relay cat `/relay/0?turn=` cat OnOff into Request
                    get Response from Request
                    or begin
                        put `<none>` into Response
                        put `Device ` cat Relay cat ` failed in ` cat RoomName into WarningMessage
                        add 1 to BadResponses
!                        gosub to ShowWarning
                        gosub to NetworkError
                        go to SR1
                    end
                    gosub to ClearNetworkErrors
                    if Response is empty
                    begin
                        put `<none>` into Response
                        put `No response from relay in ` cat RoomName into WarningMessage
                        add 1 to BadResponses
!                        gosub to ShowWarning
                    end
 !                   print `Response: ` cat Response
                end
                else if RelayType is `TP-Link P100`
                begin
                    put property `p100Email` of Room into TPEmail
                    put property `p100Password` of Room into TPPassword
                    relay Relay TPEmail TPPassword OnOff
                end
            SR1:
                put json `{}` into Item
                set property `ip` of Item to Relay
                if Response is `<none>` set property `ok` of Item to false
                else set property `ok` of Item to true
                set property `response` of Item to Response
                append Item to DirectResponses
            end
        end
    SR2:
        add 1 to R
    end
    set property `relay` of SensorValues to OnOff
    set property `advance` of SensorValues to Advance
    set property Sensor of SensorData to SensorValues
    return

!   Show a warning message
ShowWarning:
    set property `status` of SensorValues to `Fail`
    set property `status` of SensorData to WarningMessages
    return

! Clear the network error counter
ClearNetworkErrors:
    put -1 into NetworkErrors
!   Bump the network error counter
NetworkError:
    add 1 to NetworkErrors
    open File `/mnt/data/network-errors` for writing
    write `` cat NetworkErrors to File
    close File
    return

! Set a flag to restart the system controller
RestartSystemController:
    print `Restart the system controller`
    system `touch /mnt/data/reboot`
    exit
