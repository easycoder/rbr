!    RBR Controller script for Python/EasyCoder

!   This script manages the local hardware - sensors and relays - to act
!   in accordance with the rules in the system map.

    script RBR

<<<<<<< HEAD
    import plugin P100 from plugins/ec_p100.py
=======
    import plugin P100 from ec_p100.py
>>>>>>> refs/remotes/origin/main

    file File
    variable RamDisk
    variable RBRServer
    variable RegData
    variable Version
    variable Config
    variable RepeatCount
    variable CurrentProfile
    variable Profiles
    variable Profile
    variable ProfileName
    variable SystemName
    variable Map
    variable MapObject
    variable Rooms
    variable RoomSpec
    variable RoomNumber
    variable RoomName
    variable RoomCount
    variable RoomNames
    variable RoomSSIDs
    variable RoomStatus
    variable HeatingStatus
    variable Mode
<<<<<<< HEAD
    variable MasterDevice
    variable Device
    variable Devices
    variable MasterIPAddr
    variable MasterMAC
    variable DeviceMAC
    variable URL
=======
    variable SystemDataText
>>>>>>> refs/remotes/origin/main
    variable Sensor
    variable Relays
    variable Relay
    variable RelayType
    variable BadResponses
    variable Responses
    variable Response
    variable Timestamp
    variable Temperature
    variable SystemData
<<<<<<< HEAD
=======
    variable RoomCount
    variable RoomNames
    variable RoomSSIDs
>>>>>>> refs/remotes/origin/main
    variable NPeriods
    variable Events
    variable Event
    variable Until
    variable Target
    variable SensorValues
    variable LastReported
    variable Now
    variable Boundary
    variable OnOff
    variable MAC
    variable Password
    variable Advance
    variable Boost
    variable NetworkErrors
    variable Request
    variable RequestCount
    variable IPAddresses
    variable SSID
    variable SensorFileName
    variable RoomStatusFile
    variable TargetTemp
    variable Action
    variable Items
    variable Key
    variable Keys
    variable Value
    variable Changed
    variable Confirm
    variable Calendar
    variable Day
    variable WarningMessages
    variable WarningMessage
    variable MailMessage
<<<<<<< HEAD
    variable Message
    variable Mail
    variable HaltRequested
    variable TPEmail
    variable TPPassword
    variable Name
=======
    variable Mail
    variable Data
    variable Failures
    variable HaltRequested
    variable TPEmail
    variable TPPassword
    variable XRTimestamp
    variable LastReset
>>>>>>> refs/remotes/origin/main
    variable RA
    variable E
    variable EE
    variable N
    variable K
    variable P
    variable R
    variable T
    variable V
    variable W
    variable P1
    variable T1
    variable T2
    variable TS
<<<<<<< HEAD
=======
    variable RR
    variable RS
    variable RSF
>>>>>>> refs/remotes/origin/main

!    debug step

    put `/mnt/data/` into RamDisk
<<<<<<< HEAD
    if file RamDisk cat `pause` exists
=======

    if file RamDisk cat `halt` exists
>>>>>>> refs/remotes/origin/main
    begin
        log `Paused`
        exit
    end

    load RBRServer from `server.txt`
    put trim RBRServer into RBRServer
    put RBRServer cat `/resources/php/rest.php` into RBRServer

<<<<<<< HEAD
    put the timestamp into Timestamp
    multiply Timestamp by 1000 giving T
    log datime T format `%b %d %H:%M:%S`

    load RBRServer from `server.txt`
    put trim RBRServer into RBRServer
    put RBRServer cat `/resources/php/rest.php` into RBRServer

    if file RamDisk cat `network-errors` exists
    begin
        load NetworkErrors from RamDisk cat `network-errors`
=======
    if file RamDisk cat `network-errors` exists
    begin
        open File RamDisk cat `network-errors` for reading
        read NetworkErrors from File
        close File
>>>>>>> refs/remotes/origin/main
        if NetworkErrors is empty put 0 into NetworkErrors
        put the value of NetworkErrors into NetworkErrors
        log NetworkErrors cat ` network errors`
    end
    else
    begin
        put -1 into NetworkErrors
        gosub to NetworkError
    end

    if NetworkErrors is greater than 100
    begin
<<<<<<< HEAD
        log `Too many errors (` cat NetworkErrors cat `) - rebooting`
=======
        print `Too many errors (` cat NetworkErrors cat `) - rebooting`
>>>>>>> refs/remotes/origin/main
        put `The controller restarted (>100 errors)` into MailMessage
        gosub to SendMailMessage
        gosub to ClearNetworkErrors
!        system `touch ` cat RamDisk cat `reboot`
        stop
    end

    put 0 into RepeatCount
    load MAC from `mac`
    put trim MAC into MAC
    log `MAC: ` cat MAC

    clear Changed
    clear Confirm
    clear HaltRequested

    ! Ask the server for our password and other data
    put empty into RegData
    get RegData from url RBRServer cat `/register/` cat MAC cat `?v=` cat now
    or begin
        log `Server did not respond`
        gosub to NetworkError
        put empty into Password
        put 1 into Version
        go to SkipServerInteraction
    end
    gosub to ClearNetworkErrors
    log `Server ` cat RBRServer cat ` connected successfully`

    put json RegData into RegData
    put property `password` of RegData into Password
<<<<<<< HEAD
    log `Password: ` cat Password
!    if RegData has property `reboot` go to RestartSystemController

    get Config from url RBRServer cat `/config/` cat MAC cat `/` cat Password
    put json Config into Config
!    load Config from `.config.json`
!    log `Config: ` cat Config
    put empty into MasterDevice
    put empty into MasterIPAddr
    put property `devices` of Config into Devices
    put the keys of Devices into Keys
    put 0 into N
    while N is less than the count of Keys
    begin
        put element N of Keys into Key
        put property Key of Devices into Device
        if property `master` of Device is true
        begin
            put Device into MasterDevice
            put property `ssid` of Device into SSID
            put from 8 of SSID into MasterMAC
        end
        increment N
    end
    if MasterDevice is not empty
    begin
        log `Master device: ` cat property `name` of MasterDevice
        put property `ipaddr` of MasterDevice into MasterIPAddr
    end
    else print `No master device`
=======
    print `Password: ` cat Password
!    if RegData has property `reboot` go to RestartSystemController
>>>>>>> refs/remotes/origin/main

!   See if we have the latest system software
    if file `version` exists
    begin
        load Version from `version`
        put trim Version into Version
    end
    else
    begin
        put `1` into Version
        save `` cat Version to `version`
    end
    if Version is empty put `0` into Version
    log `Version ` cat Version
! log RegData
    put property `version` of RegData into Value
    log `Current version: ` cat Version
    if the value of Value is greater than the value of Version
    begin
<<<<<<< HEAD
        log `Install update from ` cat Version cat ` to ` cat Value
        save `` cat Value to RamDisk cat `version`
        if Map is not empty
        begin
            save Map to RamDisk cat `map`
=======
        print `Installing update from ` cat Version cat ` to ` cat Value
        open File RamDisk cat `version` for writing
        write `` cat Value to File
        close File
        if Map is not empty
        begin
            open File RamDisk cat `map` for writing
            write Map to File
            close File
>>>>>>> refs/remotes/origin/main
        end
    end

!   Continue here if we are not connected to the RBR web server
SkipServerInteraction:
<<<<<<< HEAD
    save Password to RamDisk cat `password`
=======
    open File RamDisk cat `password` for writing
    write Password to File
    close File
>>>>>>> refs/remotes/origin/main

!   Make sure there's an 'advance' directory
    put RamDisk cat `advance` into Advance
    if file Advance exists begin end
    else create directory Advance

    put json `{}` into IPAddresses

Start:
    add 9 to now giving Timestamp
    ! Load the map
    if file RamDisk cat `map` exists
    begin
<<<<<<< HEAD
        load Map from RamDisk cat `map`
=======
        open File RamDisk cat `map` for reading
        read Map from File
        close File
>>>>>>> refs/remotes/origin/main
    end
    else put empty into Map
    if Map is empty
    begin
        ! Try to get the map from the RBR server
        log `Get the map from the server`
        get Map from url RBRServer cat `/map/` cat MAC cat `?v=` cat now
        or begin
            put `{"profiles":[{"name":"Unnamed","rooms":[{"name":"Unnamed","sensor":"","relays":[""],"mode":"off","target":"0.0","events":[]}]}],"profile":0,"name":"New system"}` into Map
            gosub to NetworkError
        end
        gosub to ClearNetworkErrors
<<<<<<< HEAD
        save Map to RamDisk cat `map`
        save Map to `backup`
=======
        open File RamDisk cat `map` for writing
        write Map to File
        close File
        open File `backup` for writing
        write Map to File
        close File
>>>>>>> refs/remotes/origin/main
    end
!    log Map

    if Map is empty
        put `{"profiles":[{"name":"Unnamed","rooms":[{"name":"Unnamed","sensor":"","relays":[""],"mode":"off","target":"0.0","events":[]}]}],"profile":0,"name":"New system"}` into Map
    put json Map into MapObject
    put property `profiles` of MapObject into Profiles
    put property `profile` of MapObject into CurrentProfile
    if `` cat CurrentProfile is empty put 0 into CurrentProfile

    put property `name` of MapObject into SystemName
    replace `%20` with ` ` in SystemName
    log `System Name: ` cat SystemName

    ! If the Calendar is on, find which profile is active
    if MapObject has property `calendar`
    begin
        if property `calendar` of MapObject is `on`
        begin
            put property `calendar-data` of MapObject into Calendar
            if Calendar is empty put property `profile` of MapObject into CurrentProfile
            else
            begin
                ! Examine the data for today
                put the weekday into W
                put element W of Calendar into Day
                if stringify Day is not `{}` put property `day` cat W cat `-profile` of Day into ProfileName
                put 0 into P
                while P is less than the count of Profiles
                begin
                    put element P of Profiles into Profile
                    if property `name` of Profile is ProfileName
                    begin
                        put P into CurrentProfile
                        go to S2
                    end
                    add 1 to P
                end
            end
        end
    end

S2:
    put element CurrentProfile of Profiles into Profile
    log `Profile: ` cat property `name` of Profile

    put property `rooms` of Profile into Rooms
    if Password is empty go to SkipRequests

<<<<<<< HEAD
    get Request from url RBRServer cat `/request/` cat MAC cat `?v=` cat now
    or begin
        gosub to NetworkError
        stop
=======
    ! Get the request, if any, from the user.
    if file RamDisk cat `request` exists
    begin
        open File RamDisk cat `request` for reading
        read Request from File
        close File
        ! Delete the request file
        post to LocalServer cat `.1/resources/php/rest.php/delreq`
    end
    else
    begin
        get Request from RBRServer cat `/request/` cat MAC cat `?v=` cat now
        or begin
            gosub to NetworkError
            stop
        end
>>>>>>> refs/remotes/origin/main
    end
    gosub to ClearNetworkErrors
    if Request is not empty gosub to ProcessRequest

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Process the map
SkipRequests:
<<<<<<< HEAD

!   Process all the rooms
    put json `{}` into SystemData

    set property `actual` of SystemData to CurrentProfile
    set property `system-status` of SystemData to `good`
=======
    if file RamDisk cat `incoming` exists
    begin
        if file RamDisk cat `lastrs` exists
        begin
            open File RamDisk cat `lastrs` for reading
            read LastReset from File
        close File
        end
        else put `{}` into LastReset
        put json LastReset into LastReset

        open File RamDisk cat `incoming` for reading

        put json `{}` into IncomingPacket
        read Data from File
        close File
        split Data on `|`
        put 0 into R
        while R is less than the elements of Data
        begin
            index Data to R
            put Data into Value
            split Value on `:`
            index Value to 0
            put Value into RoomName
            index Value to 1
            split Value on `,`
            put json `{}` into Item
            index Value to 0
            set property `ts` of Item to Value
            index Value to 1
            set property `rs` of Item to Value
            index Value to 2
            set property `ssid` of Item to Value
            index Value to 3
            set property `mac` of Item to Value
            index Value to 4
            set property `count` of Item to Value
            index Value to 5
            set property `rssi` of Item to Value
            index Value to 6
            if Value is not empty
            begin
                split Value on `=`
                index Value to 1
                put Value into V
                index Value to 0
                if Value is `r` set property `relay` of Item to V
                else if Value is `t` set property `temp` of Item to V
            end
            set property RoomName of IncomingPacket to Item
            add 1 to R
        end
!        print IncomingPacket


        ! Extract T1 data
        put the keys of IncomingPacket into Keys
        put 0 into K
        while K is less than the count of Keys
        begin
            put element K of Keys into Key
            put property Key of IncomingPacket into Item
            if left 3 of Key is `T1-`
            begin
                if Item has property `temp`
                begin
                    put property `temp` of Item into Temperature
                    set property `temperature` of Item to empty cat Temperature
                    open File RamDisk cat `sensors/` cat Key for writing
                    write stringify Item to File
                    close File
                end
            end
            if Item has property `rs`
            begin
                set property Key of LastReset to the value of property `rs` of Item
            end
            add 1 to K
        end
        open File RamDisk cat `lastrs` for writing
        write stringify LastReset to File
        close File
    end
    else put json `{}` into IncomingPacket

!   Process all the rooms
    put json `{}` into SystemData
    put json `[]` into DirectResponses
    put json `{}` into RoomIndices
    put json `{}` into SensorValuesBySensor
    put json `{}` into PerSensor

    set property `actual` of SystemData to CurrentProfile
    set property `status` of SystemData to ``
>>>>>>> refs/remotes/origin/main
    put 0 into BadResponses
    put empty into WarningMessages
    put the count of Rooms into RoomCount
    if RoomCount is 0
    begin
        log `There are no rooms in this profile`
    end
    else
    begin
        ! Set up a map of relay counts against sensor IDs
        put 0 into N
        while N is less than RoomCount
        begin
            put element N of Rooms into RoomSpec
            put property `sensor` of RoomSpec into Sensor
            if RoomSpec has property `relayType`
            begin
                put property `relayType` of RoomSpec into RelayType
                if RelayType is `Manual`
                begin
                    put `Manual` into Sensor
                    set property `sensor` of RoomSpec to Sensor
                    set element N of Rooms to RoomSpec
                end
            end
            add 1 to N
        end

        ! Process all the rooms
        log RoomCount cat ` rooms`
        put 0 into RequestCount
        put 0 into RoomNumber
        while RoomNumber is less than RoomCount
        begin
<<<<<<< HEAD
            put element RoomNumber of Rooms into RoomSpec
=======
            put element RoomNumber of Rooms into Room
            put property `name` of Room into RoomName
            put property `sensor` of Room into Sensor
            put empty into RelayType
            if Room has property `relayType` put property `relayType` of Room into RelayType
            if RelayType is empty put `` into RelayType

            ! Get the room status
            put RamDisk cat `rs` into RoomStatusFileName
            if file RoomStatusFileName exists begin end
            else create directory RoomStatusFileName
            put RoomStatusFileName cat `/` cat RoomNumber into RoomStatusFileName
            if file RoomStatusFileName exists
            begin
                open File RoomStatusFileName for reading
                read RoomStatus from File
                close File
                if RoomStatus is empty put json `{}` into RoomStatus
                else put json RoomStatus into RoomStatus
            end
            else put json `{}` into RoomStatus
            set property `ts` of RoomStatus to now
            set property `name` of RoomStatus to RoomName
            set property `sensor` of RoomStatus to Sensor
            set property `temp` of RoomStatus to 0
            open File RoomStatusFileName for writing
            write stringify RoomStatus to File
            write newline to File
            close File
            ! Get the current state of this room

            print `-------------------- ` cat RoomName
            put json `{}` into SensorValues
>>>>>>> refs/remotes/origin/main
            gosub to ProcessRoom
            set element RoomNumber of Rooms to RoomSpec
            set property RoomName of SystemData to RoomSpec
            add 1 to RoomNumber
        end
        log `-------------------- All rooms processed`

        ! Deal with the request relay
        if MapObject has property `request`
        begin
            put property `request` of MapObject into Name
            if Name is not empty
            begin
                if RequestCount is 0 put `off` into OnOff
                else put `on` into OnOff
                log RequestCount cat ` requests: Turn ` cat Name cat ` ` cat OnOff
                put property Name of Devices into Device
                put OnOff into Message
                gosub to MessageESPDevice
                if Response is empty log Name cat `: No response` else log `Response: ` cat Response
            end
        end
<<<<<<< HEAD
    end

    set property `version` of SystemData to Version

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Repeat everything another 5 times
=======

        ! Set up the outgoing packet
!        print `OutgoingPacket:` cat stringify OutgoingPacket
        put Version cat newline cat the timestamp into Data
        put the keys of OutgoingPacket into Keys
        put 0 into N
        while N is less than the count of Keys
        begin
            put element N of Keys into K
            if K is `v` begin end
            else if K is `ts` begin end
            else
            begin
                put property K of OutgoingPacket into Item
                put Data cat newline cat K cat `:` cat property `relay` of Item into Data
            end
            add 1 to N
        end
!        print Data

!        set property `ts` of OutgoingPacket to `` cat the timestamp
!        set property `v` of OutgoingPacket to `` cat Version
        open File RamDisk cat `outgoing` for writing
!        write stringify OutgoingPacket to File
        write Data to File
        close File
!        print `Out: ` cat OutgoingPacket
!        print `In:  ` cat IncomingPacket
    end

    ! Process the responses
    gosub to ProcessResponses

    set property `version` of SystemData to Version
    put stringify SystemData into SystemDataText
    open File RamDisk cat `systemData` for writing
    write SystemDataText to File
    close File

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Post the sensor data to the RBR server
    if Password is not empty
    begin
!        print `Post the sensor data: ` cat SystemDataText
        post SystemDataText to RBRServer cat `/sensors/` cat MAC cat `/` cat Password
        or begin
            print `Unable to post sensor data`
            go to PSD2
        end

        ! If the map has changed, write it back to the RBR server.
    PSD2:
        if Changed
        begin
            put stringify MapObject into Map
!            post Map to LocalServer cat `.1/resources/php/rest.php/map`
            open File RamDisk cat `map` for writing
            write Map to File
            close File
            if Password is not empty
            begin
                if Confirm
                begin
                    print `Post the map & confirm`
                    post Map to RBRServer cat `/confirm/` cat MAC cat `/` cat Password
                    clear Confirm
                end
                else
                begin
                    print `Post the map`
                    post Map to RBRServer cat `/map/` cat MAC cat `/` cat Password
                end
            end
            clear Changed
        end
    end

>>>>>>> refs/remotes/origin/main
Repeat:
    if HaltRequested
    begin
        system `touch /mnt/data/halt`
        exit
    end

    log `Memory used: ` cat memory cat ` MB`

    gosub to PostToServer
    add 1 to RepeatCount
    log `Repeat ` cat RepeatCount cat ` done`
    if RepeatCount is less than 6
    begin
        while now is less than Timestamp wait 50 ticks
        go to Start
    end

    exit

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Process a single room
ProcessRoom:
    put property `name` of RoomSpec into RoomName
    log `-------------------- ` cat RoomName
!    log RoomName cat `: ` cat property RoomName of Devices

    put property `sensor` of RoomSpec into Sensor
    put empty into RelayType
    if RoomSpec has property `relayType` put property `relayType` of RoomSpec into RelayType

    ! Get the room status
    put RamDisk cat `status` into RoomStatusFile
    if file RoomStatusFile does not exist
    create directory RoomStatusFile
    put RoomStatusFile cat `/` cat RoomName into RoomStatusFile
    if file RoomStatusFile does not exist
    begin
        put json `{}` into RoomStatus
        set property `status` of RoomStatus to `good`
        set property `errors` of RoomStatus to 0
        save stringify RoomStatus to RoomStatusFile
    end
    load RoomStatus from RoomStatusFile
    put json RoomStatus into RoomStatus
    set property `status` of RoomSpec to property `status` of RoomStatus
    set property `timestamp` of RoomSpec to now

    put json `{}` into Response
    if RelayType is not `Manual`
    begin
        if Sensor is empty return
<<<<<<< HEAD
        if left 2 of Sensor is `T-`
        begin
            if Devices does not have property Sensor
            begin
                print `Device '` cat Sensor cat `' is not in the map`
                return
=======
        put RamDisk cat `sensors/` cat Sensor cat `.txt` into SensorFileName
        if left 3 of Sensor is `T1-`
        begin
            if the count of IncomingPacket is not 0
            begin
                put the keys of IncomingPacket into Keys
                put 0 into N
                while N is less than the count of Keys
                begin
                    put element N of Keys into Key
                    if Key is Sensor
                    begin
                        put property Key of IncomingPacket into Value
                        put property `ts` of Value into LastReported
                        take LastReported from the timestamp giving LastReported
                        if LastReported is greater than 1800
                        begin
                            put `Sensor for ` cat RoomName cat ` has not reported recently` into WarningMessage
                            gosub to AddWarning
                        end
                        if Value has property `temp`
                        begin
                            put property `temp` of Value into Temperature
                            put json `{}` into SensorValues
                            set property `temperature` of SensorValues to Temperature
                            set property Sensor of SensorValuesBySensor to SensorValues
                        end
                    end
                    add 1 to N
                end
>>>>>>> refs/remotes/origin/main
            end
            put property Sensor of Devices into Device
            put `temp` into Message
            gosub to MessageESPDevice
!            log `Sensor: ` cat Response
            if left 3 of Response is `OK `
            begin
                split Response on ` `
                index Response to 1
                set property `temperature` of RoomSpec to Response
                set property `battery` of RoomSpec to 100
            end
        end
        else
        begin
            put RamDisk cat `sensors/` cat Sensor cat `.txt` into SensorFileName
            if file SensorFileName exists
            begin
!                log `Read file ` cat SensorFileName cat ` for ` cat RoomName
                put the modification time of SensorFileName into LastReported
                take LastReported from the timestamp giving LastReported
                if LastReported is greater than 1800
                begin
                    put `Sensor for ` cat RoomName cat ` has not reported recently` into WarningMessage
                    gosub to AddWarning
                end
                load SensorValues from SensorFileName
                put json SensorValues into SensorValues
                set property `temperature` of RoomSpec to property `temperature` of SensorValues
                set property `battery` of RoomSpec to property `battery` of SensorValues
            end
            else
            begin
                put `Sensor for ` cat RoomName cat ` has not reported` into WarningMessage
                gosub to AddWarning
                log WarningMessage
            end
        end
    end
!    log RoomSpec
    put property `target` of RoomSpec into Target
    if RoomSpec has property `temperature` put property `temperature` of RoomSpec into Temperature
    else
    begin
        put 0 into Temperature
        set property `temperature` of RoomSpec to 0
    end

    ! Make sure there's an 'advance' file. Read it into Advance
GetAdvance:
    if file RamDisk cat `advance/` cat Sensor exists
    begin
<<<<<<< HEAD
        load Advance from RamDisk cat `advance/` cat Sensor
=======
        open File RamDisk cat `advance/` cat Sensor for reading
        read Advance from File
        close File
>>>>>>> refs/remotes/origin/main
    end
    else
    begin
        put `-` into Advance
        gosub to WriteAdvance
    end
    set property `advance` of RoomSpec to Advance

    put property `relays` of RoomSpec into Relays
    if `` cat Temperature is not empty put float Temperature into Temperature
    else put float `0.0` into Temperature

    ! See if this room is set for winter protection
    if property `protect` of RoomSpec is empty set property `protect` of RoomSpec to `no`
    if property `protect` of RoomSpec is `yes`
    begin
        put float property `ptemp` of RoomSpec into Target
        if Temperature is not greater than Target
        begin
            log `Frost protect ON`
            add 1 to RequestCount
            set property `protect` of SystemData to Sensor
        end
        else set property `protect` of SystemData to empty
    end

    ! Deal with mode requests
    put property `mode` of RoomSpec into Mode
    if Mode is empty put `off` into Mode

    if Mode is `boost`
    begin
        put `` cat property `boost` of RoomSpec into Boost
        if left 1 of Boost is `B`       ! Set up a boost
        begin
            put from 1 of Boost into Target
            multiply Target by 60
            add the timestamp to Target
            set property `boost` of RoomSpec to Target
            set property `message` of MapObject to `confirm`
            gosub to UpdateRoom
            put `-` into Advance
            set property `advance` of RoomSpec to Advance
            gosub to WriteAdvance
            put property `target` of RoomSpec into TargetTemp
            put `on` into HeatingStatus
        end
        else if Boost is empty      ! Cancel the boost
        begin
            set property `boost` of RoomSpec to 0
            set property `mode` of RoomSpec to property `prevmode` of RoomSpec
            gosub to UpdateRoom
            put 0 into TargetTemp
            put `off` into HeatingStatus
        end
        else if Boost is not 0
        begin
            ! Boost contains the timestamp of the target (the end of the boost period).
            put integer Boost into Boost
            take the timestamp from Boost
            if Boost is less than 0
            begin
                ! Deal with the end of the boost period
                log `Boost finished`
                set property `boost` of RoomSpec to 0
                set property `mode` of RoomSpec to property `prevmode` of RoomSpec
                gosub to UpdateRoom
                put 0 into TargetTemp
                put `off` into HeatingStatus
            end
        end
<<<<<<< HEAD
        if RoomSpec has property `linked`
            if property `linked` of RoomSpec is not `yes`
=======
        if Room has property `linked`
            if property `linked` of Room is not `yes`
>>>>>>> refs/remotes/origin/main
            begin
                put 0 into TargetTemp
                go to TurnOn
            end
        ! Use the target setting for 'on' mode
        put property `target` of RoomSpec into Target
        if `` cat Target is not empty
        begin
            gosub to MultiplyTT
            if Temperature is less than Target
            begin
                put Target into TargetTemp
                go to TurnOn
            end
        end
        put 0 into TargetTemp
        go to TurnOff
    end

    if Mode is `off`
    begin
        put `off` into HeatingStatus
        gosub to MultiplyTT
        put 0 into TargetTemp
        go to TurnOff
    end

    if Mode is `on`
    begin
        put `on` into HeatingStatus
<<<<<<< HEAD
        if property `linked` of RoomSpec is not `yes` go to TurnOn
        else
            gosub to MultiplyTT
!            log RoomName cat `: ` cat Temperature cat ` ` cat Target
=======
        if property `linked` of Room is not `yes` go to TurnOn
        else
            put property `target` of Room into Target
            gosub to MultiplyTT
!            print RoomName cat `: ` cat Temperature cat ` ` cat Target
>>>>>>> refs/remotes/origin/main
            if Temperature is less than Target go to TurnOn
            go to TurnOff
        end
    end

    ! Default: timed mode. Check each of the events
    put `on` into HeatingStatus
    put property `events` of RoomSpec into Events
    if Events is empty
    begin
        gosub to MultiplyTT
        put Target into TargetTemp
        if RoomName is `Kitchen` log Temperature cat `-` cat Target
        if Temperature is less than Target go to TurnOn else go to TurnOff
    end
    take 1 from the count of Events giving NPeriods
    put `timed` into Mode
    put 0 into E
    while E is less than the count of Events
    begin
        put element E of Events into Event
        put property `until` of Event into Until
        put the timestamp of Until format `%H:%M` into Boundary
        put now into Now
        ! Check if this is the right time segment
        if Now is less than Boundary
        begin
            ! We've found the current time segment
            go to CheckAdvance
        end
        else
        begin
            if E is NPeriods
            begin
                ! We've gone past the last time segment so use the first
                put 0 into E
                go to CheckAdvance
            end
        end
        add 1 to E
    end
    return

!   Multiply Target and Temperature each by 10 so they can be compared
MultiplyTT:
    if `` cat Target is empty put `16` into Target
    else put `` cat Target into Target
    put the position of `.` in Target into P1
    if P1 is less than 0
    begin
        multiply Target by 10
    end
    else
    begin
        put left P1 of Target into T1
        multiply T1 by 10
        add 1 to P1
        put from P1 of Target into T2
        add T2 to T1 giving Target
    end
    put `` cat Temperature into Temperature
    if Temperature is empty put `0` into Temperature
    put the position of `.` in Temperature into P1
    if P1 is less than 0
    begin
        multiply Temperature by 10
    end
    else
    begin
        put left P1 of Temperature into T1
        multiply T1 by 10
        add 1 to P1
        put from P1 of Temperature into T2
        add T2 to T1 giving Temperature
    end
!    log `Target: ` cat Target cat `, Temperature: ` cat Temperature
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   This is called in 'timed' mode to deal with the Advance setting
CheckAdvance:
!    log `CheckAdvance`
    put `` cat E into EE
    load Advance from RamDisk cat `advance/` cat Sensor
    if RoomSpec has property `advance-rq` put property `advance-rq` of RoomSpec into RA
    else put `-` into RA
!    log `Current Advance is ` cat Advance cat `, new is ` cat RA
    if Advance is `-`
    begin
        if RA is `A`
        begin
            set property `boost` of RoomSpec to 0
            put EE into Advance
            gosub to WriteAdvance
        end
    end
    else
    begin
        if RA is `C` gosub to CancelAdvance
        if EE is not Advance gosub to CancelAdvance
        gosub to WriteAdvance
    end
    debug stop
    go to TurnOnOrOff

<<<<<<< HEAD
CancelAdvance:
    put `-` into Advance
=======
WriteAdvance:
    open File RamDisk cat `advance/` cat Sensor for writing
    write Advance to File
    close File
    return
>>>>>>> refs/remotes/origin/main

WriteAdvance:
!    log `Save '` cat Advance cat `' to ` cat RamDisk cat `advance/` cat Sensor
    save Advance to RamDisk cat `advance/` cat Sensor
    set property `advance` of RoomSpec to Advance
    set property `advance-rq` of RoomSpec to `-`

UpdateRoom:
    set element RoomNumber of Rooms to RoomSpec
UpdateRooms:
    set property `rooms` of Profile to Rooms
    set element CurrentProfile of Profiles to Profile
    set property `profiles` of MapObject to Profiles
    put stringify MapObject into Map
    save Map to RamDisk cat `map`
    set Changed
    return

<<<<<<< HEAD
=======
CancelAdvance:
    put `-` into Advance
    gosub to WriteAdvance

!   Clear the advance A or C request in the room record
AcknowlegeAdvance:
    gosub to UpdateAdvance

SaveMap:
    open File RamDisk cat `map` for writing
    write Map to File
    close File
    return

>>>>>>> refs/remotes/origin/main
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Turn a relay on or off
TurnOnOrOff:
    if Advance is not `-`
    begin
        add 1 to E
        if E is greater than NPeriods put 0 into E
        log `Advance to period ` cat E
    end
    put element E of Events into Event
    put float property `temp` of Event into Target
    gosub to MultiplyTT
    put Target into TargetTemp
    if Temperature is less than Target go to TurnOn

TurnOff:
    put `off` into OnOff
    go to UpdateLog

TurnOn:
    add 1 to RequestCount
    put `on` into OnOff

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Update the log if the temperature has changed outside a 10-minute window
UpdateLog:
!   Skip if less than 10 minutes from the last change
    put property `timestamp` of RoomSpec into TS
    put property `temperature` of RoomSpec into T
    put `` cat T into T
    put `` cat Temperature into Temperature
    add 600 to TS
    if now is less than TS go to SetRelays ! else log `Time change to ` cat TS cat ` in ` cat RoomName

!   Test if the temperature has changed
    if T is Temperature go to SetRelays ! else log `Temperature change in ` cat RoomName
    gosub to PostSensorLog

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Set the relay(s) in a single room
SetRelays:
    log `Sensor: ` cat Sensor cat ` T:A=` cat Target cat `:` cat Temperature cat ` ` cat Mode cat `:` cat OnOff
    if RelayType is empty put `RBR-Now` into RelayType
    if Relays is empty put json `[]` into Relays
! log RoomName cat ` Relays: ` cat Relays
    put json `[]` into Responses
    put 0 into R
    while R is less than the count of Relays
    begin
        put element R of Relays into Relay
        put json `{}` into Response
        if RelayType is `RBR-Now`
        begin
            if Devices does not have property RoomName go to SR2
            put property RoomName of Devices into Device
            put OnOff into Message
            gosub to MessageESPDevice
            put Response into Value
            put json `{}` into Response
            split Value on ` `
            index Value to 1
            set property `uptime` of Response to Value
            index Value to 2
            if Value is 1 set property `state` of Response to `on` else set property `state` of Response to `off`
        end
        else if RelayType is `Shelly One`
        begin
            put `http://` cat Relay cat `/relay/0?turn=` cat OnOff into Request
            get Response from url Request
            or begin
                put empty into Response
                gosub to NetworkError
                go to SR1
            end
            put json Response into Value
            put json `{}` into Response
            set property `uptime` of Response to 0
            if property `ison` of Value is true set property `state` of Response to `on`
            else set property `state` of Response to `off`
            gosub to ClearNetworkErrors
        end
        else if RelayType is `Tasmota`
        begin
            put `http://` cat Relay cat `/cm?cmnd=power%20` cat OnOff into Request
            get Response from url Request
            or begin
                put empty into Response
                gosub to NetworkError
                go to SR1
            end
            put json Response into Value
            put json `{}` into Response
            set property `uptime` of Response to 0
            set property `state` of Response to `?`
            gosub to ClearNetworkErrors
        end
        else if RelayType is `TP-Link P100`
        begin
            put property `p100Email` of RoomSpec into TPEmail
            put property `p100Password` of RoomSpec into TPPassword
            relay Relay TPEmail TPPassword OnOff
        end
    SR1:
        if Response is empty log RoomName cat `: No response` else log `Response: ` cat Response
        append Response to Responses
    SR2:
        add 1 to R
    end
<<<<<<< HEAD
    set property `relay` of RoomSpec to OnOff
    set property `responses` of RoomSpec to Responses
    if RelayType is not `Manual`
    begin
        set property `relay` of SensorValues to OnOff
        set property `advance` of SensorValues to Advance
=======
    set property `relay` of SensorValues to OnOff
    set property `advance` of SensorValues to Advance
    set property Sensor of SensorValuesBySensor to SensorValues
    set property Sensor of SystemData to SensorValues
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Process the relay responses to check for errors
ProcessResponses:
print `ProcessResponses`
    put json `[]` into Items

    ! Read the XR information
    if file RamDisk cat `xrts` exists
    begin
        open File RamDisk cat `xrts` for reading
        read XRTimestamp from File
        close File
    end
    else put `{}` into XRTimestamp
    put json XRTimestamp into XRTimestamp

    ! Do the request relay
    put `Request` into RoomName
    if IncomingPacket has property RoomName
    begin
        put json `{}` into Response
        set property `name` of Response to RoomName
        put property RoomName of IncomingPacket into Item
        put property `ts` of Item into TS
        set property `response` of Response to Item
        put the value of TS into TS
        take TS from the timestamp giving T
        if T is greater than 300
        begin
            multiply TS by 1000 giving RSF
            if RSF is not 0 put datime RSF format `%H:%M` into RSF
            print `No recent data from ` cat RoomName cat ` (` cat RSF cat `)`
            set property `ok` of Response to `False`
        end
        else
        begin
            ! Check if this is the first appearance
            multiply TS by 1000
            put datime TS format `%H:%M:%S` into TS
            if LastReset has property RoomName
            begin
                put property RoomName of LastReset into RS
                put the value of RS into RS
                multiply RS by 1000 giving RSF
                if RSF is not 0 put datime RSF format `%H:%M` into RSF
            end
            else put 0 into RSF
            print RoomName cat ` ` cat TS cat ` (` cat RSF cat `)`
            set property `rs` of Response to RS
!            if Item has property `i` set property `response` of Response to property `i` of Item
        end
        append Response to Items
    end

    ! Iterate the rooms
    put 0 into N
    while N is less than RoomCount
    begin
        put element N of Rooms into Room
        put property `name` of Room into RoomName
        if Room has property `relayType`
        begin
            if property `relayType` of Room is `RBR XR`
            begin
                put json `{}` into Response
                set property `response` of Response to json `{}`
                set property `name` of Response to RoomName
                set property `sensor` of Response to property `sensor` of Room
                ! Iterate the relays
                put property `relays` of Room into Relays
                put 0 into RR
                while RR is less than the count of Relays
                begin
                    put element RR of Relays into RelayName
                    if IncomingPacket has property RelayName
                    begin
                        set property `ok` of Response to `True`
                        set property `ip` of Response to `XR-` cat RelayName
                        put property RelayName of IncomingPacket into Item
                        put property `ts` of Item into TS
                        set property `response` of Response to Item
                        put the value of TS into TS
                        take TS from the timestamp giving T
                        if T is greater than 300
                        begin
                            multiply TS by 1000 giving RSF
                            if RSF is not 0 put datime RSF format `%H:%M` into RSF
                            print `No recent data from ` cat RelayName cat ` (` cat RSF cat `)`
                            set property `ok` of Response to `False`
                            delete property RoomName of XRTimestamp
                        end
                        else
                        begin
                            multiply TS by 1000
                            put datime TS format `%H:%M:%S` into TS
                            if LastReset has property RelayName
                            begin
                                put property RelayName of LastReset into RS
                                put the value of RS into RS
                                multiply RS by 1000 giving RSF
                                if RSF is not 0 put datime RSF format `%H:%M` into RSF
                            end
                            else
                            begin
                                put 0 into RSF
                            end
                            print RelayName cat ` ` cat TS cat ` (` cat RSF cat `)`
                            set property `rs` of Response to RS
!                            if Item has property `i`
!                            begin
!                                put property `i` of Item into IProps
!                                set property `response` of Response to IProps
!                            end
                        end
                        append Response to Items
                    end
                    else print `No data from ` cat RelayName
                    add 1 to RR
                end
            end
        end
        add 1 to N
    end
!    print `Items: ` cat Items
    ! Write back the XR timestamp information
    open File RamDisk cat `xrts` for writing
    write stringify XRTimestamp to File
    close File

    ! Process the direct responses, e.g. from Shelly devices
    put 0 into N
    while N is less than the count of DirectResponses
    begin
        put element N of DirectResponses into Response
        put property `ip` of Response into RelayIp
        put `` cat RelayIp into RelayIp
        ! Look for this IP in the relay data
        put 0 into R
        while R is less than the count of Rooms
        begin
            put element R of Rooms into Room
            put property `relays` of Room into Relays
            put 0 into RR
            while RR is less than the count of Relays
            begin
                if element RR of Relays is RelayIp
                begin
                    set property `ip` of Response to `direct-` cat RelayIp
                    set property `name` of Response to property `name` of Room
                    set property `sensor` of Response to property `sensor` of Room
                    append Response to Items
                 end
                add 1 to RR
            end
            add 1 to R
        end
        add 1 to N
    end
    put Items into Responses
!    print `Responses: ` cat Responses

    ! Count the errors
!    print SensorValuesBySensor
    put 0 into N
    while N is less than the count of Responses
    begin
        put element N of Responses into Response
!        print Response
        if Response has property `ip`
        begin
            put property `ip` of Response into RelayIp
            put property `name` of Response into RoomName
            put property `sensor` of Response into Sensor
            if SensorValuesBySensor has property Sensor
            begin
                put property Sensor of SensorValuesBySensor into SensorValues
                put property Sensor of PerSensor into RelayCount
                put element 0 of RelayCount into RR
                add 1 to RR
                set element 0 of RelayCount to RR
 !               print property `response` of Response
!                if property `response` of Response is `<none>`
!                begin
!                    put `No response from relay ` cat RoomName cat `/` cat RelayIp into WarningMessage
!                    gosub to AddWarning
!                    put element 1 of RelayCount into RR
!                    add 1 to RR
!                    set element 1 of RelayCount to RR
!                end
!                else if `` cat property `ok` of Response is `False`
!                begin
!                    put `No response from relay ` cat RoomName cat `/` cat RelayIp into WarningMessage
!                    gosub to AddWarning
!                    put element 1 of RelayCount into RR
!                    add 1 to RR
!                    set element 1 of RelayCount to RR
!                end
                set property Sensor of PerSensor to RelayCount
            end
        end
        add 1 to N
    end

    ! Update the status value for each sensor (room)
!    print `PerSensor: ` cat PerSensor
    put the keys of PerSensor into Keys
    put 0 into Failures
    put 0 into N
    while N is less than the count of Keys
    begin
        put element N of Keys into Sensor
        if SensorValuesBySensor has property Sensor
        begin
            put property Sensor of SensorValuesBySensor into SensorValues
            put property Sensor of PerSensor into RelayCount
            put element 0 of RelayCount into N1
            put element 1 of RelayCount into N2
            if N2 is 0
            begin
                if SensorValues is not empty set property `status` of SensorValues to `Good`
            end
            else
            begin
                if N1 is N2
                begin
                    ! Find the sensor values and update the status property
                    put property Sensor of SystemData into SensorValues
                    set property `status` of SensorValues to `Fail`
                end
                else set property `status` of SensorValues to `Suspect`
                add 1 to Failures
            end
            put RamDisk cat `advance/` cat Sensor into FileName
            if file FileName exists
            begin
                open File FileName for reading
                read Advance from File
                close File
                set property `advance` of SensorValues to Advance
            end
            set property Sensor of SystemData to SensorValues
        end
        add 1 to N
    end
!    print Responses
!    put stringify Responses into Responses
    set property `responses` of SystemData to Responses

    if Failures is 0
    begin
        set property `system-status` of SystemData to `running`
    end
    else if Failures is less than the count of Keys
        set property `system-status` of SystemData to `suspect`
    else
    begin
        set property `system-status` of SystemData to `fail`
>>>>>>> refs/remotes/origin/main
    end
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Post data to the RBR server
PostToServer:
    if Password is not empty
    begin
        save stringify SystemData to RamDisk cat `systemdata`
        post stringify SystemData to RBRServer cat `/sensors/` cat MAC cat `/` cat Password
        or begin
            log `Unable to post sensor data`
            go to PSD2
        end

        ! If the map has changed, write it back to the RBR server.
    PSD2:
        if Changed
        begin
            put stringify MapObject into Map
!            post Map to LocalServer cat `.1/resources/php/rest.php/map`
            open File RamDisk cat `map` for writing
            write Map to File
            close File
            if Password is not empty
            begin
                if Confirm
                begin
                    log `Post the map & confirm`
!                    print Map
                    post Map to RBRServer cat `/confirm/` cat MAC cat `/` cat Password
                    clear Confirm
                end
                else
                begin
                    log `Post the map`
                    post Map to RBRServer cat `/map/` cat MAC cat `/` cat Password
                end
            end
            clear Changed
        end
    end
    return


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Post a change in sensor readings to the server
PostSensorLog:
<<<<<<< HEAD
!    log `Room spec: ` cat stringify RoomSpec
    if Password is not empty post stringify RoomSpec to RBRServer cat `/sensorlog/` cat MAC cat `/` cat Password
=======
    set property `ts` of RoomStatus to TS
    set property `target` of RoomStatus to TargetTemp
    set property `temp` of RoomStatus to Temperature
!    set property `relay` of RoomStatus to OnOff
!    set property `status` of RoomStatus to HeatingStatus
    open File RoomStatusFileName for writing
    write stringify RoomStatus to File
    write newline to File
    close File
!    open File RamDisk cat `logdata` for appending
!    write stringify RoomStatus to File
!    write newline to File
!    close File

    print `Room status: ` cat stringify RoomStatus
    if Password is not empty post stringify RoomStatus to RBRServer cat `/sensorlog/` cat MAC cat `/` cat Password
>>>>>>> refs/remotes/origin/main
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Add a warning message
AddWarning:
    add 1 to BadResponses
    if WarningMessages is not empty put WarningMessages cat `<br>` into WarningMessages
    put WarningMessages cat WarningMessage into WarningMessages
<<<<<<< HEAD
    set property `status` of SystemData to `suspect`
    set property Sensor of SystemData to SensorValues
    log `Warning: ` cat WarningMessage
=======
    set property `status` of SystemData to WarningMessages
    set property Sensor of SystemData to SensorValues
    print `Warning: ` cat WarningMessage
>>>>>>> refs/remotes/origin/main
    put empty into WarningMessage
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Clear the network error counter
ClearNetworkErrors:
    put -1 into NetworkErrors
!   Bump the network error counter
NetworkError:
    add 1 to NetworkErrors
    open File RamDisk cat `network-errors` for writing
    write `` cat NetworkErrors to File
    close File
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Send a message to an ESP-Now device
MessageESPDevice:
    if MasterIPAddr is empty return
    put property `ssid` of Device into DeviceMAC
    put from 8 of DeviceMAC into DeviceMAC
    put `http://` cat MasterIPAddr cat `/?mac=` cat DeviceMAC cat `&msg=` cat Message into URL
    get Response from url URL
    or begin
        log `------- Message to '` cat Name cat `' failed`
        put empty into Response
        return
    end
!    log URL cat ` -> ` cat Response
    if left 2 of Response is not `OK` log `Bad response: ` cat Response
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Send an email message
SendMailMessage:
    put `{"to":"admin@rbrheating.com","subject":"Restart","message":"` cat MailMessage cat `"}` into Mail
    post Mail to RBRServer cat `/sendmail/`
    return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Process a request from the UI
ProcessRequest:
    log `Request ` cat Request
    set Changed
    set Confirm
    put json Request into Request
    put property `action` of Request into Action
    if Action is `SystemName`
    begin
        set property `name` of MapObject to property `SystemName` of Request
    end
    else if Action is `map`
    begin
        put property `map` of Request into MapObject
        put stringify MapObject into Map
    end
    else if Action is `addroom`
    begin
        put property `spec` of Request into RoomSpec
        append RoomSpec to Rooms
        gosub to UpdateRooms
    end
    else if Action is `rooms`
    begin
        put property `rooms` of Request into Rooms
        gosub to UpdateRooms
    end
    else if Action is `backup`
    begin
        open File `backup` for writing
        write Map to File
        close File
    end
    else if Action is `restore`
    begin
        load Map from `backup`
        save Map to RamDisk cat `map`
        put json Map into MapObject
    end
    else if Action is `profiles`
    begin
        put property `profiles` of Request into Profiles
        put property `profile` of Request into CurrentProfile
        set property `profiles` of MapObject to Profiles
        set property `profile` of MapObject to CurrentProfile
        set property `calendar` of MapObject to property `calendar` of Request
        set property `calendar-data` of MapObject to property `calendar-data` of Request
        put stringify MapObject into Map
        save Map to RamDisk cat `map`
    end
    else if Action is `mode`
    begin
        put property `roomnumber` of Request into RoomNumber
        put element RoomNumber of Rooms into RoomSpec
        put property `name` of RoomSpec into RoomName
        put property `mode` of Request into Mode
        if Mode is `timed`
        begin
            if Request has property `advance`
            begin
                set property `advance-rq` of RoomSpec to property `advance` of Request
            end
            else set property `advance-rq` of RoomSpec to `-`
        end
        else if Mode is `on`
        begin
            if Request has property `target`
                set property `target` of RoomSpec to property `target` of Request
        end
        if Mode is `boost`
        begin
            if Request has property `target`
                set property `target` of RoomSpec to property `target` of Request
            if property `mode` of RoomSpec is not `boost`
                set property `prevmode` of RoomSpec to property `mode` of RoomSpec
            set property `boost` of RoomSpec to property `boost` of Request
        end
        set property `mode` of RoomSpec to Mode
        gosub to UpdateRoom
    end
    else if Action is `profiles`
    begin
    end
    else if Action is `roomname`
    begin
        put property `roomnumber` of Request into RoomNumber
        put element RoomNumber of Rooms into RoomSpec
        set property `name` of RoomSpec to property `name` of Request
        gosub to UpdateRoom
    end
    else if Action is `roomdata`
    begin
        put property `roomnumber` of Request into RoomNumber
        put element RoomNumber of Rooms into RoomSpec
        put property `items` of Request into Items
        put the keys of Items into Keys
        put 0 into N
        while N is less than the count of Keys
        begin
            put element N of Keys into Key
            set property Key of RoomSpec to property Key of Items
            add 1 to N
        end
        gosub to UpdateRoom
    end
    else if Action is `config`
    begin
        set property `name` of MapObject to property `name` of Request
        set property `address` of MapObject to property `address` of Request
        set property `ssid` of MapObject to property `ssid` of Request
        set property `password` of MapObject to property `password` of Request
        set property `extenders` of MapObject to property `extenders` of Request
        put property `names` of Request into RoomNames
        put property `ssids` of Request into RoomSSIDs
        put element 0 of Profiles into Profile
        put property `rooms` of Profile into Rooms
        put 0 into R
        while R is less than the count of Rooms
        begin
            put element R of Rooms into RoomSpec
            set property `name` of RoomSpec to element R of RoomNames
            set property `ssid` of RoomSpec to element R of RoomSSIDs
            set element R of Rooms to RoomSpec
            add 1 to R
        end
        set property `rooms` of Profile to Rooms
        set element 0 of Profiles to Profile
        set property `profiles` of MapObject to Profiles
        put stringify MapObject into Map
        put element CurrentProfile of Profiles into Profile
        put property `rooms` of Profile into Rooms
    end
    else if Action is `periods`
    begin
        put property `roomnumber` of Request into RoomNumber
        put element RoomNumber of Rooms into RoomSpec
        set property `events` of RoomSpec to property `periods` of Request
        gosub to UpdateRoom
    end
    else if Action is `request`
    begin
        set property `request` of MapObject to property `request` of Request
    end
    else if Action is `halt`
    begin
        log `Request to halt the system`
        set HaltRequested
    end
    return

SendMailMessage:
    put `{"to":"admin@rbrheating.com","subject":"Restart","message":"` cat MailMessage cat `"}` into Mail
    post Mail to RBRServer cat `/sendmail/`
    return

