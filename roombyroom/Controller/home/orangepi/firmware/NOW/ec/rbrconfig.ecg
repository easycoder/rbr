!	RBR-Now configuration utility

	script RBRConfig

    layout Layout
    layout Row
    layout Columns
    column Column
    window Window
    stack Stack
    variable Config
    variable MasterAccessPoints
    variable SlaveAccessPoints
    variable HostName
    variable HostSSID
    variable HostPassword
    variable DevicePassword
    variable Connected
    variable IPAddr
    variable Master
    variable IPMaster
    variable Name
    variable SSID
    variable Password
    variable MasterMAC
    variable SlaveMAC
    variable List
    variable Info
    variable APInfo
    variable File
    variable FileSize
    variable Sequence
    variable Start
    variable Finish
    variable Total
    variable Segment
    variable Length
    variable URL
    variable Result
    variable Content
    variable N
    variable P

!    debug step

    load Config from `.config.json`

    clear Connected
    put empty into HostName
    put empty into HostSSID
    put empty into HostPassword
    put empty into DevicePassword
    put empty into Master
    put empty into IPAddr
    put empty into File
    fork to APScan

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   Draw the UI

    init Layout     ! The main layout
    init Columns    ! The two columns
    init Column     ! A reusable column
    init Row        ! A reusable layout

    add Button button_text `Select Master` and size `20 1` to Row
    add Row to Column
    init Row
    add Button button_text `Select Slave` and size `20 1` to Row
    add Row to Column
    init Row
    add Button button_text `Select File` and size `20 1` to Row
    add Row to Column
    init Row
    add Button button_text `Update Device` and size `20 1` to Row
    add Row to Column
    init Row
    add Button button_text `Exit` and size `20 1` to Row
    add Row to Column
    add Column to Columns

    init Column
    init Row
    add Text text `Master:` and size `8 1` to Row
    add Text default_text `None` and key `-MASTER-` and expand_x true to Row
    add Row to Column

    init Row
    add Listbox key `-APLIST-S-` and size `60 10` to Row
    add Row to Column

    init Row
    add Text text `Program files` to Row
    add Row to Column

    init Row
    add Listbox key `-FILES-` and size `60 10` to Row
    add Row to Column

    init Row
    add Text text `Device:` and size `6 1` to Row
    add Text key `-DEVICE-` and expand_x true to Row
    add Row to Column

    init Row
    add Text text `File:` and size `6 1` to Row
    add Text key `-FILE-` and expand_x true to Row
    add Row to Column

    init Row
    add Text text `` and key `-STATUS-` to Row
    add Row to Column

    add Column expand_x true to Columns
    add Columns to Layout

    create Window `RBR-Now Configurator`
        layout Layout

    set property `disabled` of `Select Master` in Window to true
    set property `disabled` of `Select Slave` in Window to true
    set property `disabled` of `Select File` in Window to true
    set property `disabled` of `Update Device` in Window to true
    set property `disabled` of `Exit` in Window to true
    set property `values` of `-FILES-` in Window to the files in `.`

    on event `Select Master` in Window
    begin
        set property `value` of `-DEVICE-` in Window to Master
        set property `disabled` of `Select File` in Window to false
        if File is not empty set property `disabled` of `Update Device` in Window to false
    end

    on event `Select Slave` in Window
    begin
        put the value of key `-APLIST-S-` in Window into SSID
        set property `value` of `-DEVICE-` in Window to SSID
        set property `disabled` of `Select File` in Window to false
        if File is not empty set property `disabled` of `Update Device` in Window to false
    end

    on event `Select File` in Window
    begin
        put the value of key `-FILES-` in Window into File
        set property `value` of `-FILE-` in Window to File
        if SSID is not empty set property `disabled` of `Update Device` in Window to false
    end

    on event `Update Device` in Window go to Update

    on event `Exit` in Window
    begin
        close Window
        exit
    end

    stop

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   San for access points
APScan:
    set property `value` of `-STATUS-` in Window to `Scanning for local RBR access points`
    wait 10 ticks
    put system `nmcli device wifi list` into List
    split List
    put json `[]` into MasterAccessPoints
    put json `[]` into SlaveAccessPoints
    put 1 into N
    while N is less than the elements of List
    begin
        index List to N
        put List into SSID
        if left 1 of SSID is `*`
        begin
        end
        else
        begin
            put trim SSID into SSID
            put the position of ` ` in SSID into P
            put from P of SSID into SSID
            put trim SSID into SSID
            put the position of ` ` in SSID into P
            put left P of SSID into SSID
!            log SSID
            if left 7 of SSID is `RBR-Now`
            begin
                set property `value` of `-STATUS-` in Window to `Connecting to ` cat SSID
                gosub to ConnectToAP
                wait 3
            end
        end
        increment N
    end

    put property `ssid` of Config into SSID
    put property `password` of Config into Password
    print `Reconnect to default AP`
    set property `value` of `-STATUS-` in Window to `Reconnecting to default AP`
    system `nmcli dev wifi connect ` cat SSID cat ` password ` cat Password

    set property `value` of `-STATUS-` in Window to `Ready`
    set property `disabled` of `Exit` in Window to false
    if IPMaster is empty gosub to FindMaster
    if IPMaster is not empty
    begin
        print `Master IP: ` cat IPMaster
        set property `disabled` of `Select Master` in Window to false
    end
    stop

! Connect to the access point given by SSID
ConnectToAP:
    push N onto Stack
    print `Activate ` cat SSID
    set property `value` of `-STATUS-` in Window to `Activate ` cat SSID
    system `nmcli dev wifi connect ` cat SSID cat ` password 00000000`
    put system `hostname -I` into IPAddr
    put the position of the last `.` in IPAddr into N
    increment N
    put left N of IPAddr into IPAddr
    put `http://` cat IPAddr cat `1` into IPAddr
    get APInfo from IPAddr or go to CTAP3
    put trim APInfo into APInfo
    put APInfo into Info
    split Info on ` `
    index Info to 1
    if Info is `M`
    begin
        put APInfo into Master
        set property `value` of `-MASTER-` in Window to Master
        set property `disabled` of `Select Master` in Window to false
        print `Get the STA IP address`
        get IPAddr from IPAddr cat `/ipaddr` or go to CTAP3
        put `http://` cat IPAddr into IPMaster
        go to CTAP2
    end
    else if Info is `S`
    begin
        append APInfo to SlaveAccessPoints
        set property `values` of `-APLIST-S-` in Window to SlaveAccessPoints
        set property `disabled` of `Select Slave` in Window to false
        if IPMaster is not empty set property `disabled` of `Select Master` in Window to false
    end
CTAP2:
    pop N from Stack
    return
CTAP3:
    set property `value` of `-STATUS-` in Window to `Failed to activate ` cat SSID
    pop N from Stack
    return

! Search for the address used by the Master
FindMaster:
    put system `hostname -I` into IPAddr
    put the position of the last `.` in IPAddr into N
    increment N
    put `http://` cat left N of IPAddr into IPAddr
    put 1 into N
    while N is less than 255
    begin
        print `Probing ` cat IPAddr cat N
        set property `value` of `-STATUS-` in Window to `Locating Master: Probing ` cat IPAddr cat N
        get Info from IPAddr cat N timeout 1 or goto CTM2
        print `Response from ` cat IPAddr cat `: ` cat left 40 of Info
        put Info into APInfo
        split APInfo on ` `
        index APInfo to 2
        put APInfo into Name
        put Info into Master
        set property `value` of `-MASTER-` in Window to Master
        set property `value` of `-STATUS-` in Window to `Found ` cat Name
        put `http://` cat IPAddr into IPMaster
        return
    CTM2:
        wait 50 ticks
        increment N
    end
    set property `value` of `-STATUS-` in Window to `Master not found`
    return

Update:
    split SSID on ` `
    index SSID to 2
    set property `value` of `-STATUS-` in Window to `Updating ` cat SSID cat `... `

    split SSID on ` `
    index SSID to 0
    put from 8 of SSID into SlaveMAC
    print `Slave MAC: ` cat SlaveMAC

    load Content from File
    put the length of Content into FileSize
    set property `value` of `-STATUS-` in Window to `Updating ` cat File cat ` (size=` cat FileSize cat `)`

    put 0 into Sequence
    put 0 into Start
    put 0 into Total
    while Start is less than FileSize
    begin
        if Finish is greater than FileSize put FileSize into Finish
        add Blocksize to Start giving Finish
        put from Start to Finish of File into Segment
        put the length of Segment into Length
        add Length to Total
        put encode Segment into Segment
        put `http://` cat IPAddr cat `/?mac=` cat SlaveMAC cat `&msg=part:`
            cat Sequence cat `,text:` cat Segment into URL
        get Result from URL or go to UpdateFailed
        log Result
        if Result is not `OK`
        begin
            set property `value` of `-STATUS-` in Window to `Failed to send part ` cat Sequence
            stop
        end
        put Finish into Start
        increment Sequence
    end

    get Result from `http://` cat IPAddr cat `/?mac=` cat SlaveMAC cat `&msg=save:` cat `temp.txt`
        or go to UpdateFailed
    if Result is not `True`
    begin
        if Result is Total
            set property `value` of `-STATUS-` in Window to `Mismatched length: `
            cat Total cat ` - ` cat Result
    end
    stop

UpdateFailed:
    print `Update failed`
    stop
