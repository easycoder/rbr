!	Room By Room

	script RoomByRoom
    
    div Body
    div MainPanel
    div SystemNamePanel
    div OuterPanel
    div HelpPanel
    div RoomNamePanel
    div RoomTempPanel
    div RoomToolsButton
    div TimedInfo
    div ModePanel
    div ModeHolder
    div ButtonT
    div ButtonM
    div ButtonO
    div UpButton
    div DownButton
    div OnTarget
    div TargetTemp
    div DialogPanel
    div DialogTitle
    div DialogText
    div Alive
    input Input
    img Hamburger
    img ModeIcon
    button AddRoomButton
    button GetMACButton
    button GetNameButton
    button OKButton
    button CancelButton
    button BackupButton
    button RestoreButton
    button HelpButton
    button DialogButton1
    button DialogButton2
    module Storyteller
    module Editor
    variable Mobile
    variable Server
    variable Revisit
    variable Webson
    variable HelpScript
    variable EditorScript
    variable RoomEditScript
    variable RoomToolsScript
    variable MAC
    variable SystemName
    variable Map
    variable Map2
    variable Rooms
    variable RoomSpec
    variable RoomCount
    variable RoomIndex
    variable ClickIndex
    variable FlashIndex
    variable Redraw
    variable Refresh
    variable Sensors
    variable SensorData
    variable SensorSpec
    variable RelayState
    variable Temperature
    variable Target
    variable TargetFlag
    variable Events
    variable Event
    variable Blocked
    variable Mode
    variable CurrentMode
    variable Flag
    variable Error
    variable SID
    variable TID
    variable Count
    variable Result
    variable RoomName
    variable Finish
    variable FH
    variable FM
    variable UD
    variable E
    variable H
    variable L
    variable M
    variable N
    variable R
    variable T
    variable X
    
    ! Webson specs
    variable MainScreenWebson
    variable MainMenuWebson
    variable GetMacWebson
    variable GetNameWebson
    variable RoomWebson
    variable RoomEditorWebson
    variable RoomEditMenuWebson
    variable RoomToolsMenuWebson
    variable ModeWebson
    variable TimedWebson
    variable OnWebson
    variable OffWebson
    variable DialogWebson
    
!    debug step
!	 go to Skip
    
	every 5 seconds
    begin
    	if not Blocked go to Start
    	wait 1
    	if not Blocked go to Start
    	wait 1
    	if not Blocked go to Start
    	wait 1
    	if not Blocked go to Start
    	wait 1
    	if not Blocked go to Start        
    end

Skip:
	clear Blocked
    set Redraw

	rest path `rest.php`
    
    set the title to `RBR`
    
    clear Mobile
    if mobile
        if portrait set Mobile
    
    put `https://rbr.easycoder.software/rest.php` into Server

	create Body
    if Mobile
    begin
    	set style `width` of Body to `100%`
        set style `font-size` of Body to `16px`
    end
    else
    begin
        put the height of the window into N
        multiply N by 9
        divide N by 16
    	set style `width` of Body to N
        set style `margin` of Body to `0 auto`
        set style `font-size` of Body to `1.5em`
        set style `border` of Body to `1px solid lightgray`
        set style `font-size` of Body to `20px`
    end
!    put empty into storage as `MAC`

!	First get EasyCoder scripts and the various layout scripts
    rest get HelpScript from `/resources/ecs/storyteller.ecs?v=` cat now
    rest get EditorScript from `/resources/ecs/editor.ecs?v=` cat now
    rest get RoomEditScript from `/resources/ecs/roomedit.ecs?v=` cat now
    rest get RoomToolsScript from `/resources/ecs/roomtools.ecs?v=` cat now
    
    rest get MainScreenWebson from `/resources/webson/rbr.json?v=` cat now
    rest get MainMenuWebson from `/resources/webson/mainmenu.json?v=` cat now
	rest get GetMacWebson from `/resources/webson/getmac.json?v=` cat now
	rest get GetNameWebson from `/resources/webson/getname.json?v=` cat now
    rest get RoomWebson from `/resources/webson/room.json?v=` cat now
    rest get RoomEditorWebson from `/resources/webson/roomeditor.json?v=` cat now
    rest get RoomEditMenuWebson from `/resources/webson/roomeditmenu.json?v=` cat now
    rest get RoomToolsMenuWebson from `/resources/webson/roomtoolsmenu.json?v=` cat now
    rest get ModeWebson from `/resources/webson/mode.json?v=` cat now
    rest get TimedWebson from `/resources/webson/timed.json?v=` cat now
    rest get OnWebson from `/resources/webson/on.json?v=` cat now
    rest get OffWebson from `/resources/webson/off.json?v=` cat now
    rest get DialogWebson from `/resources/webson/dialog-confirm.json?v=` cat now

!	Render each of the layouts (except RoomWebson because that's done later)
	render MainScreenWebson in Body
    attach MainPanel to `mainpanel`
    attach OuterPanel to `outerpanel`
    attach HelpPanel to `helppanel`
    attach Alive to `alive`
    attach ModePanel to `mode-panel`
    
    put empty into Map2
    
!	Set up the hamburger menu
    attach Hamburger to `hamburger`
    on click Hamburger
    begin
    	if Storyteller is running
        begin
        	close Storyteller
            set style `display` of OuterPanel to `block`
            set style `display` of HelpPanel to `none`
            clear MainPanel
            clear Blocked
            set Redraw
            stop
        end
        else if not Blocked go to ShowMenu
    end
    
    get Revisit from storage as `revisit`
    if Revisit is empty
    begin
        put `home` into SID
        put `content` into TID
      	go to RunHelp
    end

    put `yes` into storage as `revisit`

!	Make sure we have a MAC address; if not, go ask for one
    clear Flag
    get MAC from storage as `MAC`
    if MAC is empty go to GetMAC

!	Get the system name
	get SystemName from storage as `SystemName`
    if SystemName is empty
    begin
		rest get SystemName from Server cat `/name/` cat MAC cat `?v=` cat now
        if SystemName is empty go to GetSystemName
    end
    print MAC

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!	Main start point
Start:
	if not Redraw go to GetMap

    clear MainPanel
    put 0 into RoomCount
    clear Error

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!	Get the map
GetMap:
	set Blocked
    rest get Map from Server cat `/map/` cat MAC cat `?v=` cat now
    or put empty into Map
    if Map is empty stop
!    begin
!    	alert `No system map could be found.` cat newline
!        	cat `Please contact your system administrator.`
!        stop
!    end
!    print Map
    if Map is not Map2 set Redraw
    put Map into Map2

	! Show the system
    attach SystemNamePanel to `system-name`
    set the content of SystemNamePanel to SystemName

	rest get Sensors from Server cat `/sensors/` cat MAC cat `?v=` cat now

	put property `rooms` of Map into Rooms
    put the json count of Rooms into R
    if R is RoomCount clear Redraw
    else
    begin
    	put R into RoomCount
        set Redraw
    end
    if Redraw
    begin
    	clear MainPanel
    	set Refresh
    end

    set the elements of Mode to RoomCount
    set the elements of ModeHolder to RoomCount
    set the elements of ModeIcon to RoomCount
    set the elements of RoomSpec to RoomCount
    set the elements of RoomNamePanel to RoomCount
    set the elements of RoomNamePanel to RoomCount
    set the elements of RoomTempPanel to RoomCount
    set the elements of RoomToolsButton to RoomCount
    set the elements of RoomName to RoomCount
    set the elements of SensorSpec to RoomCount
    set the elements of RelayState to RoomCount
    set the elements of ModeHolder to RoomCount
    set the elements of ModeIcon to RoomCount
    
    put 0 into RoomIndex
    while RoomIndex is less than RoomCount
    begin
        index Mode to RoomIndex
        index ModeHolder to RoomIndex
        index ModeIcon to RoomIndex
        index RoomSpec to RoomIndex
        index RelayState to RoomIndex
        index SensorSpec to RoomIndex
        index RoomNamePanel to RoomIndex
        index RoomTempPanel to RoomIndex
        index RoomToolsButton to RoomIndex
        index RoomName to RoomIndex
        
        if Redraw
        begin
            ! Render the Webson spec for a room
        	put RoomWebson into Webson
        	replace `/ROOM/` with RoomIndex in Webson
        	render Webson in MainPanel
            attach ModeHolder to `room-` cat RoomIndex cat `-mode-holder`
        end

		! Attach to various elements of the display
        attach RoomNamePanel to `room-name-` cat RoomIndex or
        begin
        	print `Can't find room-name-` cat RoomIndex
        	stop
        end
		attach RoomTempPanel to `room-temp-` cat RoomIndex or
        begin
        	print `Can't find room-temp-` cat RoomIndex
        	stop
        end
        attach RoomToolsButton to `room-tools-` cat RoomIndex or
        begin
        	print `Can't find room-tools-` cat RoomIndex
        	stop
        end

		! Set the room name
		put element RoomIndex of Rooms into RoomSpec
        put property `name` of RoomSpec into RoomName
        set the content of RoomNamePanel to RoomName
        
        ! Show the current temperature
        put property `sensor` of RoomSpec into SensorData
        put property SensorData of Sensors into SensorSpec
        put property `temperature` of SensorSpec into Temperature
        set the content of RoomTempPanel to Temperature cat `&deg;C`
        
        ! Show the relay state, red (on) or blue (off)
        put property `relay` of SensorSpec into RelayState
        if RelayState is `on` set style `background` of RoomTempPanel to `red`
        else set style `background` of RoomTempPanel to `blue`

        ! Get the mode
        put property `mode` of RoomSpec into Mode
        
        ! Show the mode indicator
        if Refresh
        begin
            if Mode is `timed`
            begin
				clear ModeHolder
                put TimedWebson into Webson
            	replace `/ROOM/` with RoomIndex in Webson
            	render Webson in ModeHolder
                attach TimedInfo to `room-` cat RoomIndex cat `-timed-info`
                put property `events` of RoomSpec into Events
                divide now by 60 giving N
                put N modulo 24*60 into N
                divide N by 60 giving H
                put N modulo 60 into M
                put 0 into E
                while E is less than the json count of Events
                begin
                	put element E of Events into Event
                    put property `until` of Event into Finish
                    split Finish on `:` giving Finish
                    index Finish to 0
                    put the value of Finish into FH
                    if FH is 0 put 24 into FH
                    if H is less than FH
                    begin
                        set the content of TimedInfo to property `temp` of Event
                            cat `&deg;C->` cat property `until` of Event
                        go to HandleClicks
                    end
                    else if H is FH
                    begin
                    	index Finish to 1
                    	put the value of Finish into FM
                        if M is less than FM
                        begin
                            set the content of TimedInfo to property `temp` of Event
                                cat `&deg;C->` cat property `until` of Event
                            go to HandleClicks
                        end
                    end
                	add 1 to E
                end
                put element 0 of Events into Event
                put property `until` of Event into Finish
                put property `temp` of Event into Temperature
                set the content of TimedInfo to Temperature cat `&deg;C->` cat Finish
            end
            else if Mode is `on`
            begin
				clear ModeHolder
                put OnWebson into Webson
            	replace `/ROOM/` with RoomIndex in Webson
            	render Webson in ModeHolder
                attach TargetTemp to `room-` cat RoomIndex cat `-target`
                set the content of TargetTemp to property `target` of RoomSpec cat `&deg;C`
            end
            else if Mode is `off`
            begin
				clear ModeHolder
                put OffWebson into Webson
            	replace `/ROOM/` with RoomIndex in Webson
            	render Webson in ModeHolder
            end
        end

HandleClicks:
		! Handle a click on the row hamburger
        on click RoomToolsButton
        begin
        	if Blocked stop
        	put the index of RoomToolsButton into ClickIndex
            go to RoomTools
        end

	    ! Handle a click on a mode button
        attach ModeIcon to `room-` cat RoomIndex cat `-mode-icon`
	    on click ModeIcon
	    begin
        	if Blocked stop
    		set Blocked
            put the index of ModeIcon into ClickIndex
        	index RoomSpec to ClickIndex
            index RoomName to the index of ModeIcon
            index RelayState to the index of ModeIcon
            index Mode to the index of ModeIcon
        	put Mode into CurrentMode
            wait 20 ticks

			clear ModePanel
            put ModeWebson into Webson
            replace `/ROOM/` with RoomName in Webson
			render Webson in ModePanel
            attach ButtonT to `mode-timed`
            attach ButtonM to `mode-on`
            attach ButtonO to `mode-off`
            attach DownButton to `on-down`
            attach UpButton to `on-up`
            attach OnTarget to `on-target`
    
            put property `target` of RoomSpec into Target
			set the content of OnTarget to Target cat `&deg;C`
            clear TargetFlag

			set style `visibility` of ModePanel to `visible`
            on click ButtonT go to SelectTimed
            on click ButtonM go to SelectOn
            on click ButtonO go to SelectOff
            on click DownButton go to OnDown
            on click UpButton go to OnUp
	    end
        
        add 1 to RoomIndex
    end
    
    clear Refresh
    clear Redraw
    clear Blocked
        
    set style `visibility` of Alive to `visible`
    wait 50 ticks
    set style `visibility` of Alive to `hidden`
	wait 450 ticks
	stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!	'On' Up and Down buttons
OnDown:
	clear UD
    go to UpDown

OnUp:
	set UD
    
UpDown:
    split Target on `.` giving T
    index T to 1
    put T into X
    index T to 0
    multiply the value of T by 10 giving T
    add X to T
    if UD add 5 to T else if Target is not `0.0` take 5 from T
    if T is less than 10 put `0` cat T into T
    else put `` cat T into T
    put the length of T into L
    take 1 from L
    put left L of T into X
    put X cat `.` into X
    put X cat from L of T into Target
    set the content of OnTarget to Target cat `&deg;C`
    set TargetFlag
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!	Select timed mode
SelectTimed:
   	put `timed` into Mode
    go to SelectMode

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!	Select 'on' mode
SelectOn:
    put `on` into Mode
    go to SelectMode

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!	Select off mode
SelectOff:
    put `off` into Mode

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!	Select the mode
SelectMode:
    set style `visibility` of ModePanel to `hidden`
	if Mode is CurrentMode
    begin
    	if not TargetFlag
        begin
            clear Refresh
        	clear Blocked
            stop
        end
    end
	set property `target` of RoomSpec to Target 
	set property `mode` of RoomSpec to Mode 
    set element ClickIndex of Rooms to RoomSpec
    set property `rooms` of Map to Rooms
    set property `message` of Map to `confirm`
    rest post Map to Server cat `/map/` cat MAC
    fork to FlashModeIndicator
	! Wait for a response from the server
   	put 0 into Count
   	while Count is less than 10
    begin
        wait 5 seconds
        rest get Map from Server cat `/map/` cat MAC cat `?v=` cat now
        if property `message` of Map is `OK`
        begin
    		set Refresh
            clear Blocked
            stop
        end
        add 1 to Count
    end
    alert `Website is not responding"
    set Refresh
    clear Blocked
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!	Flash the mode indicator button while waiting
FlashModeIndicator:
    put the index of ModeIcon into FlashIndex
	while Blocked
    begin
        index ModeIcon to FlashIndex
	    set style `opacity` of ModeIcon to `0.25`
    	wait 50 ticks
        index ModeIcon to FlashIndex
	    set style `opacity` of ModeIcon to `1.0`
        wait 50 ticks
    end
    stop

RunHelp:
    set style `display` of OuterPanel to `none`
    set style `display` of HelpPanel to `block`
    run HelpScript with HelpPanel and SID and TID as Storyteller
	stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Ask the user for the MAC address
GetMAC:
	set Blocked
    clear MainPanel
    render GetMacWebson in MainPanel
    attach Input to `getmac-input`
    attach OKButton to `getmac-ok`
    attach CancelButton to `getmac-cancel`
    attach HelpButton to `getmac-help`
    if not Flag set style `display` of CancelButton to `none`
    on click OKButton
    begin
    	put the content of Input into MAC
        clear Input
        print `MAC = ` cat MAC
        if MAC is not empty
        begin
        	put MAC into storage as `MAC`
            clear MainPanel
            clear Blocked
            set Redraw
        end
    end
    on click CancelButton
    begin
    	clear MainPanel
        clear Blocked
        set Redraw
        stop
    end
    on click HelpButton
    begin
    	clear MainPanel
    	set style `display` of OuterPanel to `none`
      	set style `display` of HelpPanel to `block`
    	put `home` into SID
        put `MAC` into TID
        go to RunHelp
    end
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 	Ask the user for the system name
GetSystemName:
	set Blocked
    clear MainPanel
    render GetNameWebson in MainPanel
    attach Input to `getname-input`
    attach OKButton to `getname-ok`
    attach CancelButton to `getname-cancel`
    attach HelpButton to `getname-help`
    if Flag set the content of Input to SystemName
    else set style `display` of CancelButton to `none`
    on click OKButton
    begin
    	put the content of Input into SystemName
        print `Name = ` cat SystemName
        if SystemName is not empty
        begin
        	put SystemName into storage as `SystemName`
            rest post to Server cat `/name/` cat MAC cat `/` cat SystemName
            clear MainPanel
            clear Blocked
        	set Redraw
            stop
        end
    end
    on click CancelButton
    begin
    	clear MainPanel
        clear Blocked
        set Redraw
        stop
    end
    on click HelpButton
    begin
        clear MainPanel
    	set style `display` of OuterPanel to `none`
      	set style `display` of HelpPanel to `block`
    	put `home` into SID
        put `Name` into TID
        go to RunHelp
    end
	stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!	Deal with the main hamburger menu
ShowMenu:
	set Blocked
    wait 20 ticks
	clear MainPanel
    render MainMenuWebson in MainPanel
    attach AddRoomButton to `button-add`
    attach GetMACButton to `button-getmac`
    attach GetNameButton to `button-getname`
    attach BackupButton to `button-backup`
    attach RestoreButton to `button-restore`
    attach HelpButton to `button-help`
    attach CancelButton to `button-cancel`

    on click AddRoomButton
    begin
    	rest get RoomSpec from `/resources/json/newroomspec.json?v=` cat now
        append RoomSpec to Rooms
        set property `rooms` of Map to Rooms
	    rest post Map to Server cat `/map/` cat MAC
    	clear MainPanel
        clear Blocked
        set Redraw
    	stop
    end
    
    on click GetMACButton
    begin
    	set Flag
        go to GetMAC
    end
    
    on click GetNameButton
    begin
    	set Flag
        go to GetSystemName
    end
    
    on click BackupButton go to Backup
    
    on click RestoreButton go to Restore
    
    on click HelpButton
    begin
        put `home` into SID
        put `content` into TID
      	go to RunHelp
    end
    
    on click CancelButton
    begin
    	clear MainPanel
        clear Blocked
        set Redraw
        stop
    end
    
	stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 	The room tools
RoomTools:
	set Blocked
    wait 20 ticks ! to allow things to complete before running the editor!
	clear MainPanel
    render RoomToolsMenuWebson in MainPanel
    put property `rooms` of Map into Rooms
    put empty into Result
    run RoomToolsScript with MainPanel and Rooms and ClickIndex and Result as Editor
    clear MainPanel
    if char 0 of Result is `H`
    begin
    	split Result on ` ` giving Result
        index Result to 1
        put Result into SID
        index Result to 2
        put Result into TID
      	go to RunHelp
    end
    if Result is `Changed`
    begin
        set property `rooms` of Map to Rooms
    	rest post Map to Server cat `/map/` cat MAC
    end
	clear Blocked
    set Redraw
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 	The room editor
RoomEditor:
	set Blocked
    wait 20 ticks ! to allow things to complete before continuing
	clear MainPanel
    render RoomEditMenuWebson in MainPanel
    put property `rooms` of Map into Rooms
    index RoomSpec to ClickIndex
    put element ClickIndex of Rooms into RoomSpec
    put empty into Result
    run RoomEditScript with MainPanel and RoomSpec and Result as Editor
    if Result is `OK`
    begin
        set element ClickIndex of Rooms to RoomSpec
        set property `rooms` of Map to Rooms
    	rest post Map to Server cat `/map/` cat MAC
    end
    clear MainPanel
    clear Blocked
    set Redraw
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 	Backup the system
Backup:
	set Blocked
    attach DialogPanel to `dialog-panel`
    render DialogWebson in DialogPanel
    attach DialogTitle to `dialog-title`
    attach DialogText to `dialog-text`
    attach DialogButton1 to `dialog-button1`
    attach DialogButton2 to `dialog-button2`
    set the content of DialogTitle to `System Backup`
    set the content of DialogText to `Tap "Save" to save your current `
    	cat `system configuration. Any previous backup will be over-written.`
    set the content of DialogButton1 to `Save`
    set the content of DialogButton2 to `Cancel`
    on click DialogButton1
    begin
    	clear DialogPanel
    	rest post Map to Server cat `/backup/` cat MAC
        set Redraw
        clear Blocked
    end
    on click DialogButton2
    begin
    	clear DialogPanel
        set Redraw
        clear Blocked
    end
    stop

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 	Restore from backup
Restore:
	set Blocked
    attach DialogPanel to `dialog-panel`
    render DialogWebson in DialogPanel
    attach DialogTitle to `dialog-title`
    attach DialogText to `dialog-text`
    attach DialogButton1 to `dialog-button1`
    attach DialogButton2 to `dialog-button2`
    set the content of DialogTitle to `System Restore`
    set the content of DialogText to `Tap "Restore" to restore your system configuration `
    	cat `from the saved backup (if any).`
    set the content of DialogButton1 to `Restore`
    set the content of DialogButton2 to `Cancel`
    on click DialogButton1
    begin
    	clear DialogPanel
        rest post to Server cat `/restore/` cat MAC
        set Redraw
        clear Blocked
    end
    on click DialogButton2
    begin
    	clear DialogPanel
        set Redraw
        clear Blocked
    end
    stop